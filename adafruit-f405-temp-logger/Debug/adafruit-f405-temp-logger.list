
adafruit-f405-temp-logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800dc74  0800dc74  0001dc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de04  0800de04  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800de04  0800de04  0001de04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de0c  0800de0c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800de14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002114  200001e0  0800dff4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022f4  0800dff4  000222f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f655  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004323  00000000  00000000  0003f865  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  00043b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  000450e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002493e  00000000  00000000  00046460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015c72  00000000  00000000  0006ad9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c21f0  00000000  00000000  00080a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142c00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c08  00000000  00000000  00142c7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc5c 	.word	0x0800dc5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800dc5c 	.word	0x0800dc5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f94d 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f00b fb50 	bl	800c494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f965 	bl	80010ee <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f92d 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000118 	.word	0x20000118
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000004 	.word	0x20000004
 8000e84:	20000448 	.word	0x20000448

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000448 	.word	0x20000448

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ffee 	bl	8000e88 <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_Delay+0x40>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff feb8 	bl	8000e88 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e099      	b.n	8001258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001144:	e00f      	b.n	8001166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001146:	f7ff fe9f 	bl	8000e88 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b05      	cmp	r3, #5
 8001152:	d908      	bls.n	8001166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e078      	b.n	8001258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1e8      	bne.n	8001146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_DMA_Init+0x158>)
 8001180:	4013      	ands	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d107      	bne.n	80011d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4313      	orrs	r3, r2
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f023 0307 	bic.w	r3, r3, #7
 80011e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d117      	bne.n	800122a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4313      	orrs	r3, r2
 8001202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00e      	beq.n	800122a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fa99 	bl	8001744 <DMA_CheckFifoParam>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001226:	2301      	movs	r3, #1
 8001228:	e016      	b.n	8001258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fa50 	bl	80016d8 <DMA_CalcBaseAndBitshift>
 8001238:	4603      	mov	r3, r0
 800123a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001240:	223f      	movs	r2, #63	; 0x3f
 8001242:	409a      	lsls	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	f010803f 	.word	0xf010803f

08001264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_DMA_Start_IT+0x26>
 8001286:	2302      	movs	r3, #2
 8001288:	e048      	b.n	800131c <HAL_DMA_Start_IT+0xb8>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d137      	bne.n	800130e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2202      	movs	r2, #2
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f9e2 	bl	800167c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	223f      	movs	r2, #63	; 0x3f
 80012be:	409a      	lsls	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0216 	orr.w	r2, r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0208 	orr.w	r2, r2, #8
 80012fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e005      	b.n	800131a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001316:	2302      	movs	r3, #2
 8001318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131a:	7dfb      	ldrb	r3, [r7, #23]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d004      	beq.n	8001342 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00c      	b.n	800135c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001374:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <HAL_DMA_IRQHandler+0x258>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <HAL_DMA_IRQHandler+0x25c>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0a9b      	lsrs	r3, r3, #10
 8001380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	2208      	movs	r2, #8
 8001394:	409a      	lsls	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d01a      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2208      	movs	r2, #8
 80013c2:	409a      	lsls	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2201      	movs	r2, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d012      	beq.n	800140a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	2201      	movs	r2, #1
 80013f8:	409a      	lsls	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	f043 0202 	orr.w	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140e:	2204      	movs	r2, #4
 8001410:	409a      	lsls	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d012      	beq.n	8001440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	2204      	movs	r2, #4
 800142e:	409a      	lsls	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	f043 0204 	orr.w	r2, r3, #4
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001444:	2210      	movs	r2, #16
 8001446:	409a      	lsls	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d043      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03c      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	2210      	movs	r2, #16
 8001464:	409a      	lsls	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d018      	beq.n	80014aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d108      	bne.n	8001498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d024      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
 8001496:	e01f      	b.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01b      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
 80014a8:	e016      	b.n	80014d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0208 	bic.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	2220      	movs	r2, #32
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 808e 	beq.w	8001606 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8086 	beq.w	8001606 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2220      	movs	r2, #32
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b05      	cmp	r3, #5
 8001510:	d136      	bne.n	8001580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0216 	bic.w	r2, r2, #22
 8001520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <HAL_DMA_IRQHandler+0x1da>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0208 	bic.w	r2, r2, #8
 8001550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	223f      	movs	r2, #63	; 0x3f
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001572:	2b00      	cmp	r3, #0
 8001574:	d07d      	beq.n	8001672 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
        }
        return;
 800157e:	e078      	b.n	8001672 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01c      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d108      	bne.n	80015ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d030      	beq.n	8001606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	4798      	blx	r3
 80015ac:	e02b      	b.n	8001606 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d027      	beq.n	8001606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
 80015be:	e022      	b.n	8001606 <HAL_DMA_IRQHandler+0x29e>
 80015c0:	20000118 	.word	0x20000118
 80015c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0210 	bic.w	r2, r2, #16
 80015e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	2b00      	cmp	r3, #0
 800160c:	d032      	beq.n	8001674 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d022      	beq.n	8001660 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2205      	movs	r2, #5
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3301      	adds	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	429a      	cmp	r2, r3
 800163c:	d307      	bcc.n	800164e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f2      	bne.n	8001632 <HAL_DMA_IRQHandler+0x2ca>
 800164c:	e000      	b.n	8001650 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800164e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
 8001670:	e000      	b.n	8001674 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001672:	bf00      	nop
    }
  }
}
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop

0800167c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001698:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b40      	cmp	r3, #64	; 0x40
 80016a8:	d108      	bne.n	80016bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016ba:	e007      	b.n	80016cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3b10      	subs	r3, #16
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <DMA_CalcBaseAndBitshift+0x64>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <DMA_CalcBaseAndBitshift+0x68>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d909      	bls.n	800171a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	1d1a      	adds	r2, r3, #4
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	659a      	str	r2, [r3, #88]	; 0x58
 8001718:	e007      	b.n	800172a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	aaaaaaab 	.word	0xaaaaaaab
 8001740:	0800dd1c 	.word	0x0800dd1c

08001744 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d11f      	bne.n	800179e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d855      	bhi.n	8001810 <DMA_CheckFifoParam+0xcc>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <DMA_CheckFifoParam+0x28>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	0800178f 	.word	0x0800178f
 8001774:	0800177d 	.word	0x0800177d
 8001778:	08001811 	.word	0x08001811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d045      	beq.n	8001814 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800178c:	e042      	b.n	8001814 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001796:	d13f      	bne.n	8001818 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800179c:	e03c      	b.n	8001818 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a6:	d121      	bne.n	80017ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d836      	bhi.n	800181c <DMA_CheckFifoParam+0xd8>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <DMA_CheckFifoParam+0x70>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017cb 	.word	0x080017cb
 80017bc:	080017c5 	.word	0x080017c5
 80017c0:	080017dd 	.word	0x080017dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      break;
 80017c8:	e02f      	b.n	800182a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d024      	beq.n	8001820 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017da:	e021      	b.n	8001820 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017e4:	d11e      	bne.n	8001824 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017ea:	e01b      	b.n	8001824 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d902      	bls.n	80017f8 <DMA_CheckFifoParam+0xb4>
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d003      	beq.n	80017fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017f6:	e018      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
      break;
 80017fc:	e015      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00e      	beq.n	8001828 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
      break;
 800180e:	e00b      	b.n	8001828 <DMA_CheckFifoParam+0xe4>
      break;
 8001810:	bf00      	nop
 8001812:	e00a      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      break;
 8001814:	bf00      	nop
 8001816:	e008      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      break;
 8001818:	bf00      	nop
 800181a:	e006      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      break;
 800181c:	bf00      	nop
 800181e:	e004      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      break;
 8001820:	bf00      	nop
 8001822:	e002      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      break;   
 8001824:	bf00      	nop
 8001826:	e000      	b.n	800182a <DMA_CheckFifoParam+0xe6>
      break;
 8001828:	bf00      	nop
    }
  } 
  
  return status; 
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e16b      	b.n	8001b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 815a 	bne.w	8001b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x4a>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b12      	cmp	r3, #18
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d00b      	beq.n	800191e <HAL_GPIO_Init+0xe6>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001912:	2b11      	cmp	r3, #17
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b12      	cmp	r3, #18
 800191c:	d130      	bne.n	8001980 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 0201 	and.w	r2, r3, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80b4 	beq.w	8001b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_GPIO_Init+0x308>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a5e      	ldr	r2, [pc, #376]	; (8001b40 <HAL_GPIO_Init+0x308>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <HAL_GPIO_Init+0x308>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019da:	4a5a      	ldr	r2, [pc, #360]	; (8001b44 <HAL_GPIO_Init+0x30c>)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x310>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d02b      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x314>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d025      	beq.n	8001a5a <HAL_GPIO_Init+0x222>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x318>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d01f      	beq.n	8001a56 <HAL_GPIO_Init+0x21e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_GPIO_Init+0x31c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d019      	beq.n	8001a52 <HAL_GPIO_Init+0x21a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x320>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_GPIO_Init+0x216>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00d      	beq.n	8001a4a <HAL_GPIO_Init+0x212>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x328>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x20e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_GPIO_Init+0x32c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_GPIO_Init+0x20a>
 8001a3e:	2307      	movs	r3, #7
 8001a40:	e00e      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a42:	2308      	movs	r3, #8
 8001a44:	e00c      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e00a      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x228>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a70:	4934      	ldr	r1, [pc, #208]	; (8001b44 <HAL_GPIO_Init+0x30c>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f ae90 	bls.w	8001854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	3724      	adds	r7, #36	; 0x24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40021400 	.word	0x40021400
 8001b60:	40021800 	.word	0x40021800
 8001b64:	40021c00 	.word	0x40021c00
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e0cd      	b.n	8001d24 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	f040 80bd 	bne.w	8001d1e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ba4:	4a64      	ldr	r2, [pc, #400]	; (8001d38 <HAL_GPIO_DeInit+0x1cc>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a5c      	ldr	r2, [pc, #368]	; (8001d3c <HAL_GPIO_DeInit+0x1d0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d02b      	beq.n	8001c26 <HAL_GPIO_DeInit+0xba>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a5b      	ldr	r2, [pc, #364]	; (8001d40 <HAL_GPIO_DeInit+0x1d4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d025      	beq.n	8001c22 <HAL_GPIO_DeInit+0xb6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a5a      	ldr	r2, [pc, #360]	; (8001d44 <HAL_GPIO_DeInit+0x1d8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01f      	beq.n	8001c1e <HAL_GPIO_DeInit+0xb2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a59      	ldr	r2, [pc, #356]	; (8001d48 <HAL_GPIO_DeInit+0x1dc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_DeInit+0xae>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_GPIO_DeInit+0x1e0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_DeInit+0xaa>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a57      	ldr	r2, [pc, #348]	; (8001d50 <HAL_GPIO_DeInit+0x1e4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_DeInit+0xa6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a56      	ldr	r2, [pc, #344]	; (8001d54 <HAL_GPIO_DeInit+0x1e8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_DeInit+0xa2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <HAL_GPIO_DeInit+0x1ec>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_DeInit+0x9e>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e00e      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00c      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00a      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_DeInit+0xbc>
 8001c26:	2300      	movs	r3, #0
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d132      	bne.n	8001c9e <HAL_GPIO_DeInit+0x132>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001c48:	4a3b      	ldr	r2, [pc, #236]	; (8001d38 <HAL_GPIO_DeInit+0x1cc>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	43da      	mvns	r2, r3
 8001c58:	4837      	ldr	r0, [pc, #220]	; (8001d38 <HAL_GPIO_DeInit+0x1cc>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	400a      	ands	r2, r1
 8001c60:	3302      	adds	r3, #2
 8001c62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	493b      	ldr	r1, [pc, #236]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4934      	ldr	r1, [pc, #208]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4930      	ldr	r1, [pc, #192]	; (8001d5c <HAL_GPIO_DeInit+0x1f0>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2103      	movs	r1, #3
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	08d2      	lsrs	r2, r2, #3
 8001cd4:	4019      	ands	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2103      	movs	r1, #3
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f af2e 	bls.w	8001b88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40021400 	.word	0x40021400
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40021c00 	.word	0x40021c00
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e10f      	b.n	8001ff6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f00a fb7a 	bl	800c4e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e08:	f002 fcce 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a7b      	ldr	r2, [pc, #492]	; (8002000 <HAL_I2C_Init+0x23c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d807      	bhi.n	8001e28 <HAL_I2C_Init+0x64>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <HAL_I2C_Init+0x240>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e006      	b.n	8001e36 <HAL_I2C_Init+0x72>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_I2C_Init+0x244>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0db      	b.n	8001ff6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_I2C_Init+0x248>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a64      	ldr	r2, [pc, #400]	; (8002000 <HAL_I2C_Init+0x23c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d802      	bhi.n	8001e78 <HAL_I2C_Init+0xb4>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	e009      	b.n	8001e8c <HAL_I2C_Init+0xc8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	4a63      	ldr	r2, [pc, #396]	; (8002010 <HAL_I2C_Init+0x24c>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4956      	ldr	r1, [pc, #344]	; (8002000 <HAL_I2C_Init+0x23c>)
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d80d      	bhi.n	8001ec8 <HAL_I2C_Init+0x104>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	bf38      	it	cc
 8001ec4:	2304      	movcc	r3, #4
 8001ec6:	e04f      	b.n	8001f68 <HAL_I2C_Init+0x1a4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d111      	bne.n	8001ef4 <HAL_I2C_Init+0x130>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1e58      	subs	r0, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	440b      	add	r3, r1
 8001ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e012      	b.n	8001f1a <HAL_I2C_Init+0x156>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	0099      	lsls	r1, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Init+0x15e>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e022      	b.n	8001f68 <HAL_I2C_Init+0x1a4>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10e      	bne.n	8001f48 <HAL_I2C_Init+0x184>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1e58      	subs	r0, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	440b      	add	r3, r1
 8001f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f46:	e00f      	b.n	8001f68 <HAL_I2C_Init+0x1a4>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	0099      	lsls	r1, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	6809      	ldr	r1, [r1, #0]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6911      	ldr	r1, [r2, #16]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68d2      	ldr	r2, [r2, #12]
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	000186a0 	.word	0x000186a0
 8002004:	001e847f 	.word	0x001e847f
 8002008:	003d08ff 	.word	0x003d08ff
 800200c:	431bde83 	.word	0x431bde83
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e021      	b.n	800206a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2224      	movs	r2, #36	; 0x24
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f00a fa98 	bl	800c574 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	461a      	mov	r2, r3
 8002080:	460b      	mov	r3, r1
 8002082:	817b      	strh	r3, [r7, #10]
 8002084:	4613      	mov	r3, r2
 8002086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7fe fefe 	bl	8000e88 <HAL_GetTick>
 800208c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	f040 80e0 	bne.w	800225c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	4970      	ldr	r1, [pc, #448]	; (8002268 <HAL_I2C_Master_Transmit+0x1f4>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fc34 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0d3      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2C_Master_Transmit+0x50>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0cc      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d007      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2221      	movs	r2, #33	; 0x21
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2210      	movs	r2, #16
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	893a      	ldrh	r2, [r7, #8]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a50      	ldr	r2, [pc, #320]	; (800226c <HAL_I2C_Master_Transmit+0x1f8>)
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	6a3a      	ldr	r2, [r7, #32]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fac2 	bl	80026bc <I2C_MasterRequestWrite>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e08d      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002158:	e066      	b.n	8002228 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fcae 	bl	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b04      	cmp	r3, #4
 8002170:	d107      	bne.n	8002182 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d11b      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x188>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d017      	beq.n	80021fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	6a39      	ldr	r1, [r7, #32]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fc9e 	bl	8002b42 <I2C_WaitOnBTFFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b04      	cmp	r3, #4
 8002212:	d107      	bne.n	8002224 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e01a      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d194      	bne.n	800215a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	00100002 	.word	0x00100002
 800226c:	ffff0000 	.word	0xffff0000

08002270 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	461a      	mov	r2, r3
 800227c:	460b      	mov	r3, r1
 800227e:	817b      	strh	r3, [r7, #10]
 8002280:	4613      	mov	r3, r2
 8002282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7fe fe00 	bl	8000e88 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b20      	cmp	r3, #32
 8002294:	f040 820b 	bne.w	80026ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2319      	movs	r3, #25
 800229e:	2201      	movs	r2, #1
 80022a0:	497c      	ldr	r1, [pc, #496]	; (8002494 <HAL_I2C_Master_Receive+0x224>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fb36 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
 80022b0:	e1fe      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_Master_Receive+0x50>
 80022bc:	2302      	movs	r3, #2
 80022be:	e1f7      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d007      	beq.n	80022e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2222      	movs	r2, #34	; 0x22
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2210      	movs	r2, #16
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	893a      	ldrh	r2, [r7, #8]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a5c      	ldr	r2, [pc, #368]	; (8002498 <HAL_I2C_Master_Receive+0x228>)
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002328:	8979      	ldrh	r1, [r7, #10]
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fa3a 	bl	80027a8 <I2C_MasterRequestRead>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1b8      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d113      	bne.n	800236e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e18c      	b.n	8002688 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	2b01      	cmp	r3, #1
 8002374:	d11b      	bne.n	80023ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e16c      	b.n	8002688 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d11b      	bne.n	80023ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	e14c      	b.n	8002688 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002414:	e138      	b.n	8002688 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	2b03      	cmp	r3, #3
 800241c:	f200 80f1 	bhi.w	8002602 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	2b01      	cmp	r3, #1
 8002426:	d123      	bne.n	8002470 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fbc9 	bl	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e139      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800246e:	e10b      	b.n	8002688 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	2b02      	cmp	r3, #2
 8002476:	d14e      	bne.n	8002516 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2200      	movs	r2, #0
 8002480:	4906      	ldr	r1, [pc, #24]	; (800249c <HAL_I2C_Master_Receive+0x22c>)
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fa46 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e10e      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
 8002492:	bf00      	nop
 8002494:	00100002 	.word	0x00100002
 8002498:	ffff0000 	.word	0xffff0000
 800249c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002514:	e0b8      	b.n	8002688 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	2200      	movs	r2, #0
 800251e:	4966      	ldr	r1, [pc, #408]	; (80026b8 <HAL_I2C_Master_Receive+0x448>)
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f9f7 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0bf      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2200      	movs	r2, #0
 800257a:	494f      	ldr	r1, [pc, #316]	; (80026b8 <HAL_I2C_Master_Receive+0x448>)
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f9c9 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e091      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002600:	e042      	b.n	8002688 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fadc 	bl	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e04c      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b04      	cmp	r3, #4
 8002654:	d118      	bne.n	8002688 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	2b00      	cmp	r3, #0
 800268e:	f47f aec2 	bne.w	8002416 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	00010004 	.word	0x00010004

080026bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d006      	beq.n	80026e6 <I2C_MasterRequestWrite+0x2a>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <I2C_MasterRequestWrite+0x2a>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00b      	b.n	8002710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	2b12      	cmp	r3, #18
 80026fe:	d107      	bne.n	8002710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f8f9 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e035      	b.n	8002798 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002734:	d108      	bne.n	8002748 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	e01b      	b.n	8002780 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002748:	897b      	ldrh	r3, [r7, #10]
 800274a:	11db      	asrs	r3, r3, #7
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0306 	and.w	r3, r3, #6
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f063 030f 	orn	r3, r3, #15
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	490e      	ldr	r1, [pc, #56]	; (80027a0 <I2C_MasterRequestWrite+0xe4>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f92b 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e010      	b.n	8002798 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <I2C_MasterRequestWrite+0xe8>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f91b 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	00010008 	.word	0x00010008
 80027a4:	00010002 	.word	0x00010002

080027a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	460b      	mov	r3, r1
 80027b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d006      	beq.n	80027e2 <I2C_MasterRequestRead+0x3a>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d003      	beq.n	80027e2 <I2C_MasterRequestRead+0x3a>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027e0:	d108      	bne.n	80027f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e00b      	b.n	800280c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	2b11      	cmp	r3, #17
 80027fa:	d107      	bne.n	800280c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f87b 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e06d      	b.n	8002904 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002830:	d108      	bne.n	8002844 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	611a      	str	r2, [r3, #16]
 8002842:	e053      	b.n	80028ec <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002844:	897b      	ldrh	r3, [r7, #10]
 8002846:	11db      	asrs	r3, r3, #7
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0306 	and.w	r3, r3, #6
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f063 030f 	orn	r3, r3, #15
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	492a      	ldr	r1, [pc, #168]	; (800290c <I2C_MasterRequestRead+0x164>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f8ad 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e048      	b.n	8002904 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002872:	897b      	ldrh	r3, [r7, #10]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4923      	ldr	r1, [pc, #140]	; (8002910 <I2C_MasterRequestRead+0x168>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f89d 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e038      	b.n	8002904 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f825 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e017      	b.n	8002904 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	11db      	asrs	r3, r3, #7
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0306 	and.w	r3, r3, #6
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f063 030e 	orn	r3, r3, #14
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <I2C_MasterRequestRead+0x168>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f865 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	00010008 	.word	0x00010008
 8002910:	00010002 	.word	0x00010002

08002914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	e025      	b.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d021      	beq.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7fe faab 	bl	8000e88 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d116      	bne.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f043 0220 	orr.w	r2, r3, #32
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e023      	b.n	80029ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10d      	bne.n	8002998 <I2C_WaitOnFlagUntilTimeout+0x84>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	e00c      	b.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d0b6      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d0:	e051      	b.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e0:	d123      	bne.n	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0204 	orr.w	r2, r3, #4
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e046      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d021      	beq.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe fa29 	bl	8000e88 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d116      	bne.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e020      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10c      	bne.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e00b      	b.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d18d      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002acc:	e02d      	b.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f8ce 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e02d      	b.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d021      	beq.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe f9cf 	bl	8000e88 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d116      	bne.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0220 	orr.w	r2, r3, #32
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e007      	b.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d1ca      	bne.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4e:	e02d      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f88d 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e02d      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d021      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fe f98e 	bl	8000e88 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d1ca      	bne.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd0:	e042      	b.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d119      	bne.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0210 	mvn.w	r2, #16
 8002be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e029      	b.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c14:	f7fe f938 	bl	8000e88 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d1b5      	bne.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c86:	d11b      	bne.n	8002cc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd0:	b08f      	sub	sp, #60	; 0x3c
 8002cd2:	af0a      	add	r7, sp, #40	; 0x28
 8002cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e10f      	b.n	8002f00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f009 ff2c 	bl	800cb58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2203      	movs	r2, #3
 8002d04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fea9 	bl	8006a76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	687e      	ldr	r6, [r7, #4]
 8002d2c:	466d      	mov	r5, sp
 8002d2e:	f106 0410 	add.w	r4, r6, #16
 8002d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d42:	1d33      	adds	r3, r6, #4
 8002d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d46:	6838      	ldr	r0, [r7, #0]
 8002d48:	f003 fd80 	bl	800684c <USB_CoreInit>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0d0      	b.n	8002f00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fe97 	bl	8006a98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e04a      	b.n	8002e06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	333d      	adds	r3, #61	; 0x3d
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	333c      	adds	r3, #60	; 0x3c
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	b298      	uxth	r0, r3
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3342      	adds	r3, #66	; 0x42
 8002dac:	4602      	mov	r2, r0
 8002dae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333f      	adds	r3, #63	; 0x3f
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3344      	adds	r3, #68	; 0x44
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3348      	adds	r3, #72	; 0x48
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3350      	adds	r3, #80	; 0x50
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	3301      	adds	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3af      	bcc.n	8002d70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e044      	b.n	8002ea0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3b5      	bcc.n	8002e16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	687e      	ldr	r6, [r7, #4]
 8002eb2:	466d      	mov	r5, sp
 8002eb4:	f106 0410 	add.w	r4, r6, #16
 8002eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec8:	1d33      	adds	r3, r6, #4
 8002eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f003 fe0d 	bl	8006aec <USB_DevInit>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e00d      	b.n	8002f00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fe02 	bl	8007b02 <USB_DevDisconnect>

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_PCD_Start+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e020      	b.n	8002f66 <HAL_PCD_Start+0x5e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d109      	bne.n	8002f48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d005      	beq.n	8002f48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 fdc0 	bl	8007ad2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fd7c 	bl	8006a54 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f6e:	b590      	push	{r4, r7, lr}
 8002f70:	b08d      	sub	sp, #52	; 0x34
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 fe67 	bl	8007c58 <USB_GetMode>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 838e 	bne.w	80036ae <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f004 fdcb 	bl	8007b32 <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8384 	beq.w	80036ac <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 fdc2 	bl	8007b32 <USB_ReadInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d107      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f002 0202 	and.w	r2, r2, #2
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fdb0 	bl	8007b32 <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fdc:	d17b      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fdb6 	bl	8007b58 <USB_ReadDevAllOutEpInterrupt>
 8002fec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fee:	e06f      	b.n	80030d0 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d064      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f004 fddb 	bl	8007bc0 <USB_ReadDevOutEPInterrupt>
 800300a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	461a      	mov	r2, r3
 8003024:	2301      	movs	r3, #1
 8003026:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fe0e 	bl	8003c4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800303a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 ff0d 	bl	8003e5c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	2308      	movs	r3, #8
 8003052:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	2310      	movs	r3, #16
 800306e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d108      	bne.n	8003094 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800308c:	461a      	mov	r2, r3
 800308e:	2101      	movs	r1, #1
 8003090:	f004 fe26 	bl	8007ce0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	2320      	movs	r3, #32
 80030a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	3301      	adds	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d18c      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 fd29 	bl	8007b32 <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ea:	f040 80c4 	bne.w	8003276 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f004 fd4a 	bl	8007b8c <USB_ReadDevAllInEpInterrupt>
 80030f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030fe:	e0b6      	b.n	800326e <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80ab 	beq.w	8003262 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f004 fd70 	bl	8007bfc <USB_ReadDevInEPInterrupt>
 800311c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05b      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	2201      	movs	r2, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	43db      	mvns	r3, r3
 8003142:	69f9      	ldr	r1, [r7, #28]
 8003144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003148:	4013      	ands	r3, r2
 800314a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	461a      	mov	r2, r3
 800315a:	2301      	movs	r3, #1
 800315c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d11b      	bne.n	800319e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3348      	adds	r3, #72	; 0x48
 8003176:	6819      	ldr	r1, [r3, #0]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4403      	add	r3, r0
 8003186:	3344      	adds	r3, #68	; 0x44
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4419      	add	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4403      	add	r3, r0
 800319a:	3348      	adds	r3, #72	; 0x48
 800319c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f009 fd58 	bl	800cc5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d116      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d113      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x272>
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3350      	adds	r3, #80	; 0x50
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031d8:	461a      	mov	r2, r3
 80031da:	2101      	movs	r1, #1
 80031dc:	f004 fd80 	bl	8007ce0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f6:	461a      	mov	r2, r3
 80031f8:	2308      	movs	r3, #8
 80031fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	461a      	mov	r2, r3
 8003214:	2310      	movs	r3, #16
 8003216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322e:	461a      	mov	r2, r3
 8003230:	2340      	movs	r3, #64	; 0x40
 8003232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324a:	461a      	mov	r2, r3
 800324c:	2302      	movs	r3, #2
 800324e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800325a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fc67 	bl	8003b30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af45 	bne.w	8003100 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f004 fc59 	bl	8007b32 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800328a:	d122      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d108      	bne.n	80032bc <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032b2:	2100      	movs	r1, #0
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fe89 	bl	8003fcc <HAL_PCDEx_LPM_Callback>
 80032ba:	e002      	b.n	80032c2 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f009 fd43 	bl	800cd48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fc2b 	bl	8007b32 <USB_ReadInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e6:	d112      	bne.n	800330e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d102      	bne.n	80032fe <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f009 fcff 	bl	800ccfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800330c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 fc0d 	bl	8007b32 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	f040 80a7 	bne.w	8003474 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2110      	movs	r1, #16
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fd45 	bl	8006dd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334a:	e036      	b.n	80033ba <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003358:	461a      	mov	r2, r3
 800335a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800335e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003370:	0151      	lsls	r1, r2, #5
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	440a      	add	r2, r1
 8003376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800337a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800337e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003392:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	3301      	adds	r3, #1
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d3c3      	bcc.n	800334c <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d016      	beq.n	800340e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f0:	f043 030b 	orr.w	r3, r3, #11
 80033f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003406:	f043 030b 	orr.w	r3, r3, #11
 800340a:	6453      	str	r3, [r2, #68]	; 0x44
 800340c:	e015      	b.n	800343a <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003420:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003424:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003434:	f043 030b 	orr.w	r3, r3, #11
 8003438:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003448:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800344c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345e:	461a      	mov	r2, r3
 8003460:	f004 fc3e 	bl	8007ce0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f004 fb5a 	bl	8007b32 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003488:	d124      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f004 fbf0 	bl	8007c74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f003 fcfa 	bl	8006e92 <USB_GetDevSpeed>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681c      	ldr	r4, [r3, #0]
 80034aa:	f001 f971 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80034ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	4620      	mov	r0, r4
 80034ba:	f003 fa29 	bl	8006910 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f009 fbf3 	bl	800ccaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 fb2a 	bl	8007b32 <USB_ReadInterrupts>
 80034de:	4603      	mov	r3, r0
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d161      	bne.n	80035ac <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0210 	bic.w	r2, r2, #16
 80034f6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	0c5b      	lsrs	r3, r3, #17
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2b02      	cmp	r3, #2
 8003522:	d124      	bne.n	800356e <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d035      	beq.n	800359c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800353a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	6a38      	ldr	r0, [r7, #32]
 8003544:	f004 f9a2 	bl	800788c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003554:	441a      	add	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003566:	441a      	add	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	619a      	str	r2, [r3, #24]
 800356c:	e016      	b.n	800359c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	0c5b      	lsrs	r3, r3, #17
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2b06      	cmp	r3, #6
 8003578:	d110      	bne.n	800359c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003580:	2208      	movs	r2, #8
 8003582:	4619      	mov	r1, r3
 8003584:	6a38      	ldr	r0, [r7, #32]
 8003586:	f004 f981 	bl	800788c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003596:	441a      	add	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0210 	orr.w	r2, r2, #16
 80035aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f004 fabe 	bl	8007b32 <USB_ReadInterrupts>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d10a      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f009 fb64 	bl	800cc8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f002 0208 	and.w	r2, r2, #8
 80035d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 faa9 	bl	8007b32 <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ea:	d10f      	bne.n	800360c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f009 fbc6 	bl	800cd88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800360a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f004 fa8e 	bl	8007b32 <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003620:	d10f      	bne.n	8003642 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f009 fb99 	bl	800cd64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fa73 	bl	8007b32 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003656:	d10a      	bne.n	800366e <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f009 fba7 	bl	800cdac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800366c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f004 fa5d 	bl	8007b32 <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d115      	bne.n	80036ae <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f009 fb97 	bl	800cdc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e000      	b.n	80036ae <HAL_PCD_IRQHandler+0x740>
      return;
 80036ac:	bf00      	nop
    }
  }
}
 80036ae:	3734      	adds	r7, #52	; 0x34
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}

080036b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_PCD_SetAddress+0x1a>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e013      	b.n	80036f6 <HAL_PCD_SetAddress+0x42>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 f9cd 	bl	8007a86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	4608      	mov	r0, r1
 8003708:	4611      	mov	r1, r2
 800370a:	461a      	mov	r2, r3
 800370c:	4603      	mov	r3, r0
 800370e:	70fb      	strb	r3, [r7, #3]
 8003710:	460b      	mov	r3, r1
 8003712:	803b      	strh	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800371c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	da0f      	bge.n	8003744 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 020f 	and.w	r2, r3, #15
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	3338      	adds	r3, #56	; 0x38
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	3304      	adds	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	705a      	strb	r2, [r3, #1]
 8003742:	e00f      	b.n	8003764 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003770:	883a      	ldrh	r2, [r7, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	78ba      	ldrb	r2, [r7, #2]
 800377a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	785b      	ldrb	r3, [r3, #1]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800378e:	78bb      	ldrb	r3, [r7, #2]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d102      	bne.n	800379a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_PCD_EP_Open+0xaa>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e00e      	b.n	80037c6 <HAL_PCD_EP_Open+0xc8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fb90 	bl	8006edc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037c4:	7afb      	ldrb	r3, [r7, #11]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da0f      	bge.n	8003802 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	3338      	adds	r3, #56	; 0x38
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	705a      	strb	r2, [r3, #1]
 8003800:	e00f      	b.n	8003822 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_PCD_EP_Close+0x6e>
 8003838:	2302      	movs	r3, #2
 800383a:	e00e      	b.n	800385a <HAL_PCD_EP_Close+0x8c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68f9      	ldr	r1, [r7, #12]
 800384a:	4618      	mov	r0, r3
 800384c:	f003 fbce 	bl	8006fec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	460b      	mov	r3, r1
 8003870:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	f003 020f 	and.w	r2, r3, #15
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	3304      	adds	r3, #4
 800388a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d102      	bne.n	80038be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	6979      	ldr	r1, [r7, #20]
 80038d6:	f003 fe51 	bl	800757c <USB_EP0StartXfer>
 80038da:	e008      	b.n	80038ee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6979      	ldr	r1, [r7, #20]
 80038ea:	f003 fc03 	bl	80070f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	f003 020f 	and.w	r2, r3, #15
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	460b      	mov	r3, r1
 8003936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003938:	7afb      	ldrb	r3, [r7, #11]
 800393a:	f003 020f 	and.w	r2, r3, #15
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	3338      	adds	r3, #56	; 0x38
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	3304      	adds	r3, #4
 800394e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2201      	movs	r2, #1
 8003966:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	b2da      	uxtb	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d102      	bne.n	8003982 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003982:	7afb      	ldrb	r3, [r7, #11]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6979      	ldr	r1, [r7, #20]
 800399a:	f003 fdef 	bl	800757c <USB_EP0StartXfer>
 800399e:	e008      	b.n	80039b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	6979      	ldr	r1, [r7, #20]
 80039ae:	f003 fba1 	bl	80070f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d901      	bls.n	80039da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e050      	b.n	8003a7c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da0f      	bge.n	8003a02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 020f 	and.w	r2, r3, #15
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	3338      	adds	r3, #56	; 0x38
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	3304      	adds	r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	705a      	strb	r2, [r3, #1]
 8003a00:	e00d      	b.n	8003a1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_PCD_EP_SetStall+0x82>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e01e      	b.n	8003a7c <HAL_PCD_EP_SetStall+0xc0>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f003 ff46 	bl	80078de <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	b2d9      	uxtb	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f004 f937 	bl	8007ce0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d901      	bls.n	8003aa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e042      	b.n	8003b28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da0f      	bge.n	8003aca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	3338      	adds	r3, #56	; 0x38
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	705a      	strb	r2, [r3, #1]
 8003ac8:	e00f      	b.n	8003aea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_PCD_EP_ClrStall+0x86>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e00e      	b.n	8003b28 <HAL_PCD_EP_ClrStall+0xa4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68f9      	ldr	r1, [r7, #12]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 ff4e 	bl	80079ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	3338      	adds	r3, #56	; 0x38
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d901      	bls.n	8003b68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e06c      	b.n	8003c42 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d902      	bls.n	8003b84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3303      	adds	r3, #3
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b8c:	e02b      	b.n	8003be6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d902      	bls.n	8003baa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3303      	adds	r3, #3
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6978      	ldr	r0, [r7, #20]
 8003bca:	f003 fe2a 	bl	8007822 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	441a      	add	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	441a      	add	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d809      	bhi.n	8003c10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d203      	bcs.n	8003c10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1be      	bne.n	8003b8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d811      	bhi.n	8003c40 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	2201      	movs	r2, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	6939      	ldr	r1, [r7, #16]
 8003c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	333c      	adds	r3, #60	; 0x3c
 8003c64:	3304      	adds	r3, #4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	f040 80b3 	bne.w	8003dea <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a70      	ldr	r2, [pc, #448]	; (8003e54 <PCD_EP_OutXfrComplete_int+0x208>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d90e      	bls.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	461a      	mov	r2, r3
 8003cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f008 ffa3 	bl	800cc00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f004 f80a 	bl	8007ce0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2308      	movs	r3, #8
 8003cdc:	6093      	str	r3, [r2, #8]
 8003cde:	e0b3      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	6093      	str	r3, [r2, #8]
 8003cfc:	e0a4      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 809f 	bne.w	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a51      	ldr	r2, [pc, #324]	; (8003e54 <PCD_EP_OutXfrComplete_int+0x208>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d90f      	bls.n	8003d32 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	e08a      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d44:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	0159      	lsls	r1, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d58:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4403      	add	r3, r0
 8003d68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d6c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4403      	add	r3, r0
 8003d90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4419      	add	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4403      	add	r3, r0
 8003da6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003daa:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f008 ff36 	bl	800cc24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d144      	bne.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d138      	bne.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003de0:	461a      	mov	r2, r3
 8003de2:	2101      	movs	r1, #1
 8003de4:	f003 ff7c 	bl	8007ce0 <USB_EP0_OutStart>
 8003de8:	e02e      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d124      	bne.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	e01a      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f008 fef5 	bl	800cc24 <HAL_PCD_DataOutStageCallback>
 8003e3a:	e005      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f008 feee 	bl	800cc24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	4f54300a 	.word	0x4f54300a
 8003e58:	4f54310a 	.word	0x4f54310a

08003e5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	333c      	adds	r3, #60	; 0x3c
 8003e74:	3304      	adds	r3, #4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d113      	bne.n	8003eba <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d922      	bls.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01d      	beq.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	6093      	str	r3, [r2, #8]
 8003eb8:	e012      	b.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10e      	bne.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f008 fe8d 	bl	800cc00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d90c      	bls.n	8003f08 <PCD_EP_OutSetupPacket_int+0xac>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d108      	bne.n	8003f08 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f00:	461a      	mov	r2, r3
 8003f02:	2101      	movs	r1, #1
 8003f04:	f003 feec 	bl	8007ce0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	4f54300a 	.word	0x4f54300a
 8003f18:	4f54310a 	.word	0x4f54310a

08003f1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d107      	bne.n	8003f4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f3a:	883b      	ldrh	r3, [r7, #0]
 8003f3c:	0419      	lsls	r1, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
 8003f48:	e028      	b.n	8003f9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	4413      	add	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e00d      	b.n	8003f7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	3340      	adds	r3, #64	; 0x40
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4413      	add	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	3301      	adds	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3ec      	bcc.n	8003f5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f84:	883b      	ldrh	r3, [r7, #0]
 8003f86:	0418      	lsls	r0, r3, #16
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	4302      	orrs	r2, r0
 8003f94:	3340      	adds	r3, #64	; 0x40
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e22d      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d075      	beq.n	80040ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004002:	4ba3      	ldr	r3, [pc, #652]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b04      	cmp	r3, #4
 800400c:	d00c      	beq.n	8004028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400e:	4ba0      	ldr	r3, [pc, #640]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004016:	2b08      	cmp	r3, #8
 8004018:	d112      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401a:	4b9d      	ldr	r3, [pc, #628]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004026:	d10b      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	4b99      	ldr	r3, [pc, #612]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d05b      	beq.n	80040ec <HAL_RCC_OscConfig+0x108>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d157      	bne.n	80040ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e208      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x74>
 800404a:	4b91      	ldr	r3, [pc, #580]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a90      	ldr	r2, [pc, #576]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0xb0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x98>
 8004062:	4b8b      	ldr	r3, [pc, #556]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a8a      	ldr	r2, [pc, #552]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b88      	ldr	r3, [pc, #544]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a87      	ldr	r2, [pc, #540]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0xb0>
 800407c:	4b84      	ldr	r3, [pc, #528]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a83      	ldr	r2, [pc, #524]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b81      	ldr	r3, [pc, #516]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a80      	ldr	r2, [pc, #512]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fc fef4 	bl	8000e88 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fc fef0 	bl	8000e88 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e1cd      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0xc0>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fc fee0 	bl	8000e88 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fc fedc 	bl	8000e88 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1b9      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	4b6c      	ldr	r3, [pc, #432]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0xe8>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d063      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040fa:	4b65      	ldr	r3, [pc, #404]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004106:	4b62      	ldr	r3, [pc, #392]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d11c      	bne.n	800414c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004112:	4b5f      	ldr	r3, [pc, #380]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	4b5c      	ldr	r3, [pc, #368]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_RCC_OscConfig+0x152>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e18d      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b56      	ldr	r3, [pc, #344]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4952      	ldr	r1, [pc, #328]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	e03a      	b.n	80041c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <HAL_RCC_OscConfig+0x2b0>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fc fe95 	bl	8000e88 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004162:	f7fc fe91 	bl	8000e88 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e16e      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	4b46      	ldr	r3, [pc, #280]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b43      	ldr	r3, [pc, #268]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4940      	ldr	r1, [pc, #256]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
 8004194:	e015      	b.n	80041c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <HAL_RCC_OscConfig+0x2b0>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fc fe74 	bl	8000e88 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a4:	f7fc fe70 	bl	8000e88 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e14d      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d030      	beq.n	8004230 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d6:	4b30      	ldr	r3, [pc, #192]	; (8004298 <HAL_RCC_OscConfig+0x2b4>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fc fe54 	bl	8000e88 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e4:	f7fc fe50 	bl	8000e88 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e12d      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	4b26      	ldr	r3, [pc, #152]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x200>
 8004202:	e015      	b.n	8004230 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCC_OscConfig+0x2b4>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420a:	f7fc fe3d 	bl	8000e88 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004212:	f7fc fe39 	bl	8000e88 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e116      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80a0 	beq.w	800437e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004242:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_OscConfig+0x2b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d121      	bne.n	80042be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_RCC_OscConfig+0x2b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a07      	ldr	r2, [pc, #28]	; (800429c <HAL_RCC_OscConfig+0x2b8>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fc fdff 	bl	8000e88 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	e011      	b.n	80042b2 <HAL_RCC_OscConfig+0x2ce>
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	42470000 	.word	0x42470000
 8004298:	42470e80 	.word	0x42470e80
 800429c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fc fdf2 	bl	8000e88 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e0cf      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b2:	4b6a      	ldr	r3, [pc, #424]	; (800445c <HAL_RCC_OscConfig+0x478>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d106      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2f0>
 80042c6:	4b66      	ldr	r3, [pc, #408]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a65      	ldr	r2, [pc, #404]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
 80042d2:	e01c      	b.n	800430e <HAL_RCC_OscConfig+0x32a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b05      	cmp	r3, #5
 80042da:	d10c      	bne.n	80042f6 <HAL_RCC_OscConfig+0x312>
 80042dc:	4b60      	ldr	r3, [pc, #384]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a5f      	ldr	r2, [pc, #380]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042e2:	f043 0304 	orr.w	r3, r3, #4
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
 80042f4:	e00b      	b.n	800430e <HAL_RCC_OscConfig+0x32a>
 80042f6:	4b5a      	ldr	r3, [pc, #360]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a59      	ldr	r2, [pc, #356]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	4b57      	ldr	r3, [pc, #348]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a56      	ldr	r2, [pc, #344]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d015      	beq.n	8004342 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fc fdb7 	bl	8000e88 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fc fdb3 	bl	8000e88 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	; 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e08e      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004334:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ee      	beq.n	800431e <HAL_RCC_OscConfig+0x33a>
 8004340:	e014      	b.n	800436c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fc fda1 	bl	8000e88 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fc fd9d 	bl	8000e88 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e078      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004360:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ee      	bne.n	800434a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004372:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d064      	beq.n	8004450 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b08      	cmp	r3, #8
 8004390:	d05c      	beq.n	800444c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d141      	bne.n	800441e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <HAL_RCC_OscConfig+0x480>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fc fd72 	bl	8000e88 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fc fd6e 	bl	8000e88 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e04b      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	4b29      	ldr	r3, [pc, #164]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	3b01      	subs	r3, #1
 80043e0:	041b      	lsls	r3, r3, #16
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	491d      	ldr	r1, [pc, #116]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_RCC_OscConfig+0x480>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f6:	f7fc fd47 	bl	8000e88 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fe:	f7fc fd43 	bl	8000e88 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e020      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004410:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x41a>
 800441c:	e018      	b.n	8004450 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_RCC_OscConfig+0x480>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fc fd30 	bl	8000e88 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fc fd2c 	bl	8000e88 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e009      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_OscConfig+0x47c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x448>
 800444a:	e001      	b.n	8004450 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000
 8004460:	40023800 	.word	0x40023800
 8004464:	42470060 	.word	0x42470060

08004468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0ca      	b.n	8004612 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b67      	ldr	r3, [pc, #412]	; (800461c <HAL_RCC_ClockConfig+0x1b4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d90c      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b64      	ldr	r3, [pc, #400]	; (800461c <HAL_RCC_ClockConfig+0x1b4>)
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b62      	ldr	r3, [pc, #392]	; (800461c <HAL_RCC_ClockConfig+0x1b4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b6      	b.n	8004612 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a57      	ldr	r2, [pc, #348]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d4:	4b52      	ldr	r3, [pc, #328]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a51      	ldr	r2, [pc, #324]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	494c      	ldr	r1, [pc, #304]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d044      	beq.n	8004588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b46      	ldr	r3, [pc, #280]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d119      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07d      	b.n	8004612 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d003      	beq.n	8004526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	2b03      	cmp	r3, #3
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e06d      	b.n	8004612 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e065      	b.n	8004612 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4933      	ldr	r1, [pc, #204]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004558:	f7fc fc96 	bl	8000e88 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	e00a      	b.n	8004576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fc fc92 	bl	8000e88 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04d      	b.n	8004612 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 020c 	and.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	429a      	cmp	r2, r3
 8004586:	d1eb      	bne.n	8004560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_RCC_ClockConfig+0x1b4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d20c      	bcs.n	80045b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCC_ClockConfig+0x1b4>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCC_ClockConfig+0x1b4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e030      	b.n	8004612 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4915      	ldr	r1, [pc, #84]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	490d      	ldr	r1, [pc, #52]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ee:	f000 f81d 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045f2:	4601      	mov	r1, r0
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	5cd3      	ldrb	r3, [r2, r3]
 8004602:	fa21 f303 	lsr.w	r3, r1, r3
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800460a:	2000      	movs	r0, #0
 800460c:	f7fc fbf8 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023c00 	.word	0x40023c00
 8004620:	40023800 	.word	0x40023800
 8004624:	0800ddb8 	.word	0x0800ddb8
 8004628:	20000118 	.word	0x20000118

0800462c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004642:	4b50      	ldr	r3, [pc, #320]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d007      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x32>
 800464e:	2b08      	cmp	r3, #8
 8004650:	d008      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x38>
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 808d 	bne.w	8004772 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <HAL_RCC_GetSysClockFreq+0x15c>)
 800465a:	60bb      	str	r3, [r7, #8]
       break;
 800465c:	e08c      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465e:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCC_GetSysClockFreq+0x160>)
 8004660:	60bb      	str	r3, [r7, #8]
      break;
 8004662:	e089      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004664:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466e:	4b45      	ldr	r3, [pc, #276]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d023      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b42      	ldr	r3, [pc, #264]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea03 0501 	and.w	r5, r3, r1
 8004690:	ea04 0602 	and.w	r6, r4, r2
 8004694:	4a3d      	ldr	r2, [pc, #244]	; (800478c <HAL_RCC_GetSysClockFreq+0x160>)
 8004696:	fb02 f106 	mul.w	r1, r2, r6
 800469a:	2200      	movs	r2, #0
 800469c:	fb02 f205 	mul.w	r2, r2, r5
 80046a0:	440a      	add	r2, r1
 80046a2:	493a      	ldr	r1, [pc, #232]	; (800478c <HAL_RCC_GetSysClockFreq+0x160>)
 80046a4:	fba5 0101 	umull	r0, r1, r5, r1
 80046a8:	1853      	adds	r3, r2, r1
 80046aa:	4619      	mov	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4623      	mov	r3, r4
 80046b6:	f7fc fa01 	bl	8000abc <__aeabi_uldivmod>
 80046ba:	4603      	mov	r3, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e049      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	ea03 0501 	and.w	r5, r3, r1
 80046d8:	ea04 0602 	and.w	r6, r4, r2
 80046dc:	4629      	mov	r1, r5
 80046de:	4632      	mov	r2, r6
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	f04f 0400 	mov.w	r4, #0
 80046e8:	0154      	lsls	r4, r2, #5
 80046ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046ee:	014b      	lsls	r3, r1, #5
 80046f0:	4619      	mov	r1, r3
 80046f2:	4622      	mov	r2, r4
 80046f4:	1b49      	subs	r1, r1, r5
 80046f6:	eb62 0206 	sbc.w	r2, r2, r6
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	f04f 0400 	mov.w	r4, #0
 8004702:	0194      	lsls	r4, r2, #6
 8004704:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004708:	018b      	lsls	r3, r1, #6
 800470a:	1a5b      	subs	r3, r3, r1
 800470c:	eb64 0402 	sbc.w	r4, r4, r2
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	00e2      	lsls	r2, r4, #3
 800471a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800471e:	00d9      	lsls	r1, r3, #3
 8004720:	460b      	mov	r3, r1
 8004722:	4614      	mov	r4, r2
 8004724:	195b      	adds	r3, r3, r5
 8004726:	eb44 0406 	adc.w	r4, r4, r6
 800472a:	f04f 0100 	mov.w	r1, #0
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	02a2      	lsls	r2, r4, #10
 8004734:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004738:	0299      	lsls	r1, r3, #10
 800473a:	460b      	mov	r3, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4618      	mov	r0, r3
 8004740:	4621      	mov	r1, r4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f04f 0400 	mov.w	r4, #0
 8004748:	461a      	mov	r2, r3
 800474a:	4623      	mov	r3, r4
 800474c:	f7fc f9b6 	bl	8000abc <__aeabi_uldivmod>
 8004750:	4603      	mov	r3, r0
 8004752:	460c      	mov	r4, r1
 8004754:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	3301      	adds	r3, #1
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	60bb      	str	r3, [r7, #8]
      break;
 8004770:	e002      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004774:	60bb      	str	r3, [r7, #8]
      break;
 8004776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004778:	68bb      	ldr	r3, [r7, #8]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	00f42400 	.word	0x00f42400
 800478c:	00b71b00 	.word	0x00b71b00

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000118 	.word	0x20000118

080047a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047ac:	f7ff fff0 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047b0:	4601      	mov	r1, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4a03      	ldr	r2, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800ddc8 	.word	0x0800ddc8

080047d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e01d      	b.n	800481e <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f007 fedb 	bl	800c5b0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2203      	movs	r2, #3
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f810 	bl	8004828 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004828:	b5b0      	push	{r4, r5, r7, lr}
 800482a:	b08e      	sub	sp, #56	; 0x38
 800482c:	af04      	add	r7, sp, #16
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004848:	2376      	movs	r3, #118	; 0x76
 800484a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681d      	ldr	r5, [r3, #0]
 8004850:	466c      	mov	r4, sp
 8004852:	f107 0318 	add.w	r3, r7, #24
 8004856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800485a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800485e:	f107 030c 	add.w	r3, r7, #12
 8004862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004864:	4628      	mov	r0, r5
 8004866:	f001 fa92 	bl	8005d8e <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800486a:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <HAL_SD_InitCard+0xb4>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f001 fad3 	bl	8005e20 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <HAL_SD_InitCard+0xb4>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8004880:	2002      	movs	r0, #2
 8004882:	f7fc fb0d 	bl	8000ea0 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fffe 	bl	8005888 <SD_PowerON>
 800488c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00b      	beq.n	80048ac <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e013      	b.n	80048d4 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 ff22 	bl	80056f6 <SD_InitCard>
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	; 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bdb0      	pop	{r4, r5, r7, pc}
 80048dc:	422580a0 	.word	0x422580a0

080048e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0ad      	b.n	8004a64 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	f040 80a6 	bne.w	8004a62 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	429a      	cmp	r2, r3
 8004928:	d907      	bls.n	800493a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e094      	b.n	8004a64 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2203      	movs	r2, #3
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	4a42      	ldr	r2, [pc, #264]	; (8004a6c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	4a41      	ldr	r2, [pc, #260]	; (8004a70 <HAL_SD_ReadBlocks_DMA+0x190>)
 800496c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	2200      	movs	r2, #0
 8004974:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3380      	adds	r3, #128	; 0x80
 8004980:	4619      	mov	r1, r3
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	025b      	lsls	r3, r3, #9
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	f7fc fc6b 	bl	8001264 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800498e:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <HAL_SD_ReadBlocks_DMA+0x194>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004998:	2b01      	cmp	r3, #1
 800499a:	d002      	beq.n	80049a2 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	025b      	lsls	r3, r3, #9
 80049a0:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	025b      	lsls	r3, r3, #9
 80049ac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80049ae:	2390      	movs	r3, #144	; 0x90
 80049b0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80049b2:	2302      	movs	r3, #2
 80049b4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80049ba:	2301      	movs	r3, #1
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f107 0214 	add.w	r2, r7, #20
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fa91 	bl	8005ef0 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 fab6 	bl	8005f48 <SDMMC_CmdBlockLength>
 80049dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e02e      	b.n	8004a64 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d90a      	bls.n	8004a22 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2282      	movs	r2, #130	; 0x82
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fadd 	bl	8005fd8 <SDMMC_CmdReadMultiBlock>
 8004a1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004a20:	e009      	b.n	8004a36 <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2281      	movs	r2, #129	; 0x81
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 faae 	bl	8005f90 <SDMMC_CmdReadSingleBlock>
 8004a34:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d010      	beq.n	8004a5e <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e002      	b.n	8004a64 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
  }
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3730      	adds	r7, #48	; 0x30
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	08005507 	.word	0x08005507
 8004a70:	08005575 	.word	0x08005575
 8004a74:	4225858c 	.word	0x4225858c

08004a78 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08c      	sub	sp, #48	; 0x30
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0ad      	b.n	8004bfc <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	f040 80a6 	bne.w	8004bfa <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d907      	bls.n	8004ad2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e094      	b.n	8004bfc <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	4a42      	ldr	r2, [pc, #264]	; (8004c04 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <HAL_SD_WriteBlocks_DMA+0x190>)
 8004b04:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d002      	beq.n	8004b1c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	025b      	lsls	r3, r3, #9
 8004b1a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 fa0f 	bl	8005f48 <SDMMC_CmdBlockLength>
 8004b2a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e053      	b.n	8004bfc <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d90a      	bls.n	8004b70 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	22a0      	movs	r2, #160	; 0xa0
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 fa7e 	bl	8006068 <SDMMC_CmdWriteMultiBlock>
 8004b6c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b6e:	e009      	b.n	8004b84 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2290      	movs	r2, #144	; 0x90
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 fa4f 	bl	8006020 <SDMMC_CmdWriteSingleBlock>
 8004b82:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e027      	b.n	8004bfc <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <HAL_SD_WriteBlocks_DMA+0x194>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3380      	adds	r3, #128	; 0x80
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	025b      	lsls	r3, r3, #9
 8004bc4:	089b      	lsrs	r3, r3, #2
 8004bc6:	f7fc fb4d 	bl	8001264 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	025b      	lsls	r3, r3, #9
 8004bd4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004bd6:	2390      	movs	r3, #144	; 0x90
 8004bd8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004be2:	2301      	movs	r3, #1
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f107 0214 	add.w	r2, r7, #20
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f97d 	bl	8005ef0 <SDIO_ConfigData>
    
    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3730      	adds	r7, #48	; 0x30
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	080054dd 	.word	0x080054dd
 8004c08:	08005575 	.word	0x08005575
 8004c0c:	4225858c 	.word	0x4225858c

08004c10 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 808d 	beq.w	8004d46 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c34:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004c44:	f023 0302 	bic.w	r3, r3, #2
 8004c48:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d03a      	beq.n	8004ccc <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <HAL_SD_IRQHandler+0x5e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d011      	beq.n	8004c92 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 fa1c 	bl	80060b0 <SDMMC_CmdStopTransfer>
 8004c78:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f925 	bl	8004edc <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <HAL_SD_IRQHandler+0xac>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f006 fe57 	bl	800b970 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8004cc2:	e103      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f006 fe49 	bl	800b95c <HAL_SD_TxCpltCallback>
}
 8004cca:	e0ff      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80f9 	beq.w	8004ecc <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d011      	beq.n	8004d0a <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 f9e0 	bl	80060b0 <SDMMC_CmdStopTransfer>
 8004cf0:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f8e9 	bl	8004edc <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 80da 	bne.w	8004ecc <HAL_SD_IRQHandler+0x2bc>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 80d3 	bne.w	8004ecc <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0208 	bic.w	r2, r2, #8
 8004d34:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f006 fe0c 	bl	800b95c <HAL_SD_TxCpltCallback>
}
 8004d44:	e0c2      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 ffef 	bl	8005d42 <SD_Write_IT>
}
 8004d64:	e0b2      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 ffb7 	bl	8005cf2 <SD_Read_IT>
}
 8004d84:	e0a2      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8c:	f240 233a 	movw	r3, #570	; 0x23a
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 809a 	beq.w	8004ecc <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f043 0202 	orr.w	r2, r3, #2
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	f043 0208 	orr.w	r2, r3, #8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	f043 0210 	orr.w	r2, r3, #16
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	f043 0208 	orr.w	r2, r3, #8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004e32:	f023 0302 	bic.w	r3, r3, #2
 8004e36:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d036      	beq.n	8004eb2 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d011      	beq.n	8004e70 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	4a20      	ldr	r2, [pc, #128]	; (8004ed4 <HAL_SD_IRQHandler+0x2c4>)
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fc fa63 	bl	8001324 <HAL_DMA_Abort_IT>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d033      	beq.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fbc8 	bl	80055fe <SD_DMATxAbort>
}
 8004e6e:	e02d      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d011      	beq.n	8004e9c <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_SD_IRQHandler+0x2c8>)
 8004e7e:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fc fa4d 	bl	8001324 <HAL_DMA_Abort_IT>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01d      	beq.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fbf0 	bl	800567a <SD_DMARxAbort>
}
 8004e9a:	e017      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f006 fd4c 	bl	800b948 <HAL_SD_AbortCallback>
}
 8004eb0:	e00c      	b.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d006      	beq.n	8004ecc <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f808 	bl	8004edc <HAL_SD_ErrorCallback>
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	080055ff 	.word	0x080055ff
 8004ed8:	0800567b 	.word	0x0800567b

08004edc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f02:	0e1b      	lsrs	r3, r3, #24
 8004f04:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6c:	0e1b      	lsrs	r3, r3, #24
 8004f6e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	88db      	ldrh	r3, [r3, #6]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	09db      	lsrs	r3, r3, #7
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 8087 	bne.w	8005116 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	029b      	lsls	r3, r3, #10
 800500c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005018:	b2db      	uxtb	r3, r3
 800501a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	431a      	orrs	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502e:	0e1b      	lsrs	r3, r3, #24
 8005030:	b2db      	uxtb	r3, r3
 8005032:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	099b      	lsrs	r3, r3, #6
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	431a      	orrs	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	08db      	lsrs	r3, r3, #3
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	b2da      	uxtb	r2, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	b2da      	uxtb	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	b2db      	uxtb	r3, r3
 800506c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	b2da      	uxtb	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	b2da      	uxtb	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0306 	and.w	r3, r3, #6
 800509a:	b2da      	uxtb	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a4:	0a1b      	lsrs	r3, r3, #8
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	7e1b      	ldrb	r3, [r3, #24]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	09db      	lsrs	r3, r3, #7
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4313      	orrs	r3, r2
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	7e1b      	ldrb	r3, [r3, #24]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	3302      	adds	r3, #2
 80050d6:	2201      	movs	r2, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80050e0:	fb02 f203 	mul.w	r2, r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	7a1b      	ldrb	r3, [r3, #8]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	2301      	movs	r3, #1
 80050f2:	fa03 f202 	lsl.w	r2, r3, r2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005102:	0a52      	lsrs	r2, r2, #9
 8005104:	fb02 f203 	mul.w	r2, r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005112:	661a      	str	r2, [r3, #96]	; 0x60
 8005114:	e04d      	b.n	80051b2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	2b01      	cmp	r3, #1
 800511c:	d138      	bne.n	8005190 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005122:	b2db      	uxtb	r3, r3
 8005124:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005136:	0e1b      	lsrs	r3, r3, #24
 8005138:	b2db      	uxtb	r3, r3
 800513a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	431a      	orrs	r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	b2db      	uxtb	r3, r3
 8005152:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	431a      	orrs	r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	b2db      	uxtb	r3, r3
 8005168:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	029a      	lsls	r2, r3, #10
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005184:	659a      	str	r2, [r3, #88]	; 0x58
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	661a      	str	r2, [r3, #96]	; 0x60
 800518e:	e010      	b.n	80051b2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0c1      	b.n	8005336 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	7e9b      	ldrb	r3, [r3, #26]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	09db      	lsrs	r3, r3, #7
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	4313      	orrs	r3, r2
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	0e1b      	lsrs	r3, r3, #24
 800520a:	b2db      	uxtb	r3, r3
 800520c:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	09db      	lsrs	r3, r3, #7
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	b2da      	uxtb	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	b2da      	uxtb	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	b2da      	uxtb	r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	b2db      	uxtb	r3, r3
 8005258:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	7fdb      	ldrb	r3, [r3, #31]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	099b      	lsrs	r3, r3, #6
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	b2db      	uxtb	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b2da      	uxtb	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	09db      	lsrs	r3, r3, #7
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	b2da      	uxtb	r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	b2db      	uxtb	r3, r3
 8005318:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005324:	b2da      	uxtb	r2, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800539a:	b5b0      	push	{r4, r5, r7, lr}
 800539c:	b08e      	sub	sp, #56	; 0x38
 800539e:	af04      	add	r7, sp, #16
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2203      	movs	r2, #3
 80053ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d02e      	beq.n	8005416 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d106      	bne.n	80053ce <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
 80053cc:	e029      	b.n	8005422 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d4:	d10a      	bne.n	80053ec <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fb28 	bl	8005a2c <SD_WideBus_Enable>
 80053dc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
 80053ea:	e01a      	b.n	8005422 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fb67 	bl	8005ac6 <SD_WideBus_Disable>
 80053f8:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
 8005406:	e00c      	b.n	8005422 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
 8005414:	e005      	b.n	8005422 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e024      	b.n	800548a <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681d      	ldr	r5, [r3, #0]
 8005466:	466c      	mov	r4, sp
 8005468:	f107 0318 	add.w	r3, r7, #24
 800546c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005474:	f107 030c 	add.w	r3, r7, #12
 8005478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800547a:	4628      	mov	r0, r5
 800547c:	f000 fc87 	bl	8005d8e <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3728      	adds	r7, #40	; 0x28
 800548e:	46bd      	mov	sp, r7
 8005490:	bdb0      	pop	{r4, r5, r7, pc}

08005492 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800549a:	2304      	movs	r3, #4
 800549c:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa93 	bl	80059d8 <SD_SendStatus>
 80054b2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	0a5b      	lsrs	r3, r3, #9
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005514:	2300      	movs	r3, #0
 8005516:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	2b82      	cmp	r3, #130	; 0x82
 800551e:	d111      	bne.n	8005544 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fdc3 	bl	80060b0 <SDMMC_CmdStopTransfer>
 800552a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff fccc 	bl	8004edc <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0208 	bic.w	r2, r2, #8
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f006 fa02 	bl	800b970 <HAL_SD_RxCpltCallback>
#endif
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	2b01      	cmp	r3, #1
 800558a:	d004      	beq.n	8005596 <SD_DMAError+0x22>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	2b01      	cmp	r3, #1
 8005594:	d12c      	bne.n	80055f0 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80055ae:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff ff68 	bl	8005492 <HAL_SD_GetCardState>
 80055c2:	4603      	mov	r3, r0
 80055c4:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80055c6:	7afb      	ldrb	r3, [r7, #11]
 80055c8:	2b06      	cmp	r3, #6
 80055ca:	d002      	beq.n	80055d2 <SD_DMAError+0x5e>
 80055cc:	7afb      	ldrb	r3, [r7, #11]
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d10a      	bne.n	80055e8 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fd6a 	bl	80060b0 <SDMMC_CmdStopTransfer>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff fc73 	bl	8004edc <HAL_SD_ErrorCallback>
#endif
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d127      	bne.n	8005672 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff ff35 	bl	8005492 <HAL_SD_GetCardState>
 8005628:	4603      	mov	r3, r0
 800562a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	2b06      	cmp	r3, #6
 800563e:	d002      	beq.n	8005646 <SD_DMATxAbort+0x48>
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	2b05      	cmp	r3, #5
 8005644:	d115      	bne.n	8005672 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fd30 	bl	80060b0 <SDMMC_CmdStopTransfer>
 8005650:	4602      	mov	r2, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	431a      	orrs	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f006 f96f 	bl	800b948 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800566a:	e002      	b.n	8005672 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fc35 	bl	8004edc <HAL_SD_ErrorCallback>
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d127      	bne.n	80056ee <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fef7 	bl	8005492 <HAL_SD_GetCardState>
 80056a4:	4603      	mov	r3, r0
 80056a6:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d002      	beq.n	80056c2 <SD_DMARxAbort+0x48>
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d115      	bne.n	80056ee <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fcf2 	bl	80060b0 <SDMMC_CmdStopTransfer>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f006 f931 	bl	800b948 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 80056e6:	e002      	b.n	80056ee <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fbf7 	bl	8004edc <HAL_SD_ErrorCallback>
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80056f6:	b5b0      	push	{r4, r5, r7, lr}
 80056f8:	b094      	sub	sp, #80	; 0x50
 80056fa:	af04      	add	r7, sp, #16
 80056fc:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8005702:	2301      	movs	r3, #1
 8005704:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fb96 	bl	8005e3c <SDIO_GetPowerState>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005716:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800571a:	e0b1      	b.n	8005880 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	2b03      	cmp	r3, #3
 8005722:	d02f      	beq.n	8005784 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fddb 	bl	80062e4 <SDMMC_CmdSendCID>
 800572e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <SD_InitCard+0x44>
    {
      return errorstate;
 8005736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005738:	e0a2      	b.n	8005880 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fbc0 	bl	8005ec6 <SDIO_GetResponse>
 8005746:	4602      	mov	r2, r0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2104      	movs	r1, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fbb7 	bl	8005ec6 <SDIO_GetResponse>
 8005758:	4602      	mov	r2, r0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2108      	movs	r1, #8
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fbae 	bl	8005ec6 <SDIO_GetResponse>
 800576a:	4602      	mov	r2, r0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	210c      	movs	r1, #12
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fba5 	bl	8005ec6 <SDIO_GetResponse>
 800577c:	4602      	mov	r2, r0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	2b03      	cmp	r3, #3
 800578a:	d00d      	beq.n	80057a8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f107 020e 	add.w	r2, r7, #14
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fde5 	bl	8006366 <SDMMC_CmdSetRelAdd>
 800579c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <SD_InitCard+0xb2>
    {
      return errorstate;
 80057a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a6:	e06b      	b.n	8005880 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d036      	beq.n	800581e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80057b0:	89fb      	ldrh	r3, [r7, #14]
 80057b2:	461a      	mov	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f000 fdad 	bl	8006324 <SDMMC_CmdSendCSD>
 80057ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <SD_InitCard+0xe0>
    {
      return errorstate;
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	e054      	b.n	8005880 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fb72 	bl	8005ec6 <SDIO_GetResponse>
 80057e2:	4602      	mov	r2, r0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2104      	movs	r1, #4
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fb69 	bl	8005ec6 <SDIO_GetResponse>
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2108      	movs	r1, #8
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fb60 	bl	8005ec6 <SDIO_GetResponse>
 8005806:	4602      	mov	r2, r0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	210c      	movs	r1, #12
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fb57 	bl	8005ec6 <SDIO_GetResponse>
 8005818:	4602      	mov	r2, r0
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2104      	movs	r1, #4
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fb4e 	bl	8005ec6 <SDIO_GetResponse>
 800582a:	4603      	mov	r3, r0
 800582c:	0d1a      	lsrs	r2, r3, #20
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005832:	f107 0310 	add.w	r3, r7, #16
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fb59 	bl	8004ef0 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	f04f 0400 	mov.w	r4, #0
 800584c:	461a      	mov	r2, r3
 800584e:	4623      	mov	r3, r4
 8005850:	4608      	mov	r0, r1
 8005852:	f000 fc51 	bl	80060f8 <SDMMC_CmdSelDesel>
 8005856:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <SD_InitCard+0x16c>
  {
    return errorstate;
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	e00e      	b.n	8005880 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681d      	ldr	r5, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	466c      	mov	r4, sp
 800586a:	f103 0210 	add.w	r2, r3, #16
 800586e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005874:	3304      	adds	r3, #4
 8005876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005878:	4628      	mov	r0, r5
 800587a:	f000 fa88 	bl	8005d8e <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3740      	adds	r7, #64	; 0x40
 8005884:	46bd      	mov	sp, r7
 8005886:	bdb0      	pop	{r4, r5, r7, pc}

08005888 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fc4c 	bl	8006142 <SDMMC_CmdGoIdleState>
 80058aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <SD_PowerON+0x2e>
  {
    return errorstate;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	e08c      	b.n	80059d0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fc61 	bl	8006182 <SDMMC_CmdOperCond>
 80058c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d03d      	beq.n	8005944 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80058ce:	e032      	b.n	8005936 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	60ba      	str	r2, [r7, #8]
 80058d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058da:	4293      	cmp	r3, r2
 80058dc:	d102      	bne.n	80058e4 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80058de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058e2:	e075      	b.n	80059d0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fc6a 	bl	80061c4 <SDMMC_CmdAppCommand>
 80058f0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058fc:	e068      	b.n	80059d0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fc81 	bl	800620c <SDMMC_CmdAppOperCommand>
 800590a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005912:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005916:	e05b      	b.n	80059d0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fad1 	bl	8005ec6 <SDIO_GetResponse>
 8005924:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	0fdb      	lsrs	r3, r3, #31
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <SD_PowerON+0xaa>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <SD_PowerON+0xac>
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0c9      	beq.n	80058d0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	645a      	str	r2, [r3, #68]	; 0x44
 8005942:	e044      	b.n	80059ce <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800594a:	e031      	b.n	80059b0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	60ba      	str	r2, [r7, #8]
 8005952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005956:	4293      	cmp	r3, r2
 8005958:	d102      	bne.n	8005960 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800595a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800595e:	e037      	b.n	80059d0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fc2c 	bl	80061c4 <SDMMC_CmdAppCommand>
 800596c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <SD_PowerON+0xf0>
      {
        return errorstate;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	e02b      	b.n	80059d0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fc43 	bl	800620c <SDMMC_CmdAppOperCommand>
 8005986:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <SD_PowerON+0x10a>
      {
        return errorstate;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	e01e      	b.n	80059d0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fa94 	bl	8005ec6 <SDIO_GetResponse>
 800599e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	0fdb      	lsrs	r3, r3, #31
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <SD_PowerON+0x124>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <SD_PowerON+0x126>
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ca      	beq.n	800594c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	645a      	str	r2, [r3, #68]	; 0x44
 80059c6:	e002      	b.n	80059ce <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80059ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f0:	e018      	b.n	8005a24 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 fcd4 	bl	80063ac <SDMMC_CmdSendStatus>
 8005a04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <SD_SendStatus+0x38>
  {
    return errorstate;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	e009      	b.n	8005a24 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fa55 	bl	8005ec6 <SDIO_GetResponse>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fa3d 	bl	8005ec6 <SDIO_GetResponse>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a56:	d102      	bne.n	8005a5e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a5c:	e02f      	b.n	8005abe <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f87b 	bl	8005b60 <SD_FindSCR>
 8005a6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	e023      	b.n	8005abe <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01c      	beq.n	8005aba <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f000 fb99 	bl	80061c4 <SDMMC_CmdAppCommand>
 8005a92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	e00f      	b.n	8005abe <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fbd6 	bl	8006256 <SDMMC_CmdBusWidth>
 8005aaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	e003      	b.n	8005abe <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e001      	b.n	8005abe <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005aba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f9f0 	bl	8005ec6 <SDIO_GetResponse>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005af0:	d102      	bne.n	8005af8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005af6:	e02f      	b.n	8005b58 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005af8:	f107 030c 	add.w	r3, r7, #12
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f82e 	bl	8005b60 <SD_FindSCR>
 8005b04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	e023      	b.n	8005b58 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01c      	beq.n	8005b54 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f000 fb4c 	bl	80061c4 <SDMMC_CmdAppCommand>
 8005b2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	e00f      	b.n	8005b58 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fb89 	bl	8006256 <SDMMC_CmdBusWidth>
 8005b44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	e003      	b.n	8005b58 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e001      	b.n	8005b58 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b08f      	sub	sp, #60	; 0x3c
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005b6e:	f7fb f98b 	bl	8000e88 <HAL_GetTick>
 8005b72:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2108      	movs	r1, #8
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f9de 	bl	8005f48 <SDMMC_CmdBlockLength>
 8005b8c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	e0a8      	b.n	8005cea <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	041b      	lsls	r3, r3, #16
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f000 fb0d 	bl	80061c4 <SDMMC_CmdAppCommand>
 8005baa:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	e099      	b.n	8005cea <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bba:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005bc0:	2330      	movs	r3, #48	; 0x30
 8005bc2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f107 0214 	add.w	r2, r7, #20
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f988 	bl	8005ef0 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fb5a 	bl	800629e <SDMMC_CmdSendSCR>
 8005bea:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d022      	beq.n	8005c38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	e079      	b.n	8005cea <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00e      	beq.n	8005c22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6819      	ldr	r1, [r3, #0]
 8005c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	f107 020c 	add.w	r2, r7, #12
 8005c10:	18d4      	adds	r4, r2, r3
 8005c12:	4608      	mov	r0, r1
 8005c14:	f000 f8e6 	bl	8005de4 <SDIO_ReadFIFO>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	6023      	str	r3, [r4, #0]
      index++;
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	3301      	adds	r3, #1
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c22:	f7fb f931 	bl	8000e88 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d102      	bne.n	8005c38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005c32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c36:	e058      	b.n	8005cea <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3e:	f240 432a 	movw	r3, #1066	; 0x42a
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0d6      	beq.n	8005bf6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005c5e:	2308      	movs	r3, #8
 8005c60:	e043      	b.n	8005cea <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2202      	movs	r2, #2
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e036      	b.n	8005cea <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8005c92:	2320      	movs	r3, #32
 8005c94:	e029      	b.n	8005cea <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	061a      	lsls	r2, r3, #24
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cac:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	0a1b      	lsrs	r3, r3, #8
 8005cb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005cb6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005cc2:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005cc4:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	061a      	lsls	r2, r3, #24
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005cdc:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	0e1b      	lsrs	r3, r3, #24
 8005ce2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	373c      	adds	r7, #60	; 0x3c
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd90      	pop	{r4, r7, pc}

08005cf2 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005cf2:	b590      	push	{r4, r7, lr}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e00d      	b.n	8005d26 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	18d4      	adds	r4, r2, r3
 8005d16:	4608      	mov	r0, r1
 8005d18:	f000 f864 	bl	8005de4 <SDIO_ReadFIFO>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b07      	cmp	r3, #7
 8005d2a:	d9ee      	bls.n	8005d0a <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	f103 0220 	add.w	r2, r3, #32
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}

08005d42 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e00b      	b.n	8005d72 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	f000 f849 	bl	8005dfe <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	d9f0      	bls.n	8005d5a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f103 0220 	add.w	r2, r3, #32
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005d8e:	b084      	sub	sp, #16
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	f107 001c 	add.w	r0, r7, #28
 8005d9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005da4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005da6:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005da8:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005dac:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005db0:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005db4:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005db8:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	b004      	add	sp, #16
 8005de2:	4770      	bx	lr

08005de4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0303 	and.w	r3, r3, #3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005e7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005e82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e92:	f023 030f 	bic.w	r3, r3, #15
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	b2db      	uxtb	r3, r3
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	461a      	mov	r2, r3
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
}  
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f16:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005f1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005f22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0

}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6c:	f107 0308 	add.w	r3, r7, #8
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ff70 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7c:	2110      	movs	r1, #16
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa62 	bl	8006448 <SDMMC_GetCmdResp1>
 8005f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f86:	69fb      	ldr	r3, [r7, #28]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005fa2:	2311      	movs	r3, #17
 8005fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff ff4c 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	2111      	movs	r1, #17
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa3e 	bl	8006448 <SDMMC_GetCmdResp1>
 8005fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fce:	69fb      	ldr	r3, [r7, #28]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005fea:	2312      	movs	r3, #18
 8005fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ffa:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ffc:	f107 0308 	add.w	r3, r7, #8
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff ff28 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	2112      	movs	r1, #18
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa1a 	bl	8006448 <SDMMC_GetCmdResp1>
 8006014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006016:	69fb      	ldr	r3, [r7, #28]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006032:	2318      	movs	r3, #24
 8006034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006036:	2340      	movs	r3, #64	; 0x40
 8006038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800603e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006042:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff04 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	2118      	movs	r1, #24
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f9f6 	bl	8006448 <SDMMC_GetCmdResp1>
 800605c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800605e:	69fb      	ldr	r3, [r7, #28]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800607a:	2319      	movs	r3, #25
 800607c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800607e:	2340      	movs	r3, #64	; 0x40
 8006080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800608a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fee0 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006098:	f241 3288 	movw	r2, #5000	; 0x1388
 800609c:	2119      	movs	r1, #25
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f9d2 	bl	8006448 <SDMMC_GetCmdResp1>
 80060a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060a6:	69fb      	ldr	r3, [r7, #28]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80060c0:	230c      	movs	r3, #12
 80060c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff febd 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80060de:	4a05      	ldr	r2, [pc, #20]	; (80060f4 <SDMMC_CmdStopTransfer+0x44>)
 80060e0:	210c      	movs	r1, #12
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9b0 	bl	8006448 <SDMMC_GetCmdResp1>
 80060e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ea:	69fb      	ldr	r3, [r7, #28]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	05f5e100 	.word	0x05f5e100

080060f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800610c:	2307      	movs	r3, #7
 800610e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006110:	2340      	movs	r3, #64	; 0x40
 8006112:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800611e:	f107 0310 	add.w	r3, r7, #16
 8006122:	4619      	mov	r1, r3
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff fe97 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	2107      	movs	r1, #7
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f989 	bl	8006448 <SDMMC_GetCmdResp1>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800613a:	4618      	mov	r0, r3
 800613c:	3728      	adds	r7, #40	; 0x28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b088      	sub	sp, #32
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800615e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006162:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006164:	f107 0308 	add.w	r3, r7, #8
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fe74 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f93f 	bl	80063f4 <SDMMC_GetCmdError>
 8006176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006178:	69fb      	ldr	r3, [r7, #28]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b088      	sub	sp, #32
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800618e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006194:	2308      	movs	r3, #8
 8006196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff fe53 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fb10 	bl	80067d8 <SDMMC_GetCmdResp7>
 80061b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ba:	69fb      	ldr	r3, [r7, #28]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3720      	adds	r7, #32
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80061d6:	2337      	movs	r3, #55	; 0x37
 80061d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff fe32 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80061f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f8:	2137      	movs	r1, #55	; 0x37
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f924 	bl	8006448 <SDMMC_GetCmdResp1>
 8006200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006202:	69fb      	ldr	r3, [r7, #28]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006226:	2329      	movs	r3, #41	; 0x29
 8006228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006236:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006238:	f107 0308 	add.w	r3, r7, #8
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fe0a 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa25 	bl	8006694 <SDMMC_GetCmdResp3>
 800624a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800624c:	69fb      	ldr	r3, [r7, #28]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b088      	sub	sp, #32
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006268:	2306      	movs	r3, #6
 800626a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006278:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fde9 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006286:	f241 3288 	movw	r2, #5000	; 0x1388
 800628a:	2106      	movs	r1, #6
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f8db 	bl	8006448 <SDMMC_GetCmdResp1>
 8006292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006294:	69fb      	ldr	r3, [r7, #28]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b088      	sub	sp, #32
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80062ae:	2333      	movs	r3, #51	; 0x33
 80062b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062b2:	2340      	movs	r3, #64	; 0x40
 80062b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062be:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062c0:	f107 0308 	add.w	r3, r7, #8
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff fdc6 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	2133      	movs	r1, #51	; 0x33
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f8b8 	bl	8006448 <SDMMC_GetCmdResp1>
 80062d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062da:	69fb      	ldr	r3, [r7, #28]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80062f4:	2302      	movs	r3, #2
 80062f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80062f8:	23c0      	movs	r3, #192	; 0xc0
 80062fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006304:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006306:	f107 0308 	add.w	r3, r7, #8
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fda3 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f97e 	bl	8006614 <SDMMC_GetCmdResp2>
 8006318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800631a:	69fb      	ldr	r3, [r7, #28]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006336:	2309      	movs	r3, #9
 8006338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800633a:	23c0      	movs	r3, #192	; 0xc0
 800633c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006346:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006348:	f107 0308 	add.w	r3, r7, #8
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fd82 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f95d 	bl	8006614 <SDMMC_GetCmdResp2>
 800635a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800635c:	69fb      	ldr	r3, [r7, #28]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b088      	sub	sp, #32
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006378:	2303      	movs	r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800637c:	2340      	movs	r3, #64	; 0x40
 800637e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006388:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800638a:	f107 0308 	add.w	r3, r7, #8
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fd61 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	2103      	movs	r1, #3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f9ae 	bl	80066fc <SDMMC_GetCmdResp6>
 80063a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063a2:	69fb      	ldr	r3, [r7, #28]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80063be:	230d      	movs	r3, #13
 80063c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063c2:	2340      	movs	r3, #64	; 0x40
 80063c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ce:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063d0:	f107 0308 	add.w	r3, r7, #8
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fd3e 	bl	8005e58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80063dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e0:	210d      	movs	r1, #13
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f830 	bl	8006448 <SDMMC_GetCmdResp1>
 80063e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ea:	69fb      	ldr	r3, [r7, #28]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80063f4:	b490      	push	{r4, r7}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <SDMMC_GetCmdError+0x4c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a10      	ldr	r2, [pc, #64]	; (8006444 <SDMMC_GetCmdError+0x50>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	0a5b      	lsrs	r3, r3, #9
 8006408:	f241 3288 	movw	r2, #5000	; 0x1388
 800640c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006410:	4623      	mov	r3, r4
 8006412:	1e5c      	subs	r4, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800641c:	e00a      	b.n	8006434 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f2      	beq.n	8006410 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bc90      	pop	{r4, r7}
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000118 	.word	0x20000118
 8006444:	10624dd3 	.word	0x10624dd3

08006448 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	460b      	mov	r3, r1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006456:	4b6c      	ldr	r3, [pc, #432]	; (8006608 <SDMMC_GetCmdResp1+0x1c0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6c      	ldr	r2, [pc, #432]	; (800660c <SDMMC_GetCmdResp1+0x1c4>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	0a5b      	lsrs	r3, r3, #9
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006468:	4623      	mov	r3, r4
 800646a:	1e5c      	subs	r4, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006474:	e0c3      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f2      	beq.n	8006468 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2204      	movs	r2, #4
 8006492:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006494:	2304      	movs	r3, #4
 8006496:	e0b2      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e0a7      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7ff fcfc 	bl	8005eac <SDIO_GetCommandResponse>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	7afb      	ldrb	r3, [r7, #11]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d001      	beq.n	80064c2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064be:	2301      	movs	r3, #1
 80064c0:	e09d      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064ca:	2100      	movs	r1, #0
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fcfa 	bl	8005ec6 <SDIO_GetResponse>
 80064d2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4b4e      	ldr	r3, [pc, #312]	; (8006610 <SDMMC_GetCmdResp1+0x1c8>)
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80064de:	2300      	movs	r3, #0
 80064e0:	e08d      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da02      	bge.n	80064ee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80064e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ec:	e087      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	e080      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	e079      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006518:	e071      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006528:	e069      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006538:	e061      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006548:	e059      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006558:	e051      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006568:	e049      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006578:	e041      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8006584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006588:	e039      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006598:	e031      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80065a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065a8:	e029      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80065b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065b8:	e021      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80065c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80065c8:	e019      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80065d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065d8:	e011      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80065e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065e8:	e009      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80065f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80065f8:	e001      	b.n	80065fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	20000118 	.word	0x20000118
 800660c:	10624dd3 	.word	0x10624dd3
 8006610:	fdffe008 	.word	0xfdffe008

08006614 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006614:	b490      	push	{r4, r7}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <SDMMC_GetCmdResp2+0x78>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <SDMMC_GetCmdResp2+0x7c>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	0a5b      	lsrs	r3, r3, #9
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006630:	4623      	mov	r3, r4
 8006632:	1e5c      	subs	r4, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d102      	bne.n	800663e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800663c:	e020      	b.n	8006680 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f2      	beq.n	8006630 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2204      	movs	r2, #4
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800665c:	2304      	movs	r3, #4
 800665e:	e00f      	b.n	8006680 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006672:	2301      	movs	r3, #1
 8006674:	e004      	b.n	8006680 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800667c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bc90      	pop	{r4, r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000118 	.word	0x20000118
 8006690:	10624dd3 	.word	0x10624dd3

08006694 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006694:	b490      	push	{r4, r7}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800669c:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <SDMMC_GetCmdResp3+0x60>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <SDMMC_GetCmdResp3+0x64>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	0a5b      	lsrs	r3, r3, #9
 80066a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80066b0:	4623      	mov	r3, r4
 80066b2:	1e5c      	subs	r4, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066bc:	e015      	b.n	80066ea <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f2      	beq.n	80066b0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2204      	movs	r2, #4
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066dc:	2304      	movs	r3, #4
 80066de:	e004      	b.n	80066ea <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc90      	pop	{r4, r7}
 80066f2:	4770      	bx	lr
 80066f4:	20000118 	.word	0x20000118
 80066f8:	10624dd3 	.word	0x10624dd3

080066fc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	460b      	mov	r3, r1
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <SDMMC_GetCmdResp6+0xd4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a31      	ldr	r2, [pc, #196]	; (80067d4 <SDMMC_GetCmdResp6+0xd8>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	0a5b      	lsrs	r3, r3, #9
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800671e:	4623      	mov	r3, r4
 8006720:	1e5c      	subs	r4, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006726:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800672a:	e04c      	b.n	80067c6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f2      	beq.n	800671e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2204      	movs	r2, #4
 8006748:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800674a:	2304      	movs	r3, #4
 800674c:	e03b      	b.n	80067c6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006760:	2301      	movs	r3, #1
 8006762:	e030      	b.n	80067c6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff fba1 	bl	8005eac <SDIO_GetCommandResponse>
 800676a:	4603      	mov	r3, r0
 800676c:	461a      	mov	r2, r3
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	4293      	cmp	r3, r2
 8006772:	d001      	beq.n	8006778 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006774:	2301      	movs	r3, #1
 8006776:	e026      	b.n	80067c6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800677e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006780:	2100      	movs	r1, #0
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fb9f 	bl	8005ec6 <SDIO_GetResponse>
 8006788:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800679e:	2300      	movs	r3, #0
 80067a0:	e011      	b.n	80067c6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067b0:	e009      	b.n	80067c6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067c0:	e001      	b.n	80067c6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd90      	pop	{r4, r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000118 	.word	0x20000118
 80067d4:	10624dd3 	.word	0x10624dd3

080067d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80067d8:	b490      	push	{r4, r7}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067e0:	4b18      	ldr	r3, [pc, #96]	; (8006844 <SDMMC_GetCmdResp7+0x6c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a18      	ldr	r2, [pc, #96]	; (8006848 <SDMMC_GetCmdResp7+0x70>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	0a5b      	lsrs	r3, r3, #9
 80067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80067f4:	4623      	mov	r3, r4
 80067f6:	1e5c      	subs	r4, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006800:	e01a      	b.n	8006838 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f2      	beq.n	80067f4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2240      	movs	r2, #64	; 0x40
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006820:	2304      	movs	r3, #4
 8006822:	e009      	b.n	8006838 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2240      	movs	r2, #64	; 0x40
 8006834:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006836:	2300      	movs	r3, #0
  
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bc90      	pop	{r4, r7}
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000118 	.word	0x20000118
 8006848:	10624dd3 	.word	0x10624dd3

0800684c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800684c:	b084      	sub	sp, #16
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	f107 001c 	add.w	r0, r7, #28
 800685a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2b01      	cmp	r3, #1
 8006862:	d122      	bne.n	80068aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800688c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688e:	2b01      	cmp	r3, #1
 8006890:	d105      	bne.n	800689e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fa7c 	bl	8007d9c <USB_CoreReset>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
 80068a8:	e01a      	b.n	80068e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fa70 	bl	8007d9c <USB_CoreReset>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
 80068d2:	e005      	b.n	80068e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d10b      	bne.n	80068fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f043 0206 	orr.w	r2, r3, #6
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800690a:	b004      	add	sp, #16
 800690c:	4770      	bx	lr
	...

08006910 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d165      	bne.n	80069f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4a41      	ldr	r2, [pc, #260]	; (8006a2c <USB_SetTurnaroundTime+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d906      	bls.n	800693a <USB_SetTurnaroundTime+0x2a>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4a40      	ldr	r2, [pc, #256]	; (8006a30 <USB_SetTurnaroundTime+0x120>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d802      	bhi.n	800693a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006934:	230f      	movs	r3, #15
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	e062      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4a3c      	ldr	r2, [pc, #240]	; (8006a30 <USB_SetTurnaroundTime+0x120>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d906      	bls.n	8006950 <USB_SetTurnaroundTime+0x40>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4a3b      	ldr	r2, [pc, #236]	; (8006a34 <USB_SetTurnaroundTime+0x124>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d802      	bhi.n	8006950 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800694a:	230e      	movs	r3, #14
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	e057      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4a38      	ldr	r2, [pc, #224]	; (8006a34 <USB_SetTurnaroundTime+0x124>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d906      	bls.n	8006966 <USB_SetTurnaroundTime+0x56>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <USB_SetTurnaroundTime+0x128>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d802      	bhi.n	8006966 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006960:	230d      	movs	r3, #13
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e04c      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4a33      	ldr	r2, [pc, #204]	; (8006a38 <USB_SetTurnaroundTime+0x128>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d906      	bls.n	800697c <USB_SetTurnaroundTime+0x6c>
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4a32      	ldr	r2, [pc, #200]	; (8006a3c <USB_SetTurnaroundTime+0x12c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d802      	bhi.n	800697c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006976:	230c      	movs	r3, #12
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	e041      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4a2f      	ldr	r2, [pc, #188]	; (8006a3c <USB_SetTurnaroundTime+0x12c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d906      	bls.n	8006992 <USB_SetTurnaroundTime+0x82>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4a2e      	ldr	r2, [pc, #184]	; (8006a40 <USB_SetTurnaroundTime+0x130>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d802      	bhi.n	8006992 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800698c:	230b      	movs	r3, #11
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e036      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <USB_SetTurnaroundTime+0x130>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d906      	bls.n	80069a8 <USB_SetTurnaroundTime+0x98>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4a29      	ldr	r2, [pc, #164]	; (8006a44 <USB_SetTurnaroundTime+0x134>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d802      	bhi.n	80069a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069a2:	230a      	movs	r3, #10
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e02b      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <USB_SetTurnaroundTime+0x134>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d906      	bls.n	80069be <USB_SetTurnaroundTime+0xae>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4a25      	ldr	r2, [pc, #148]	; (8006a48 <USB_SetTurnaroundTime+0x138>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d802      	bhi.n	80069be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069b8:	2309      	movs	r3, #9
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	e020      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4a21      	ldr	r2, [pc, #132]	; (8006a48 <USB_SetTurnaroundTime+0x138>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d906      	bls.n	80069d4 <USB_SetTurnaroundTime+0xc4>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4a20      	ldr	r2, [pc, #128]	; (8006a4c <USB_SetTurnaroundTime+0x13c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d802      	bhi.n	80069d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069ce:	2308      	movs	r3, #8
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	e015      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4a1d      	ldr	r2, [pc, #116]	; (8006a4c <USB_SetTurnaroundTime+0x13c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d906      	bls.n	80069ea <USB_SetTurnaroundTime+0xda>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4a1c      	ldr	r2, [pc, #112]	; (8006a50 <USB_SetTurnaroundTime+0x140>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d802      	bhi.n	80069ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069e4:	2307      	movs	r3, #7
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e00a      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069ea:	2306      	movs	r3, #6
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e007      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069f6:	2309      	movs	r3, #9
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	e001      	b.n	8006a00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069fc:	2309      	movs	r3, #9
 80069fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	029b      	lsls	r3, r3, #10
 8006a14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	00d8acbf 	.word	0x00d8acbf
 8006a30:	00e4e1bf 	.word	0x00e4e1bf
 8006a34:	00f423ff 	.word	0x00f423ff
 8006a38:	0106737f 	.word	0x0106737f
 8006a3c:	011a499f 	.word	0x011a499f
 8006a40:	01312cff 	.word	0x01312cff
 8006a44:	014ca43f 	.word	0x014ca43f
 8006a48:	016e35ff 	.word	0x016e35ff
 8006a4c:	01a6ab1f 	.word	0x01a6ab1f
 8006a50:	01e847ff 	.word	0x01e847ff

08006a54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f043 0201 	orr.w	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d106      	bne.n	8006ac4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60da      	str	r2, [r3, #12]
 8006ac2:	e00b      	b.n	8006adc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	e001      	b.n	8006adc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e003      	b.n	8006ae4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006adc:	2032      	movs	r0, #50	; 0x32
 8006ade:	f7fa f9df 	bl	8000ea0 <HAL_Delay>

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aec:	b084      	sub	sp, #16
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	e009      	b.n	8006b20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3340      	adds	r3, #64	; 0x40
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b0e      	cmp	r3, #14
 8006b24:	d9f2      	bls.n	8006b0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d112      	bne.n	8006b52 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8006b50:	e00b      	b.n	8006b6a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b70:	461a      	mov	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b84:	461a      	mov	r2, r3
 8006b86:	680b      	ldr	r3, [r1, #0]
 8006b88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10c      	bne.n	8006baa <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b96:	2100      	movs	r1, #0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f961 	bl	8006e60 <USB_SetDevSpeed>
 8006b9e:	e008      	b.n	8006bb2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f95c 	bl	8006e60 <USB_SetDevSpeed>
 8006ba8:	e003      	b.n	8006bb2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006baa:	2103      	movs	r1, #3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f957 	bl	8006e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bb2:	2110      	movs	r1, #16
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f90b 	bl	8006dd0 <USB_FlushTxFifo>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f929 	bl	8006e1c <USB_FlushRxFifo>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	461a      	mov	r2, r3
 8006be8:	2300      	movs	r3, #0
 8006bea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	e043      	b.n	8006c86 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c14:	d118      	bne.n	8006c48 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	e013      	b.n	8006c5a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e008      	b.n	8006c5a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c66:	461a      	mov	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3301      	adds	r3, #1
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3b7      	bcc.n	8006bfe <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e043      	b.n	8006d1c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006caa:	d118      	bne.n	8006cde <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e013      	b.n	8006cf0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e008      	b.n	8006cf0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d3b7      	bcc.n	8006c94 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d36:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d111      	bne.n	8006d62 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <USB_DevInit+0x2dc>)
 8006d48:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5c:	f043 0303 	orr.w	r3, r3, #3
 8006d60:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d6e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d105      	bne.n	8006d82 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f043 0210 	orr.w	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <USB_DevInit+0x2e0>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	f043 0208 	orr.w	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d107      	bne.n	8006db6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dae:	f043 0304 	orr.w	r3, r3, #4
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dc2:	b004      	add	sp, #16
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	00800100 	.word	0x00800100
 8006dcc:	803c3800 	.word	0x803c3800

08006dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	019b      	lsls	r3, r3, #6
 8006de2:	f043 0220 	orr.w	r2, r3, #32
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <USB_FlushTxFifo+0x48>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e006      	b.n	8006e0a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d0f0      	beq.n	8006dea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	00030d40 	.word	0x00030d40

08006e1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2210      	movs	r2, #16
 8006e2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <USB_FlushRxFifo+0x40>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d901      	bls.n	8006e40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e006      	b.n	8006e4e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d0f0      	beq.n	8006e2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	00030d40 	.word	0x00030d40

08006e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e80:	4313      	orrs	r3, r2
 8006e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b087      	sub	sp, #28
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0306 	and.w	r3, r3, #6
 8006eaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
 8006eb6:	e00a      	b.n	8006ece <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d002      	beq.n	8006ec4 <USB_GetDevSpeed+0x32>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	d102      	bne.n	8006eca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	75fb      	strb	r3, [r7, #23]
 8006ec8:	e001      	b.n	8006ece <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006eca:	230f      	movs	r3, #15
 8006ecc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d13a      	bne.n	8006f6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	2101      	movs	r1, #1
 8006f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f16:	4313      	orrs	r3, r2
 8006f18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d155      	bne.n	8006fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	059b      	lsls	r3, r3, #22
 8006f52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f54:	4313      	orrs	r3, r2
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	e036      	b.n	8006fdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	2101      	movs	r1, #1
 8006f80:	fa01 f303 	lsl.w	r3, r1, r3
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d11a      	bne.n	8006fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	78db      	ldrb	r3, [r3, #3]
 8006fc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d135      	bne.n	8007074 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	2101      	movs	r1, #1
 800701a:	fa01 f303 	lsl.w	r3, r1, r3
 800701e:	b29b      	uxth	r3, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007028:	4013      	ands	r3, r2
 800702a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f303 	lsl.w	r3, r1, r3
 8007042:	b29b      	uxth	r3, r3
 8007044:	43db      	mvns	r3, r3
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704c:	4013      	ands	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	0159      	lsls	r1, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	440b      	add	r3, r1
 8007066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706a:	4619      	mov	r1, r3
 800706c:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <USB_DeactivateEndpoint+0x100>)
 800706e:	4013      	ands	r3, r2
 8007070:	600b      	str	r3, [r1, #0]
 8007072:	e034      	b.n	80070de <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	2101      	movs	r1, #1
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	43db      	mvns	r3, r3
 800708e:	68f9      	ldr	r1, [r7, #12]
 8007090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007094:	4013      	ands	r3, r2
 8007096:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	2101      	movs	r1, #1
 80070aa:	fa01 f303 	lsl.w	r3, r1, r3
 80070ae:	041b      	lsls	r3, r3, #16
 80070b0:	43db      	mvns	r3, r3
 80070b2:	68f9      	ldr	r1, [r7, #12]
 80070b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b8:	4013      	ands	r3, r2
 80070ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	0159      	lsls	r1, r3, #5
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	440b      	add	r3, r1
 80070d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d6:	4619      	mov	r1, r3
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <USB_DeactivateEndpoint+0x104>)
 80070da:	4013      	ands	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	ec337800 	.word	0xec337800
 80070f0:	eff37800 	.word	0xeff37800

080070f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b01      	cmp	r3, #1
 8007112:	f040 815c 	bne.w	80073ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d132      	bne.n	8007184 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007138:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800713c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007140:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	69fa      	ldr	r2, [r7, #28]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717c:	0cdb      	lsrs	r3, r3, #19
 800717e:	04db      	lsls	r3, r3, #19
 8007180:	6113      	str	r3, [r2, #16]
 8007182:	e074      	b.n	800726e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719e:	0cdb      	lsrs	r3, r3, #19
 80071a0:	04db      	lsls	r3, r3, #19
 80071a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6959      	ldr	r1, [r3, #20]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	440b      	add	r3, r1
 80071e0:	1e59      	subs	r1, r3, #1
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80071ea:	04d9      	lsls	r1, r3, #19
 80071ec:	4b9d      	ldr	r3, [pc, #628]	; (8007464 <USB_EPStartXfer+0x370>)
 80071ee:	400b      	ands	r3, r1
 80071f0:	69b9      	ldr	r1, [r7, #24]
 80071f2:	0148      	lsls	r0, r1, #5
 80071f4:	69f9      	ldr	r1, [r7, #28]
 80071f6:	4401      	add	r1, r0
 80071f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071fc:	4313      	orrs	r3, r2
 80071fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007216:	69b9      	ldr	r1, [r7, #24]
 8007218:	0148      	lsls	r0, r1, #5
 800721a:	69f9      	ldr	r1, [r7, #28]
 800721c:	4401      	add	r1, r0
 800721e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007222:	4313      	orrs	r3, r2
 8007224:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	78db      	ldrb	r3, [r3, #3]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d11f      	bne.n	800726e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007248:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800724c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800726c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d14b      	bne.n	800730c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	461a      	mov	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	78db      	ldrb	r3, [r3, #3]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d128      	bne.n	80072ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d110      	bne.n	80072ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	0151      	lsls	r1, r2, #5
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	440a      	add	r2, r1
 80072be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	e00f      	b.n	80072ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007304:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	e12f      	b.n	800756c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007326:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800732a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	78db      	ldrb	r3, [r3, #3]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d015      	beq.n	8007360 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8117 	beq.w	800756c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	2101      	movs	r1, #1
 8007350:	fa01 f303 	lsl.w	r3, r1, r3
 8007354:	69f9      	ldr	r1, [r7, #28]
 8007356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800735a:	4313      	orrs	r3, r2
 800735c:	634b      	str	r3, [r1, #52]	; 0x34
 800735e:	e105      	b.n	800756c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d110      	bne.n	8007392 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	e00f      	b.n	80073b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	68d9      	ldr	r1, [r3, #12]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	b298      	uxth	r0, r3
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	4603      	mov	r3, r0
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 fa2b 	bl	8007822 <USB_WritePacket>
 80073cc:	e0ce      	b.n	800756c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e8:	0cdb      	lsrs	r3, r3, #19
 80073ea:	04db      	lsls	r3, r3, #19
 80073ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	440a      	add	r2, r1
 8007404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007408:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800740c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007410:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d126      	bne.n	8007468 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007430:	69b9      	ldr	r1, [r7, #24]
 8007432:	0148      	lsls	r0, r1, #5
 8007434:	69f9      	ldr	r1, [r7, #28]
 8007436:	4401      	add	r1, r0
 8007438:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800743c:	4313      	orrs	r3, r2
 800743e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	440a      	add	r2, r1
 8007456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800745e:	6113      	str	r3, [r2, #16]
 8007460:	e036      	b.n	80074d0 <USB_EPStartXfer+0x3dc>
 8007462:	bf00      	nop
 8007464:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	4413      	add	r3, r2
 8007472:	1e5a      	subs	r2, r3, #1
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	fbb2 f3f3 	udiv	r3, r2, r3
 800747c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	8afb      	ldrh	r3, [r7, #22]
 800748e:	04d9      	lsls	r1, r3, #19
 8007490:	4b39      	ldr	r3, [pc, #228]	; (8007578 <USB_EPStartXfer+0x484>)
 8007492:	400b      	ands	r3, r1
 8007494:	69b9      	ldr	r1, [r7, #24]
 8007496:	0148      	lsls	r0, r1, #5
 8007498:	69f9      	ldr	r1, [r7, #28]
 800749a:	4401      	add	r1, r0
 800749c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074a0:	4313      	orrs	r3, r2
 80074a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	8af9      	ldrh	r1, [r7, #22]
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	0148      	lsls	r0, r1, #5
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	4401      	add	r1, r0
 80074c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074cc:	4313      	orrs	r3, r2
 80074ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d10d      	bne.n	80074f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68d9      	ldr	r1, [r3, #12]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	460a      	mov	r2, r1
 80074f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	78db      	ldrb	r3, [r3, #3]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d128      	bne.n	800754c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	e00f      	b.n	800754c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800754a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800756a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	1ff80000 	.word	0x1ff80000

0800757c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b01      	cmp	r3, #1
 800759a:	f040 80cd 	bne.w	8007738 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d132      	bne.n	800760c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007604:	0cdb      	lsrs	r3, r3, #19
 8007606:	04db      	lsls	r3, r3, #19
 8007608:	6113      	str	r3, [r2, #16]
 800760a:	e04e      	b.n	80076aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	0151      	lsls	r1, r2, #5
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	440a      	add	r2, r1
 8007622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007626:	0cdb      	lsrs	r3, r3, #19
 8007628:	04db      	lsls	r3, r3, #19
 800762a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	440a      	add	r2, r1
 8007642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007646:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800764a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800764e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	429a      	cmp	r2, r3
 800765a:	d903      	bls.n	8007664 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800769a:	6939      	ldr	r1, [r7, #16]
 800769c:	0148      	lsls	r0, r1, #5
 800769e:	6979      	ldr	r1, [r7, #20]
 80076a0:	4401      	add	r1, r0
 80076a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076a6:	4313      	orrs	r3, r2
 80076a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d11e      	bne.n	80076ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	e092      	b.n	8007814 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007708:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800770c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d07e      	beq.n	8007814 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	2101      	movs	r1, #1
 8007728:	fa01 f303 	lsl.w	r3, r1, r3
 800772c:	6979      	ldr	r1, [r7, #20]
 800772e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007732:	4313      	orrs	r3, r2
 8007734:	634b      	str	r3, [r1, #52]	; 0x34
 8007736:	e06d      	b.n	8007814 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	0151      	lsls	r1, r2, #5
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	440a      	add	r2, r1
 800774e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007752:	0cdb      	lsrs	r3, r3, #19
 8007754:	04db      	lsls	r3, r3, #19
 8007756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	440a      	add	r2, r1
 800776e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007772:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007776:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800777a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077c2:	6939      	ldr	r1, [r7, #16]
 80077c4:	0148      	lsls	r0, r1, #5
 80077c6:	6979      	ldr	r1, [r7, #20]
 80077c8:	4401      	add	r1, r0
 80077ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077ce:	4313      	orrs	r3, r2
 80077d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d10d      	bne.n	80077f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d009      	beq.n	80077f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	68d9      	ldr	r1, [r3, #12]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	460a      	mov	r2, r1
 80077f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	440a      	add	r2, r1
 800780a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800780e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007812:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007822:	b480      	push	{r7}
 8007824:	b089      	sub	sp, #36	; 0x24
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	4611      	mov	r1, r2
 800782e:	461a      	mov	r2, r3
 8007830:	460b      	mov	r3, r1
 8007832:	71fb      	strb	r3, [r7, #7]
 8007834:	4613      	mov	r3, r2
 8007836:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d11a      	bne.n	800787e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007848:	88bb      	ldrh	r3, [r7, #4]
 800784a:	3303      	adds	r3, #3
 800784c:	089b      	lsrs	r3, r3, #2
 800784e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	e00f      	b.n	8007876 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	031a      	lsls	r2, r3, #12
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	4413      	add	r3, r2
 800785e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007862:	461a      	mov	r2, r3
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6013      	str	r3, [r2, #0]
      pSrc++;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	3304      	adds	r3, #4
 800786e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	3301      	adds	r3, #1
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	429a      	cmp	r2, r3
 800787c:	d3eb      	bcc.n	8007856 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3724      	adds	r7, #36	; 0x24
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800788c:	b480      	push	{r7}
 800788e:	b089      	sub	sp, #36	; 0x24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	3303      	adds	r3, #3
 80078a6:	089b      	lsrs	r3, r3, #2
 80078a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80078aa:	2300      	movs	r3, #0
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e00b      	b.n	80078c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	3304      	adds	r3, #4
 80078c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	3301      	adds	r3, #1
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d3ef      	bcc.n	80078b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80078d0:	69fb      	ldr	r3, [r7, #28]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3724      	adds	r7, #36	; 0x24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d12c      	bne.n	8007954 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	db12      	blt.n	8007932 <USB_EPSetStall+0x54>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00f      	beq.n	8007932 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007930:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800794c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	e02b      	b.n	80079ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	db12      	blt.n	800798c <USB_EPSetStall+0xae>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00f      	beq.n	800798c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	440a      	add	r2, r1
 8007982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007986:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800798a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	0151      	lsls	r1, r2, #5
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	440a      	add	r2, r1
 80079a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d128      	bne.n	8007a28 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	78db      	ldrb	r3, [r3, #3]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d003      	beq.n	8007a06 <USB_EPClearStall+0x4c>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d138      	bne.n	8007a78 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e027      	b.n	8007a78 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	78db      	ldrb	r3, [r3, #3]
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d003      	beq.n	8007a58 <USB_EPClearStall+0x9e>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	78db      	ldrb	r3, [r3, #3]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d10f      	bne.n	8007a78 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a76:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007aa8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aec:	f023 0302 	bic.w	r3, r3, #2
 8007af0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007af2:	2003      	movs	r0, #3
 8007af4:	f7f9 f9d4 	bl	8000ea0 <HAL_Delay>

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b1c:	f043 0302 	orr.w	r3, r3, #2
 8007b20:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007b22:	2003      	movs	r0, #3
 8007b24:	f7f9 f9bc 	bl	8000ea0 <HAL_Delay>

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4013      	ands	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	0c1b      	lsrs	r3, r3, #16
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4013      	ands	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	b29b      	uxth	r3, r3
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	4013      	ands	r3, r2
 8007bec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bee:	68bb      	ldr	r3, [r7, #8]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	01db      	lsls	r3, r3, #7
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4013      	ands	r3, r2
 8007c48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f003 0301 	and.w	r3, r3, #1
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c92:	f023 0307 	bic.w	r3, r3, #7
 8007c96:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 0306 	and.w	r3, r3, #6
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d109      	bne.n	8007cbc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cb6:	f043 0303 	orr.w	r3, r3, #3
 8007cba:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
	...

08007ce0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	333c      	adds	r3, #60	; 0x3c
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4a26      	ldr	r2, [pc, #152]	; (8007d98 <USB_EP0_OutStart+0xb8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d90a      	bls.n	8007d1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d14:	d101      	bne.n	8007d1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e037      	b.n	8007d8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d20:	461a      	mov	r2, r3
 8007d22:	2300      	movs	r3, #0
 8007d24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d48:	f043 0318 	orr.w	r3, r3, #24
 8007d4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d10f      	bne.n	8007d88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	4f54300a 	.word	0x4f54300a

08007d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <USB_CoreReset+0x64>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d901      	bls.n	8007dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e01b      	b.n	8007df2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	daf2      	bge.n	8007da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f043 0201 	orr.w	r2, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <USB_CoreReset+0x64>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e006      	b.n	8007df2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d0f0      	beq.n	8007dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	00030d40 	.word	0x00030d40

08007e04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	7c1b      	ldrb	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d115      	bne.n	8007e48 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e20:	2202      	movs	r2, #2
 8007e22:	2181      	movs	r1, #129	; 0x81
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f005 f844 	bl	800ceb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e34:	2202      	movs	r2, #2
 8007e36:	2101      	movs	r1, #1
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f005 f83a 	bl	800ceb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007e46:	e012      	b.n	8007e6e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e48:	2340      	movs	r3, #64	; 0x40
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	2181      	movs	r1, #129	; 0x81
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f005 f82f 	bl	800ceb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e5a:	2340      	movs	r3, #64	; 0x40
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	2101      	movs	r1, #1
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f005 f826 	bl	800ceb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e6e:	2308      	movs	r3, #8
 8007e70:	2203      	movs	r2, #3
 8007e72:	2182      	movs	r1, #130	; 0x82
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f005 f81c 	bl	800ceb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007e80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e84:	f005 faca 	bl	800d41c <malloc>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	73fb      	strb	r3, [r7, #15]
 8007ea0:	e026      	b.n	8007ef0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ea8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7c1b      	ldrb	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f005 f8db 	bl	800d094 <USBD_LL_PrepareReceive>
 8007ede:	e007      	b.n	8007ef0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	2101      	movs	r1, #1
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f005 f8d2 	bl	800d094 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f0a:	2181      	movs	r1, #129	; 0x81
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f004 fff6 	bl	800cefe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f18:	2101      	movs	r1, #1
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f004 ffef 	bl	800cefe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f28:	2182      	movs	r1, #130	; 0x82
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f004 ffe7 	bl	800cefe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00e      	beq.n	8007f5e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f50:	4618      	mov	r0, r3
 8007f52:	f005 fa6b 	bl	800d42c <free>
    pdev->pClassData = NULL;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d039      	beq.n	8008006 <USBD_CDC_Setup+0x9e>
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d17c      	bne.n	8008090 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88db      	ldrh	r3, [r3, #6]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d029      	beq.n	8007ff2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b25b      	sxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da11      	bge.n	8007fcc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007fb4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	88d2      	ldrh	r2, [r2, #6]
 8007fba:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fbc:	6939      	ldr	r1, [r7, #16]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 f9c9 	bl	800935c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007fca:	e068      	b.n	800809e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	785a      	ldrb	r2, [r3, #1]
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fe2:	6939      	ldr	r1, [r7, #16]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	88db      	ldrh	r3, [r3, #6]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 f9e4 	bl	80093b8 <USBD_CtlPrepareRx>
    break;
 8007ff0:	e055      	b.n	800809e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	7850      	ldrb	r0, [r2, #1]
 8007ffe:	2200      	movs	r2, #0
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	4798      	blx	r3
    break;
 8008004:	e04b      	b.n	800809e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b0a      	cmp	r3, #10
 800800c:	d017      	beq.n	800803e <USBD_CDC_Setup+0xd6>
 800800e:	2b0b      	cmp	r3, #11
 8008010:	d029      	beq.n	8008066 <USBD_CDC_Setup+0xfe>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d133      	bne.n	800807e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800801c:	2b03      	cmp	r3, #3
 800801e:	d107      	bne.n	8008030 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	2202      	movs	r2, #2
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f997 	bl	800935c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800802e:	e02e      	b.n	800808e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 f927 	bl	8009286 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008038:	2302      	movs	r3, #2
 800803a:	75fb      	strb	r3, [r7, #23]
      break;
 800803c:	e027      	b.n	800808e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008044:	2b03      	cmp	r3, #3
 8008046:	d107      	bne.n	8008058 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008048:	f107 030f 	add.w	r3, r7, #15
 800804c:	2201      	movs	r2, #1
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 f983 	bl	800935c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008056:	e01a      	b.n	800808e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f913 	bl	8009286 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008060:	2302      	movs	r3, #2
 8008062:	75fb      	strb	r3, [r7, #23]
      break;
 8008064:	e013      	b.n	800808e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800806c:	2b03      	cmp	r3, #3
 800806e:	d00d      	beq.n	800808c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 f907 	bl	8009286 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008078:	2302      	movs	r3, #2
 800807a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800807c:	e006      	b.n	800808c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f900 	bl	8009286 <USBD_CtlError>
      ret = USBD_FAIL;
 8008086:	2302      	movs	r3, #2
 8008088:	75fb      	strb	r3, [r7, #23]
      break;
 800808a:	e000      	b.n	800808e <USBD_CDC_Setup+0x126>
      break;
 800808c:	bf00      	nop
    }
    break;
 800808e:	e006      	b.n	800809e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 f8f7 	bl	8009286 <USBD_CtlError>
    ret = USBD_FAIL;
 8008098:	2302      	movs	r3, #2
 800809a:	75fb      	strb	r3, [r7, #23]
    break;
 800809c:	bf00      	nop
  }

  return ret;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80080ba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080c2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d03a      	beq.n	8008144 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080ce:	78fa      	ldrb	r2, [r7, #3]
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	4613      	mov	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	440b      	add	r3, r1
 80080dc:	331c      	adds	r3, #28
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d029      	beq.n	8008138 <USBD_CDC_DataIn+0x90>
 80080e4:	78fa      	ldrb	r2, [r7, #3]
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	331c      	adds	r3, #28
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	78f9      	ldrb	r1, [r7, #3]
 80080f8:	68b8      	ldr	r0, [r7, #8]
 80080fa:	460b      	mov	r3, r1
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	1a5b      	subs	r3, r3, r1
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4403      	add	r3, r0
 8008104:	3344      	adds	r3, #68	; 0x44
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	fbb2 f1f3 	udiv	r1, r2, r3
 800810c:	fb03 f301 	mul.w	r3, r3, r1
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d110      	bne.n	8008138 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	440b      	add	r3, r1
 8008124:	331c      	adds	r3, #28
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800812a:	78f9      	ldrb	r1, [r7, #3]
 800812c:	2300      	movs	r3, #0
 800812e:	2200      	movs	r2, #0
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f004 ff8c 	bl	800d04e <USBD_LL_Transmit>
 8008136:	e003      	b.n	8008140 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	e000      	b.n	8008146 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008144:	2302      	movs	r3, #2
  }
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008160:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f004 ffb7 	bl	800d0da <USBD_LL_GetRxDataSize>
 800816c:	4602      	mov	r2, r0
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008192:	4611      	mov	r1, r2
 8008194:	4798      	blx	r3

    return USBD_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	e000      	b.n	800819c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800819a:	2302      	movs	r3, #2
  }
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80081b2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d015      	beq.n	80081ea <USBD_CDC_EP0_RxReady+0x46>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081c4:	2bff      	cmp	r3, #255	; 0xff
 80081c6:	d010      	beq.n	80081ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80081d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081de:	b292      	uxth	r2, r2
 80081e0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	22ff      	movs	r2, #255	; 0xff
 80081e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2243      	movs	r2, #67	; 0x43
 8008200:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008202:	4b03      	ldr	r3, [pc, #12]	; (8008210 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	20000090 	.word	0x20000090

08008214 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2243      	movs	r2, #67	; 0x43
 8008220:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008222:	4b03      	ldr	r3, [pc, #12]	; (8008230 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	2000004c 	.word	0x2000004c

08008234 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2243      	movs	r2, #67	; 0x43
 8008240:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008242:	4b03      	ldr	r3, [pc, #12]	; (8008250 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	200000d4 	.word	0x200000d4

08008254 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	220a      	movs	r2, #10
 8008260:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008262:	4b03      	ldr	r3, [pc, #12]	; (8008270 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	20000008 	.word	0x20000008

08008274 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800827e:	2302      	movs	r3, #2
 8008280:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d005      	beq.n	8008294 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b087      	sub	sp, #28
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	4613      	mov	r3, r2
 80082ae:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082b6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082c0:	88fa      	ldrh	r2, [r7, #6]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800830c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01c      	beq.n	8008352 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800831e:	2b00      	cmp	r3, #0
 8008320:	d115      	bne.n	800834e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2201      	movs	r2, #1
 8008326:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008340:	b29b      	uxth	r3, r3
 8008342:	2181      	movs	r1, #129	; 0x81
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f004 fe82 	bl	800d04e <USBD_LL_Transmit>

      return USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e002      	b.n	8008354 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008352:	2302      	movs	r3, #2
  }
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800836a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008372:	2b00      	cmp	r3, #0
 8008374:	d017      	beq.n	80083a6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7c1b      	ldrb	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008388:	2101      	movs	r1, #1
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f004 fe82 	bl	800d094 <USBD_LL_PrepareReceive>
 8008390:	e007      	b.n	80083a2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	2101      	movs	r1, #1
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f004 fe79 	bl	800d094 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e000      	b.n	80083a8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083a6:	2302      	movs	r3, #2
  }
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083c4:	2302      	movs	r3, #2
 80083c6:	e01a      	b.n	80083fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	79fa      	ldrb	r2, [r7, #7]
 80083f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f004 fcf4 	bl	800cde4 <USBD_LL_Init>

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d006      	beq.n	8008428 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	e001      	b.n	800842c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008428:	2302      	movs	r3, #2
 800842a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f004 fd1a 	bl	800ce7c <USBD_LL_Start>

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008474:	2302      	movs	r3, #2
 8008476:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00c      	beq.n	800849c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	4611      	mov	r1, r2
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	4611      	mov	r1, r2
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fe94 	bl	800920c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	2b01      	cmp	r3, #1
 8008506:	d00c      	beq.n	8008522 <USBD_LL_SetupStage+0x56>
 8008508:	2b01      	cmp	r3, #1
 800850a:	d302      	bcc.n	8008512 <USBD_LL_SetupStage+0x46>
 800850c:	2b02      	cmp	r3, #2
 800850e:	d010      	beq.n	8008532 <USBD_LL_SetupStage+0x66>
 8008510:	e017      	b.n	8008542 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa04 	bl	8008928 <USBD_StdDevReq>
    break;
 8008520:	e01a      	b.n	8008558 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fa66 	bl	80089fc <USBD_StdItfReq>
    break;
 8008530:	e012      	b.n	8008558 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 faa4 	bl	8008a88 <USBD_StdEPReq>
    break;
 8008540:	e00a      	b.n	8008558 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800854c:	b2db      	uxtb	r3, r3
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f004 fcf3 	bl	800cf3c <USBD_LL_StallEP>
    break;
 8008556:	bf00      	nop
  }

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b086      	sub	sp, #24
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	460b      	mov	r3, r1
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008570:	7afb      	ldrb	r3, [r7, #11]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d14b      	bne.n	800860e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800857c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008584:	2b03      	cmp	r3, #3
 8008586:	d134      	bne.n	80085f2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	429a      	cmp	r2, r3
 8008592:	d919      	bls.n	80085c8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d203      	bcs.n	80085b6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	e002      	b.n	80085bc <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 ff17 	bl	80093f4 <USBD_CtlContinueRx>
 80085c6:	e038      	b.n	800863a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d105      	bne.n	80085ea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 ff14 	bl	8009418 <USBD_CtlSendStatus>
 80085f0:	e023      	b.n	800863a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80085f8:	2b05      	cmp	r3, #5
 80085fa:	d11e      	bne.n	800863a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008604:	2100      	movs	r1, #0
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f004 fc98 	bl	800cf3c <USBD_LL_StallEP>
 800860c:	e015      	b.n	800863a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00d      	beq.n	8008636 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008620:	2b03      	cmp	r3, #3
 8008622:	d108      	bne.n	8008636 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	7afa      	ldrb	r2, [r7, #11]
 800862e:	4611      	mov	r1, r2
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	4798      	blx	r3
 8008634:	e001      	b.n	800863a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008636:	2302      	movs	r3, #2
 8008638:	e000      	b.n	800863c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	460b      	mov	r3, r1
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008652:	7afb      	ldrb	r3, [r7, #11]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d17f      	bne.n	8008758 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3314      	adds	r3, #20
 800865c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008664:	2b02      	cmp	r3, #2
 8008666:	d15c      	bne.n	8008722 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	429a      	cmp	r2, r3
 8008672:	d915      	bls.n	80086a0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	68da      	ldr	r2, [r3, #12]
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	1ad2      	subs	r2, r2, r3
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 fe81 	bl	8009394 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008692:	2300      	movs	r3, #0
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f004 fcfb 	bl	800d094 <USBD_LL_PrepareReceive>
 800869e:	e04e      	b.n	800873e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	6912      	ldr	r2, [r2, #16]
 80086a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086ac:	fb02 f201 	mul.w	r2, r2, r1
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d11c      	bne.n	80086f0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80086be:	429a      	cmp	r2, r3
 80086c0:	d316      	bcc.n	80086f0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d20f      	bcs.n	80086f0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086d0:	2200      	movs	r2, #0
 80086d2:	2100      	movs	r1, #0
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 fe5d 	bl	8009394 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80086e2:	2300      	movs	r3, #0
 80086e4:	2200      	movs	r2, #0
 80086e6:	2100      	movs	r1, #0
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f004 fcd3 	bl	800d094 <USBD_LL_PrepareReceive>
 80086ee:	e026      	b.n	800873e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008702:	2b03      	cmp	r3, #3
 8008704:	d105      	bne.n	8008712 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008712:	2180      	movs	r1, #128	; 0x80
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f004 fc11 	bl	800cf3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fe8f 	bl	800943e <USBD_CtlReceiveStatus>
 8008720:	e00d      	b.n	800873e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008728:	2b04      	cmp	r3, #4
 800872a:	d004      	beq.n	8008736 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008732:	2b00      	cmp	r3, #0
 8008734:	d103      	bne.n	800873e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008736:	2180      	movs	r1, #128	; 0x80
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f004 fbff 	bl	800cf3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008744:	2b01      	cmp	r3, #1
 8008746:	d11d      	bne.n	8008784 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f7ff fe82 	bl	8008452 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008756:	e015      	b.n	8008784 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00d      	beq.n	8008780 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800876a:	2b03      	cmp	r3, #3
 800876c:	d108      	bne.n	8008780 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	7afa      	ldrb	r2, [r7, #11]
 8008778:	4611      	mov	r1, r2
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	4798      	blx	r3
 800877e:	e001      	b.n	8008784 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008780:	2302      	movs	r3, #2
 8008782:	e000      	b.n	8008786 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	2200      	movs	r2, #0
 800879a:	2100      	movs	r1, #0
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f004 fb88 	bl	800ceb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2240      	movs	r2, #64	; 0x40
 80087ae:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087b2:	2340      	movs	r3, #64	; 0x40
 80087b4:	2200      	movs	r2, #0
 80087b6:	2180      	movs	r1, #128	; 0x80
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f004 fb7a 	bl	800ceb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2240      	movs	r2, #64	; 0x40
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d009      	beq.n	8008806 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6852      	ldr	r2, [r2, #4]
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	4611      	mov	r1, r2
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
  }

  return USBD_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2204      	movs	r2, #4
 8008848:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800888a:	2b03      	cmp	r3, #3
 800888c:	d10b      	bne.n	80088a6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6852      	ldr	r2, [r2, #4]
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	4611      	mov	r1, r2
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800893e:	2b20      	cmp	r3, #32
 8008940:	d004      	beq.n	800894c <USBD_StdDevReq+0x24>
 8008942:	2b40      	cmp	r3, #64	; 0x40
 8008944:	d002      	beq.n	800894c <USBD_StdDevReq+0x24>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d008      	beq.n	800895c <USBD_StdDevReq+0x34>
 800894a:	e04c      	b.n	80089e6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4798      	blx	r3
    break;
 800895a:	e049      	b.n	80089f0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b09      	cmp	r3, #9
 8008962:	d83a      	bhi.n	80089da <USBD_StdDevReq+0xb2>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <USBD_StdDevReq+0x44>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	080089bd 	.word	0x080089bd
 8008970:	080089d1 	.word	0x080089d1
 8008974:	080089db 	.word	0x080089db
 8008978:	080089c7 	.word	0x080089c7
 800897c:	080089db 	.word	0x080089db
 8008980:	0800899f 	.word	0x0800899f
 8008984:	08008995 	.word	0x08008995
 8008988:	080089db 	.word	0x080089db
 800898c:	080089b3 	.word	0x080089b3
 8008990:	080089a9 	.word	0x080089a9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9d2 	bl	8008d40 <USBD_GetDescriptor>
      break;
 800899c:	e022      	b.n	80089e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fac7 	bl	8008f34 <USBD_SetAddress>
      break;
 80089a6:	e01d      	b.n	80089e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fb04 	bl	8008fb8 <USBD_SetConfig>
      break;
 80089b0:	e018      	b.n	80089e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fb8d 	bl	80090d4 <USBD_GetConfig>
      break;
 80089ba:	e013      	b.n	80089e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fbbc 	bl	800913c <USBD_GetStatus>
      break;
 80089c4:	e00e      	b.n	80089e4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fbea 	bl	80091a2 <USBD_SetFeature>
      break;
 80089ce:	e009      	b.n	80089e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fbf9 	bl	80091ca <USBD_ClrFeature>
      break;
 80089d8:	e004      	b.n	80089e4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc52 	bl	8009286 <USBD_CtlError>
      break;
 80089e2:	bf00      	nop
    }
    break;
 80089e4:	e004      	b.n	80089f0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fc4c 	bl	8009286 <USBD_CtlError>
    break;
 80089ee:	bf00      	nop
  }

  return ret;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d003      	beq.n	8008a1e <USBD_StdItfReq+0x22>
 8008a16:	2b40      	cmp	r3, #64	; 0x40
 8008a18:	d001      	beq.n	8008a1e <USBD_StdItfReq+0x22>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d12a      	bne.n	8008a74 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a24:	3b01      	subs	r3, #1
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d81d      	bhi.n	8008a66 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	889b      	ldrh	r3, [r3, #4]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d813      	bhi.n	8008a5c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
 8008a42:	4603      	mov	r3, r0
 8008a44:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	88db      	ldrh	r3, [r3, #6]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d110      	bne.n	8008a70 <USBD_StdItfReq+0x74>
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10d      	bne.n	8008a70 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fcdf 	bl	8009418 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008a5a:	e009      	b.n	8008a70 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fc11 	bl	8009286 <USBD_CtlError>
      break;
 8008a64:	e004      	b.n	8008a70 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc0c 	bl	8009286 <USBD_CtlError>
      break;
 8008a6e:	e000      	b.n	8008a72 <USBD_StdItfReq+0x76>
      break;
 8008a70:	bf00      	nop
    }
    break;
 8008a72:	e004      	b.n	8008a7e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fc05 	bl	8009286 <USBD_CtlError>
    break;
 8008a7c:	bf00      	nop
  }

  return USBD_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	889b      	ldrh	r3, [r3, #4]
 8008a9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aa4:	2b20      	cmp	r3, #32
 8008aa6:	d004      	beq.n	8008ab2 <USBD_StdEPReq+0x2a>
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	d002      	beq.n	8008ab2 <USBD_StdEPReq+0x2a>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <USBD_StdEPReq+0x3a>
 8008ab0:	e13b      	b.n	8008d2a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
    break;
 8008ac0:	e138      	b.n	8008d34 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aca:	2b20      	cmp	r3, #32
 8008acc:	d10a      	bne.n	8008ae4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	4798      	blx	r3
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	e128      	b.n	8008d36 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d03e      	beq.n	8008b6a <USBD_StdEPReq+0xe2>
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d002      	beq.n	8008af6 <USBD_StdEPReq+0x6e>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d070      	beq.n	8008bd6 <USBD_StdEPReq+0x14e>
 8008af4:	e113      	b.n	8008d1e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d002      	beq.n	8008b06 <USBD_StdEPReq+0x7e>
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d015      	beq.n	8008b30 <USBD_StdEPReq+0xa8>
 8008b04:	e02b      	b.n	8008b5e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00c      	beq.n	8008b26 <USBD_StdEPReq+0x9e>
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b80      	cmp	r3, #128	; 0x80
 8008b10:	d009      	beq.n	8008b26 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f004 fa10 	bl	800cf3c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008b1c:	2180      	movs	r1, #128	; 0x80
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f004 fa0c 	bl	800cf3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b24:	e020      	b.n	8008b68 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fbac 	bl	8009286 <USBD_CtlError>
        break;
 8008b2e:	e01b      	b.n	8008b68 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	885b      	ldrh	r3, [r3, #2]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10e      	bne.n	8008b56 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00b      	beq.n	8008b56 <USBD_StdEPReq+0xce>
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b80      	cmp	r3, #128	; 0x80
 8008b42:	d008      	beq.n	8008b56 <USBD_StdEPReq+0xce>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	88db      	ldrh	r3, [r3, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f004 f9f3 	bl	800cf3c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fc5e 	bl	8009418 <USBD_CtlSendStatus>

        break;
 8008b5c:	e004      	b.n	8008b68 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fb90 	bl	8009286 <USBD_CtlError>
        break;
 8008b66:	bf00      	nop
      }
      break;
 8008b68:	e0de      	b.n	8008d28 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d002      	beq.n	8008b7a <USBD_StdEPReq+0xf2>
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d015      	beq.n	8008ba4 <USBD_StdEPReq+0x11c>
 8008b78:	e026      	b.n	8008bc8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00c      	beq.n	8008b9a <USBD_StdEPReq+0x112>
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b80      	cmp	r3, #128	; 0x80
 8008b84:	d009      	beq.n	8008b9a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f004 f9d6 	bl	800cf3c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008b90:	2180      	movs	r1, #128	; 0x80
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f004 f9d2 	bl	800cf3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b98:	e01c      	b.n	8008bd4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fb72 	bl	8009286 <USBD_CtlError>
        break;
 8008ba2:	e017      	b.n	8008bd4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	885b      	ldrh	r3, [r3, #2]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d112      	bne.n	8008bd2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f004 f9dd 	bl	800cf7a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fc29 	bl	8009418 <USBD_CtlSendStatus>
        }
        break;
 8008bc6:	e004      	b.n	8008bd2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fb5b 	bl	8009286 <USBD_CtlError>
        break;
 8008bd0:	e000      	b.n	8008bd4 <USBD_StdEPReq+0x14c>
        break;
 8008bd2:	bf00      	nop
      }
      break;
 8008bd4:	e0a8      	b.n	8008d28 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d002      	beq.n	8008be6 <USBD_StdEPReq+0x15e>
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d031      	beq.n	8008c48 <USBD_StdEPReq+0x1c0>
 8008be4:	e095      	b.n	8008d12 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d007      	beq.n	8008bfc <USBD_StdEPReq+0x174>
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b80      	cmp	r3, #128	; 0x80
 8008bf0:	d004      	beq.n	8008bfc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fb46 	bl	8009286 <USBD_CtlError>
          break;
 8008bfa:	e08f      	b.n	8008d1c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da0b      	bge.n	8008c1c <USBD_StdEPReq+0x194>
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	3310      	adds	r3, #16
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4413      	add	r3, r2
 8008c18:	3304      	adds	r3, #4
 8008c1a:	e00a      	b.n	8008c32 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	4413      	add	r3, r2
 8008c32:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fb8b 	bl	800935c <USBD_CtlSendData>
          break;
 8008c46:	e069      	b.n	8008d1c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da11      	bge.n	8008c74 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	f003 020f 	and.w	r2, r3, #15
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	3318      	adds	r3, #24
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d117      	bne.n	8008c9a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb0a 	bl	8009286 <USBD_CtlError>
            break;
 8008c72:	e053      	b.n	8008d1c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	f003 020f 	and.w	r2, r3, #15
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 faf7 	bl	8009286 <USBD_CtlError>
            break;
 8008c98:	e040      	b.n	8008d1c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008c9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	da0b      	bge.n	8008cba <USBD_StdEPReq+0x232>
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	3310      	adds	r3, #16
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	e00a      	b.n	8008cd0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <USBD_StdEPReq+0x256>
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	2b80      	cmp	r3, #128	; 0x80
 8008cdc:	d103      	bne.n	8008ce6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e00e      	b.n	8008d04 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f004 f964 	bl	800cfb8 <USBD_LL_IsStallEP>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e002      	b.n	8008d04 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2202      	movs	r2, #2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fb26 	bl	800935c <USBD_CtlSendData>
          break;
 8008d10:	e004      	b.n	8008d1c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fab6 	bl	8009286 <USBD_CtlError>
        break;
 8008d1a:	bf00      	nop
      }
      break;
 8008d1c:	e004      	b.n	8008d28 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fab0 	bl	8009286 <USBD_CtlError>
      break;
 8008d26:	bf00      	nop
    }
    break;
 8008d28:	e004      	b.n	8008d34 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 faaa 	bl	8009286 <USBD_CtlError>
    break;
 8008d32:	bf00      	nop
  }

  return ret;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	885b      	ldrh	r3, [r3, #2]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	3b01      	subs	r3, #1
 8008d54:	2b06      	cmp	r3, #6
 8008d56:	f200 80c9 	bhi.w	8008eec <USBD_GetDescriptor+0x1ac>
 8008d5a:	a201      	add	r2, pc, #4	; (adr r2, 8008d60 <USBD_GetDescriptor+0x20>)
 8008d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d60:	08008d7d 	.word	0x08008d7d
 8008d64:	08008d95 	.word	0x08008d95
 8008d68:	08008dd5 	.word	0x08008dd5
 8008d6c:	08008eed 	.word	0x08008eed
 8008d70:	08008eed 	.word	0x08008eed
 8008d74:	08008e99 	.word	0x08008e99
 8008d78:	08008ebf 	.word	0x08008ebf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	7c12      	ldrb	r2, [r2, #16]
 8008d88:	f107 010a 	add.w	r1, r7, #10
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4798      	blx	r3
 8008d90:	60f8      	str	r0, [r7, #12]
    break;
 8008d92:	e0b0      	b.n	8008ef6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	7c1b      	ldrb	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10d      	bne.n	8008db8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	f107 020a 	add.w	r2, r7, #10
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
 8008dac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3301      	adds	r3, #1
 8008db2:	2202      	movs	r2, #2
 8008db4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008db6:	e09e      	b.n	8008ef6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	f107 020a 	add.w	r2, r7, #10
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	4798      	blx	r3
 8008dc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	2202      	movs	r2, #2
 8008dd0:	701a      	strb	r2, [r3, #0]
    break;
 8008dd2:	e090      	b.n	8008ef6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	885b      	ldrh	r3, [r3, #2]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d856      	bhi.n	8008e8c <USBD_GetDescriptor+0x14c>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBD_GetDescriptor+0xa4>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008dfd 	.word	0x08008dfd
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	08008e2d 	.word	0x08008e2d
 8008df0:	08008e45 	.word	0x08008e45
 8008df4:	08008e5d 	.word	0x08008e5d
 8008df8:	08008e75 	.word	0x08008e75
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7c12      	ldrb	r2, [r2, #16]
 8008e08:	f107 010a 	add.w	r1, r7, #10
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
      break;
 8008e12:	e040      	b.n	8008e96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	7c12      	ldrb	r2, [r2, #16]
 8008e20:	f107 010a 	add.w	r1, r7, #10
 8008e24:	4610      	mov	r0, r2
 8008e26:	4798      	blx	r3
 8008e28:	60f8      	str	r0, [r7, #12]
      break;
 8008e2a:	e034      	b.n	8008e96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7c12      	ldrb	r2, [r2, #16]
 8008e38:	f107 010a 	add.w	r1, r7, #10
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
      break;
 8008e42:	e028      	b.n	8008e96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	7c12      	ldrb	r2, [r2, #16]
 8008e50:	f107 010a 	add.w	r1, r7, #10
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	60f8      	str	r0, [r7, #12]
      break;
 8008e5a:	e01c      	b.n	8008e96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 010a 	add.w	r1, r7, #10
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
      break;
 8008e72:	e010      	b.n	8008e96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	7c12      	ldrb	r2, [r2, #16]
 8008e80:	f107 010a 	add.w	r1, r7, #10
 8008e84:	4610      	mov	r0, r2
 8008e86:	4798      	blx	r3
 8008e88:	60f8      	str	r0, [r7, #12]
      break;
 8008e8a:	e004      	b.n	8008e96 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f9f9 	bl	8009286 <USBD_CtlError>
      return;
 8008e94:	e04b      	b.n	8008f2e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008e96:	e02e      	b.n	8008ef6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	7c1b      	ldrb	r3, [r3, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d109      	bne.n	8008eb4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea8:	f107 020a 	add.w	r2, r7, #10
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	60f8      	str	r0, [r7, #12]
      break;
 8008eb2:	e020      	b.n	8008ef6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f9e5 	bl	8009286 <USBD_CtlError>
      return;
 8008ebc:	e037      	b.n	8008f2e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	7c1b      	ldrb	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10d      	bne.n	8008ee2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	f107 020a 	add.w	r2, r7, #10
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4798      	blx	r3
 8008ed6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3301      	adds	r3, #1
 8008edc:	2207      	movs	r2, #7
 8008ede:	701a      	strb	r2, [r3, #0]
      break;
 8008ee0:	e009      	b.n	8008ef6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f9ce 	bl	8009286 <USBD_CtlError>
      return;
 8008eea:	e020      	b.n	8008f2e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9c9 	bl	8009286 <USBD_CtlError>
    return;
 8008ef4:	e01b      	b.n	8008f2e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008ef6:	897b      	ldrh	r3, [r7, #10]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d011      	beq.n	8008f20 <USBD_GetDescriptor+0x1e0>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	88db      	ldrh	r3, [r3, #6]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00d      	beq.n	8008f20 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	88da      	ldrh	r2, [r3, #6]
 8008f08:	897b      	ldrh	r3, [r7, #10]
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	bf28      	it	cs
 8008f0e:	4613      	movcs	r3, r2
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008f14:	897b      	ldrh	r3, [r7, #10]
 8008f16:	461a      	mov	r2, r3
 8008f18:	68f9      	ldr	r1, [r7, #12]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa1e 	bl	800935c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	88db      	ldrh	r3, [r3, #6]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fa75 	bl	8009418 <USBD_CtlSendStatus>
  }
}
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	889b      	ldrh	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d130      	bne.n	8008fa8 <USBD_SetAddress+0x74>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	88db      	ldrh	r3, [r3, #6]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d12c      	bne.n	8008fa8 <USBD_SetAddress+0x74>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	885b      	ldrh	r3, [r3, #2]
 8008f52:	2b7f      	cmp	r3, #127	; 0x7f
 8008f54:	d828      	bhi.n	8008fa8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	885b      	ldrh	r3, [r3, #2]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d104      	bne.n	8008f76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f989 	bl	8009286 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f74:	e01c      	b.n	8008fb0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	7bfa      	ldrb	r2, [r7, #15]
 8008f7a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f004 f844 	bl	800d010 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fa45 	bl	8009418 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9c:	e008      	b.n	8008fb0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa6:	e003      	b.n	8008fb0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f96b 	bl	8009286 <USBD_CtlError>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	885b      	ldrh	r3, [r3, #2]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	4b41      	ldr	r3, [pc, #260]	; (80090d0 <USBD_SetConfig+0x118>)
 8008fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fcc:	4b40      	ldr	r3, [pc, #256]	; (80090d0 <USBD_SetConfig+0x118>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d904      	bls.n	8008fde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f955 	bl	8009286 <USBD_CtlError>
 8008fdc:	e075      	b.n	80090ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d002      	beq.n	8008fee <USBD_SetConfig+0x36>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d023      	beq.n	8009034 <USBD_SetConfig+0x7c>
 8008fec:	e062      	b.n	80090b4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008fee:	4b38      	ldr	r3, [pc, #224]	; (80090d0 <USBD_SetConfig+0x118>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d01a      	beq.n	800902c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008ff6:	4b36      	ldr	r3, [pc, #216]	; (80090d0 <USBD_SetConfig+0x118>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2203      	movs	r2, #3
 8009004:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009008:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <USBD_SetConfig+0x118>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff fa2a 	bl	8008468 <USBD_SetClassConfig>
 8009014:	4603      	mov	r3, r0
 8009016:	2b02      	cmp	r3, #2
 8009018:	d104      	bne.n	8009024 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f932 	bl	8009286 <USBD_CtlError>
          return;
 8009022:	e052      	b.n	80090ca <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f9f7 	bl	8009418 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800902a:	e04e      	b.n	80090ca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f9f3 	bl	8009418 <USBD_CtlSendStatus>
      break;
 8009032:	e04a      	b.n	80090ca <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009034:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <USBD_SetConfig+0x118>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d112      	bne.n	8009062 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009044:	4b22      	ldr	r3, [pc, #136]	; (80090d0 <USBD_SetConfig+0x118>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800904e:	4b20      	ldr	r3, [pc, #128]	; (80090d0 <USBD_SetConfig+0x118>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff fa26 	bl	80084a6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f9dc 	bl	8009418 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009060:	e033      	b.n	80090ca <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009062:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <USBD_SetConfig+0x118>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d01d      	beq.n	80090ac <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff fa14 	bl	80084a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800907e:	4b14      	ldr	r3, [pc, #80]	; (80090d0 <USBD_SetConfig+0x118>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <USBD_SetConfig+0x118>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff f9ea 	bl	8008468 <USBD_SetClassConfig>
 8009094:	4603      	mov	r3, r0
 8009096:	2b02      	cmp	r3, #2
 8009098:	d104      	bne.n	80090a4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f8f2 	bl	8009286 <USBD_CtlError>
          return;
 80090a2:	e012      	b.n	80090ca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f9b7 	bl	8009418 <USBD_CtlSendStatus>
      break;
 80090aa:	e00e      	b.n	80090ca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f9b3 	bl	8009418 <USBD_CtlSendStatus>
      break;
 80090b2:	e00a      	b.n	80090ca <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f8e5 	bl	8009286 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80090bc:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <USBD_SetConfig+0x118>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff f9ef 	bl	80084a6 <USBD_ClrClassConfig>
      break;
 80090c8:	bf00      	nop
    }
  }
}
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200001fc 	.word	0x200001fc

080090d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d004      	beq.n	80090f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f8cc 	bl	8009286 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80090ee:	e021      	b.n	8009134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	db17      	blt.n	800912a <USBD_GetConfig+0x56>
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	dd02      	ble.n	8009104 <USBD_GetConfig+0x30>
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d00b      	beq.n	800911a <USBD_GetConfig+0x46>
 8009102:	e012      	b.n	800912a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3308      	adds	r3, #8
 800910e:	2201      	movs	r2, #1
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f922 	bl	800935c <USBD_CtlSendData>
      break;
 8009118:	e00c      	b.n	8009134 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	2201      	movs	r2, #1
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f91a 	bl	800935c <USBD_CtlSendData>
      break;
 8009128:	e004      	b.n	8009134 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8aa 	bl	8009286 <USBD_CtlError>
      break;
 8009132:	bf00      	nop
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800914c:	3b01      	subs	r3, #1
 800914e:	2b02      	cmp	r3, #2
 8009150:	d81e      	bhi.n	8009190 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	88db      	ldrh	r3, [r3, #6]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d004      	beq.n	8009164 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f892 	bl	8009286 <USBD_CtlError>
      break;
 8009162:	e01a      	b.n	800919a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f043 0202 	orr.w	r2, r3, #2
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	330c      	adds	r3, #12
 8009184:	2202      	movs	r2, #2
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8e7 	bl	800935c <USBD_CtlSendData>
    break;
 800918e:	e004      	b.n	800919a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f877 	bl	8009286 <USBD_CtlError>
    break;
 8009198:	bf00      	nop
  }
}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	885b      	ldrh	r3, [r3, #2]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d106      	bne.n	80091c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f92b 	bl	8009418 <USBD_CtlSendStatus>
  }

}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091da:	3b01      	subs	r3, #1
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d80b      	bhi.n	80091f8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	885b      	ldrh	r3, [r3, #2]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d10c      	bne.n	8009202 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f911 	bl	8009418 <USBD_CtlSendStatus>
    }
    break;
 80091f6:	e004      	b.n	8009202 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f843 	bl	8009286 <USBD_CtlError>
    break;
 8009200:	e000      	b.n	8009204 <USBD_ClrFeature+0x3a>
    break;
 8009202:	bf00      	nop
  }
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781a      	ldrb	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	785a      	ldrb	r2, [r3, #1]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	3302      	adds	r3, #2
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b29a      	uxth	r2, r3
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	3303      	adds	r3, #3
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b29b      	uxth	r3, r3
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	b29b      	uxth	r3, r3
 800923a:	4413      	add	r3, r2
 800923c:	b29a      	uxth	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	3304      	adds	r3, #4
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	b29a      	uxth	r2, r3
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	3305      	adds	r3, #5
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	021b      	lsls	r3, r3, #8
 8009254:	b29b      	uxth	r3, r3
 8009256:	4413      	add	r3, r2
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	3306      	adds	r3, #6
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b29a      	uxth	r2, r3
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	3307      	adds	r3, #7
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	b29b      	uxth	r3, r3
 8009272:	4413      	add	r3, r2
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	80da      	strh	r2, [r3, #6]

}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009290:	2180      	movs	r1, #128	; 0x80
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f003 fe52 	bl	800cf3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009298:	2100      	movs	r1, #0
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f003 fe4e 	bl	800cf3c <USBD_LL_StallEP>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d032      	beq.n	8009324 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 f834 	bl	800932c <USBD_GetLen>
 80092c4:	4603      	mov	r3, r0
 80092c6:	3301      	adds	r3, #1
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	75fa      	strb	r2, [r7, #23]
 80092d8:	461a      	mov	r2, r3
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	4413      	add	r3, r2
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	75fa      	strb	r2, [r7, #23]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	4413      	add	r3, r2
 80092f0:	2203      	movs	r2, #3
 80092f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092f4:	e012      	b.n	800931c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	60fa      	str	r2, [r7, #12]
 80092fc:	7dfa      	ldrb	r2, [r7, #23]
 80092fe:	1c51      	adds	r1, r2, #1
 8009300:	75f9      	strb	r1, [r7, #23]
 8009302:	4611      	mov	r1, r2
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	440a      	add	r2, r1
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	75fa      	strb	r2, [r7, #23]
 8009312:	461a      	mov	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4413      	add	r3, r2
 8009318:	2200      	movs	r2, #0
 800931a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e8      	bne.n	80092f6 <USBD_GetString+0x4e>
    }
  }
}
 8009324:	bf00      	nop
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009338:	e005      	b.n	8009346 <USBD_GetLen+0x1a>
    {
        len++;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	3301      	adds	r3, #1
 800933e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3301      	adds	r3, #1
 8009344:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1f5      	bne.n	800933a <USBD_GetLen+0xe>
    }

    return len;
 800934e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2202      	movs	r2, #2
 800936e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009372:	88fa      	ldrh	r2, [r7, #6]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009378:	88fa      	ldrh	r2, [r7, #6]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	2100      	movs	r1, #0
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f003 fe62 	bl	800d04e <USBD_LL_Transmit>

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	2100      	movs	r1, #0
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f003 fe50 	bl	800d04e <USBD_LL_Transmit>

  return USBD_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2203      	movs	r2, #3
 80093ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80093ce:	88fa      	ldrh	r2, [r7, #6]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80093d6:	88fa      	ldrh	r2, [r7, #6]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	2100      	movs	r1, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f003 fe55 	bl	800d094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4613      	mov	r3, r2
 8009400:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	2100      	movs	r1, #0
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f003 fe43 	bl	800d094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2204      	movs	r2, #4
 8009424:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009428:	2300      	movs	r3, #0
 800942a:	2200      	movs	r2, #0
 800942c:	2100      	movs	r1, #0
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f003 fe0d 	bl	800d04e <USBD_LL_Transmit>

  return USBD_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2205      	movs	r2, #5
 800944a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800944e:	2300      	movs	r3, #0
 8009450:	2200      	movs	r2, #0
 8009452:	2100      	movs	r1, #0
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f003 fe1d 	bl	800d094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	4a08      	ldr	r2, [pc, #32]	; (8009494 <disk_status+0x30>)
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	79fa      	ldrb	r2, [r7, #7]
 800947c:	4905      	ldr	r1, [pc, #20]	; (8009494 <disk_status+0x30>)
 800947e:	440a      	add	r2, r1
 8009480:	7a12      	ldrb	r2, [r2, #8]
 8009482:	4610      	mov	r0, r2
 8009484:	4798      	blx	r3
 8009486:	4603      	mov	r3, r0
 8009488:	73fb      	strb	r3, [r7, #15]
  return stat;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20000228 	.word	0x20000228

08009498 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	4a0d      	ldr	r2, [pc, #52]	; (80094e0 <disk_initialize+0x48>)
 80094aa:	5cd3      	ldrb	r3, [r2, r3]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d111      	bne.n	80094d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	4a0b      	ldr	r2, [pc, #44]	; (80094e0 <disk_initialize+0x48>)
 80094b4:	2101      	movs	r1, #1
 80094b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <disk_initialize+0x48>)
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	79fa      	ldrb	r2, [r7, #7]
 80094c6:	4906      	ldr	r1, [pc, #24]	; (80094e0 <disk_initialize+0x48>)
 80094c8:	440a      	add	r2, r1
 80094ca:	7a12      	ldrb	r2, [r2, #8]
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000228 	.word	0x20000228

080094e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4a0a      	ldr	r2, [pc, #40]	; (8009520 <disk_read+0x3c>)
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	689c      	ldr	r4, [r3, #8]
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4a07      	ldr	r2, [pc, #28]	; (8009520 <disk_read+0x3c>)
 8009504:	4413      	add	r3, r2
 8009506:	7a18      	ldrb	r0, [r3, #8]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	68b9      	ldr	r1, [r7, #8]
 800950e:	47a0      	blx	r4
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]
  return res;
 8009514:	7dfb      	ldrb	r3, [r7, #23]
}
 8009516:	4618      	mov	r0, r3
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	bd90      	pop	{r4, r7, pc}
 800951e:	bf00      	nop
 8009520:	20000228 	.word	0x20000228

08009524 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009524:	b590      	push	{r4, r7, lr}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	60b9      	str	r1, [r7, #8]
 800952c:	607a      	str	r2, [r7, #4]
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4a0a      	ldr	r2, [pc, #40]	; (8009560 <disk_write+0x3c>)
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	68dc      	ldr	r4, [r3, #12]
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	4a07      	ldr	r2, [pc, #28]	; (8009560 <disk_write+0x3c>)
 8009544:	4413      	add	r3, r2
 8009546:	7a18      	ldrb	r0, [r3, #8]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68b9      	ldr	r1, [r7, #8]
 800954e:	47a0      	blx	r4
 8009550:	4603      	mov	r3, r0
 8009552:	75fb      	strb	r3, [r7, #23]
  return res;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
}
 8009556:	4618      	mov	r0, r3
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	bd90      	pop	{r4, r7, pc}
 800955e:	bf00      	nop
 8009560:	20000228 	.word	0x20000228

08009564 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	603a      	str	r2, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
 8009570:	460b      	mov	r3, r1
 8009572:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	4a09      	ldr	r2, [pc, #36]	; (800959c <disk_ioctl+0x38>)
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	79fa      	ldrb	r2, [r7, #7]
 8009582:	4906      	ldr	r1, [pc, #24]	; (800959c <disk_ioctl+0x38>)
 8009584:	440a      	add	r2, r1
 8009586:	7a10      	ldrb	r0, [r2, #8]
 8009588:	79b9      	ldrb	r1, [r7, #6]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]
  return res;
 8009592:	7bfb      	ldrb	r3, [r7, #15]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20000228 	.word	0x20000228

080095a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3301      	adds	r3, #1
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80095b0:	89fb      	ldrh	r3, [r7, #14]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	b21a      	sxth	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	b21b      	sxth	r3, r3
 80095bc:	4313      	orrs	r3, r2
 80095be:	b21b      	sxth	r3, r3
 80095c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095c2:	89fb      	ldrh	r3, [r7, #14]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3303      	adds	r3, #3
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	3202      	adds	r2, #2
 80095e8:	7812      	ldrb	r2, [r2, #0]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	3201      	adds	r2, #1
 80095f6:	7812      	ldrb	r2, [r2, #0]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	021b      	lsls	r3, r3, #8
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	7812      	ldrb	r2, [r2, #0]
 8009604:	4313      	orrs	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
	return rv;
 8009608:	68fb      	ldr	r3, [r7, #12]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	887a      	ldrh	r2, [r7, #2]
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]
 800962e:	887b      	ldrh	r3, [r7, #2]
 8009630:	0a1b      	lsrs	r3, r3, #8
 8009632:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	607a      	str	r2, [r7, #4]
 800963a:	887a      	ldrh	r2, [r7, #2]
 800963c:	b2d2      	uxtb	r2, r2
 800963e:	701a      	strb	r2, [r3, #0]
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	b2d2      	uxtb	r2, r2
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	0a1b      	lsrs	r3, r3, #8
 8009666:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	607a      	str	r2, [r7, #4]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	0a1b      	lsrs	r3, r3, #8
 800968a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	607a      	str	r2, [r7, #4]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	701a      	strb	r2, [r3, #0]
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00d      	beq.n	80096da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	1c53      	adds	r3, r2, #1
 80096c2:	613b      	str	r3, [r7, #16]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	1c59      	adds	r1, r3, #1
 80096c8:	6179      	str	r1, [r7, #20]
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	607b      	str	r3, [r7, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f1      	bne.n	80096be <mem_cpy+0x1a>
	}
}
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80096e6:	b480      	push	{r7}
 80096e8:	b087      	sub	sp, #28
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	617a      	str	r2, [r7, #20]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3b01      	subs	r3, #1
 8009706:	607b      	str	r3, [r7, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1f3      	bne.n	80096f6 <mem_set+0x10>
}
 800970e:	bf00      	nop
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800971a:	b480      	push	{r7}
 800971c:	b089      	sub	sp, #36	; 0x24
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	61fb      	str	r3, [r7, #28]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	61fa      	str	r2, [r7, #28]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	4619      	mov	r1, r3
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	61ba      	str	r2, [r7, #24]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	1acb      	subs	r3, r1, r3
 8009746:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3b01      	subs	r3, #1
 800974c:	607b      	str	r3, [r7, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <mem_cmp+0x40>
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0eb      	beq.n	8009732 <mem_cmp+0x18>

	return r;
 800975a:	697b      	ldr	r3, [r7, #20]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3724      	adds	r7, #36	; 0x24
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009772:	e002      	b.n	800977a <chk_chr+0x12>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3301      	adds	r3, #1
 8009778:	607b      	str	r3, [r7, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <chk_chr+0x26>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	4293      	cmp	r3, r2
 800978c:	d1f2      	bne.n	8009774 <chk_chr+0xc>
	return *str;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	781b      	ldrb	r3, [r3, #0]
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
	...

080097a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097aa:	2300      	movs	r3, #0
 80097ac:	60bb      	str	r3, [r7, #8]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	e029      	b.n	8009808 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80097b4:	4a27      	ldr	r2, [pc, #156]	; (8009854 <chk_lock+0xb4>)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	011b      	lsls	r3, r3, #4
 80097ba:	4413      	add	r3, r2
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d01d      	beq.n	80097fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097c2:	4a24      	ldr	r2, [pc, #144]	; (8009854 <chk_lock+0xb4>)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	4413      	add	r3, r2
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d116      	bne.n	8009802 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80097d4:	4a1f      	ldr	r2, [pc, #124]	; (8009854 <chk_lock+0xb4>)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	4413      	add	r3, r2
 80097dc:	3304      	adds	r3, #4
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d10c      	bne.n	8009802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097e8:	4a1a      	ldr	r2, [pc, #104]	; (8009854 <chk_lock+0xb4>)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	011b      	lsls	r3, r3, #4
 80097ee:	4413      	add	r3, r2
 80097f0:	3308      	adds	r3, #8
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d102      	bne.n	8009802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097fc:	e007      	b.n	800980e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80097fe:	2301      	movs	r3, #1
 8009800:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3301      	adds	r3, #1
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d9d2      	bls.n	80097b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b02      	cmp	r3, #2
 8009812:	d109      	bne.n	8009828 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <chk_lock+0x80>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b02      	cmp	r3, #2
 800981e:	d101      	bne.n	8009824 <chk_lock+0x84>
 8009820:	2300      	movs	r3, #0
 8009822:	e010      	b.n	8009846 <chk_lock+0xa6>
 8009824:	2312      	movs	r3, #18
 8009826:	e00e      	b.n	8009846 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d108      	bne.n	8009840 <chk_lock+0xa0>
 800982e:	4a09      	ldr	r2, [pc, #36]	; (8009854 <chk_lock+0xb4>)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	4413      	add	r3, r2
 8009836:	330c      	adds	r3, #12
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800983e:	d101      	bne.n	8009844 <chk_lock+0xa4>
 8009840:	2310      	movs	r3, #16
 8009842:	e000      	b.n	8009846 <chk_lock+0xa6>
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000208 	.word	0x20000208

08009858 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800985e:	2300      	movs	r3, #0
 8009860:	607b      	str	r3, [r7, #4]
 8009862:	e002      	b.n	800986a <enq_lock+0x12>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3301      	adds	r3, #1
 8009868:	607b      	str	r3, [r7, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d806      	bhi.n	800987e <enq_lock+0x26>
 8009870:	4a09      	ldr	r2, [pc, #36]	; (8009898 <enq_lock+0x40>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	4413      	add	r3, r2
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1f2      	bne.n	8009864 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b02      	cmp	r3, #2
 8009882:	bf14      	ite	ne
 8009884:	2301      	movne	r3, #1
 8009886:	2300      	moveq	r3, #0
 8009888:	b2db      	uxtb	r3, r3
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	20000208 	.word	0x20000208

0800989c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	e01f      	b.n	80098ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80098ac:	4a41      	ldr	r2, [pc, #260]	; (80099b4 <inc_lock+0x118>)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	4413      	add	r3, r2
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d113      	bne.n	80098e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80098be:	4a3d      	ldr	r2, [pc, #244]	; (80099b4 <inc_lock+0x118>)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	4413      	add	r3, r2
 80098c6:	3304      	adds	r3, #4
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d109      	bne.n	80098e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80098d2:	4a38      	ldr	r2, [pc, #224]	; (80099b4 <inc_lock+0x118>)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	4413      	add	r3, r2
 80098da:	3308      	adds	r3, #8
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d006      	beq.n	80098f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d9dc      	bls.n	80098ac <inc_lock+0x10>
 80098f2:	e000      	b.n	80098f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80098f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d132      	bne.n	8009962 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098fc:	2300      	movs	r3, #0
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e002      	b.n	8009908 <inc_lock+0x6c>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d806      	bhi.n	800991c <inc_lock+0x80>
 800990e:	4a29      	ldr	r2, [pc, #164]	; (80099b4 <inc_lock+0x118>)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	4413      	add	r3, r2
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1f2      	bne.n	8009902 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d101      	bne.n	8009926 <inc_lock+0x8a>
 8009922:	2300      	movs	r3, #0
 8009924:	e040      	b.n	80099a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4922      	ldr	r1, [pc, #136]	; (80099b4 <inc_lock+0x118>)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	011b      	lsls	r3, r3, #4
 8009930:	440b      	add	r3, r1
 8009932:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	491e      	ldr	r1, [pc, #120]	; (80099b4 <inc_lock+0x118>)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	011b      	lsls	r3, r3, #4
 800993e:	440b      	add	r3, r1
 8009940:	3304      	adds	r3, #4
 8009942:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	695a      	ldr	r2, [r3, #20]
 8009948:	491a      	ldr	r1, [pc, #104]	; (80099b4 <inc_lock+0x118>)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	440b      	add	r3, r1
 8009950:	3308      	adds	r3, #8
 8009952:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009954:	4a17      	ldr	r2, [pc, #92]	; (80099b4 <inc_lock+0x118>)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	4413      	add	r3, r2
 800995c:	330c      	adds	r3, #12
 800995e:	2200      	movs	r2, #0
 8009960:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <inc_lock+0xe0>
 8009968:	4a12      	ldr	r2, [pc, #72]	; (80099b4 <inc_lock+0x118>)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	4413      	add	r3, r2
 8009970:	330c      	adds	r3, #12
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <inc_lock+0xe0>
 8009978:	2300      	movs	r3, #0
 800997a:	e015      	b.n	80099a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d108      	bne.n	8009994 <inc_lock+0xf8>
 8009982:	4a0c      	ldr	r2, [pc, #48]	; (80099b4 <inc_lock+0x118>)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	011b      	lsls	r3, r3, #4
 8009988:	4413      	add	r3, r2
 800998a:	330c      	adds	r3, #12
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	3301      	adds	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	e001      	b.n	8009998 <inc_lock+0xfc>
 8009994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009998:	4906      	ldr	r1, [pc, #24]	; (80099b4 <inc_lock+0x118>)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	011b      	lsls	r3, r3, #4
 800999e:	440b      	add	r3, r1
 80099a0:	330c      	adds	r3, #12
 80099a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3301      	adds	r3, #1
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	20000208 	.word	0x20000208

080099b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d825      	bhi.n	8009a18 <dec_lock+0x60>
		n = Files[i].ctr;
 80099cc:	4a17      	ldr	r2, [pc, #92]	; (8009a2c <dec_lock+0x74>)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	4413      	add	r3, r2
 80099d4:	330c      	adds	r3, #12
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80099da:	89fb      	ldrh	r3, [r7, #14]
 80099dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e0:	d101      	bne.n	80099e6 <dec_lock+0x2e>
 80099e2:	2300      	movs	r3, #0
 80099e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80099e6:	89fb      	ldrh	r3, [r7, #14]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <dec_lock+0x3a>
 80099ec:	89fb      	ldrh	r3, [r7, #14]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80099f2:	4a0e      	ldr	r2, [pc, #56]	; (8009a2c <dec_lock+0x74>)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	011b      	lsls	r3, r3, #4
 80099f8:	4413      	add	r3, r2
 80099fa:	330c      	adds	r3, #12
 80099fc:	89fa      	ldrh	r2, [r7, #14]
 80099fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009a00:	89fb      	ldrh	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d105      	bne.n	8009a12 <dec_lock+0x5a>
 8009a06:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <dec_lock+0x74>)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	4413      	add	r3, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	737b      	strb	r3, [r7, #13]
 8009a16:	e001      	b.n	8009a1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a18:	2302      	movs	r3, #2
 8009a1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	20000208 	.word	0x20000208

08009a30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e010      	b.n	8009a60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a3e:	4a0d      	ldr	r2, [pc, #52]	; (8009a74 <clear_lock+0x44>)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	4413      	add	r3, r2
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d105      	bne.n	8009a5a <clear_lock+0x2a>
 8009a4e:	4a09      	ldr	r2, [pc, #36]	; (8009a74 <clear_lock+0x44>)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	4413      	add	r3, r2
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d9eb      	bls.n	8009a3e <clear_lock+0xe>
	}
}
 8009a66:	bf00      	nop
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000208 	.word	0x20000208

08009a78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	78db      	ldrb	r3, [r3, #3]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d034      	beq.n	8009af6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7858      	ldrb	r0, [r3, #1]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	f7ff fd40 	bl	8009524 <disk_write>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]
 8009aae:	e022      	b.n	8009af6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	1ad2      	subs	r2, r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d217      	bcs.n	8009af6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	789b      	ldrb	r3, [r3, #2]
 8009aca:	613b      	str	r3, [r7, #16]
 8009acc:	e010      	b.n	8009af0 <sync_window+0x78>
					wsect += fs->fsize;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	7858      	ldrb	r0, [r3, #1]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	f7ff fd1d 	bl	8009524 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	613b      	str	r3, [r7, #16]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d8eb      	bhi.n	8009ace <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d01b      	beq.n	8009b50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff ffad 	bl	8009a78 <sync_window>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d113      	bne.n	8009b50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7858      	ldrb	r0, [r3, #1]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b32:	2301      	movs	r3, #1
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	f7ff fcd5 	bl	80094e4 <disk_read>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b40:	f04f 33ff 	mov.w	r3, #4294967295
 8009b44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ff87 	bl	8009a78 <sync_window>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d158      	bne.n	8009c26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d148      	bne.n	8009c0e <sync_fs+0xb2>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	791b      	ldrb	r3, [r3, #4]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d144      	bne.n	8009c0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3330      	adds	r3, #48	; 0x30
 8009b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fda9 	bl	80096e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3330      	adds	r3, #48	; 0x30
 8009b98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fd38 	bl	8009616 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3330      	adds	r3, #48	; 0x30
 8009baa:	4921      	ldr	r1, [pc, #132]	; (8009c30 <sync_fs+0xd4>)
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fd4d 	bl	800964c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3330      	adds	r3, #48	; 0x30
 8009bb6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009bba:	491e      	ldr	r1, [pc, #120]	; (8009c34 <sync_fs+0xd8>)
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff fd45 	bl	800964c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3330      	adds	r3, #48	; 0x30
 8009bc6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7ff fd3b 	bl	800964c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3330      	adds	r3, #48	; 0x30
 8009bda:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	4619      	mov	r1, r3
 8009be4:	4610      	mov	r0, r2
 8009be6:	f7ff fd31 	bl	800964c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	7858      	ldrb	r0, [r3, #1]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c02:	2301      	movs	r3, #1
 8009c04:	f7ff fc8e 	bl	8009524 <disk_write>
			fs->fsi_flag = 0;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	2200      	movs	r2, #0
 8009c14:	2100      	movs	r1, #0
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7ff fca4 	bl	8009564 <disk_ioctl>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <sync_fs+0xca>
 8009c22:	2301      	movs	r3, #1
 8009c24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	41615252 	.word	0x41615252
 8009c34:	61417272 	.word	0x61417272

08009c38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	3b02      	subs	r3, #2
 8009c46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	3b02      	subs	r3, #2
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d301      	bcc.n	8009c58 <clust2sect+0x20>
 8009c54:	2300      	movs	r3, #0
 8009c56:	e008      	b.n	8009c6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	895b      	ldrh	r3, [r3, #10]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	fb03 f202 	mul.w	r2, r3, r2
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c68:	4413      	add	r3, r2
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d904      	bls.n	8009c96 <get_fat+0x20>
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e08c      	b.n	8009db6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d045      	beq.n	8009d36 <get_fat+0xc0>
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d05d      	beq.n	8009d6a <get_fat+0xf4>
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d177      	bne.n	8009da2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	085b      	lsrs	r3, r3, #1
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6a1a      	ldr	r2, [r3, #32]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	0a5b      	lsrs	r3, r3, #9
 8009cc8:	4413      	add	r3, r2
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6938      	ldr	r0, [r7, #16]
 8009cce:	f7ff ff17 	bl	8009b00 <move_window>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d167      	bne.n	8009da8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	60fa      	str	r2, [r7, #12]
 8009cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	6a1a      	ldr	r2, [r3, #32]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	0a5b      	lsrs	r3, r3, #9
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6938      	ldr	r0, [r7, #16]
 8009cfa:	f7ff ff01 	bl	8009b00 <move_window>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d153      	bne.n	8009dac <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d12:	021b      	lsls	r3, r3, #8
 8009d14:	461a      	mov	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <get_fat+0xb6>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	091b      	lsrs	r3, r3, #4
 8009d2a:	e002      	b.n	8009d32 <get_fat+0xbc>
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d32:	617b      	str	r3, [r7, #20]
			break;
 8009d34:	e03f      	b.n	8009db6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	6a1a      	ldr	r2, [r3, #32]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	4413      	add	r3, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	6938      	ldr	r0, [r7, #16]
 8009d44:	f7ff fedc 	bl	8009b00 <move_window>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d130      	bne.n	8009db0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009d5c:	4413      	add	r3, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff fc1e 	bl	80095a0 <ld_word>
 8009d64:	4603      	mov	r3, r0
 8009d66:	617b      	str	r3, [r7, #20]
			break;
 8009d68:	e025      	b.n	8009db6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6a1a      	ldr	r2, [r3, #32]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	09db      	lsrs	r3, r3, #7
 8009d72:	4413      	add	r3, r2
 8009d74:	4619      	mov	r1, r3
 8009d76:	6938      	ldr	r0, [r7, #16]
 8009d78:	f7ff fec2 	bl	8009b00 <move_window>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d118      	bne.n	8009db4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009d90:	4413      	add	r3, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff fc1c 	bl	80095d0 <ld_dword>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009d9e:	617b      	str	r3, [r7, #20]
			break;
 8009da0:	e009      	b.n	8009db6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009da2:	2301      	movs	r3, #1
 8009da4:	617b      	str	r3, [r7, #20]
 8009da6:	e006      	b.n	8009db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009da8:	bf00      	nop
 8009daa:	e004      	b.n	8009db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dac:	bf00      	nop
 8009dae:	e002      	b.n	8009db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009db0:	bf00      	nop
 8009db2:	e000      	b.n	8009db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009db4:	bf00      	nop
		}
	}

	return val;
 8009db6:	697b      	ldr	r3, [r7, #20]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009dc0:	b590      	push	{r4, r7, lr}
 8009dc2:	b089      	sub	sp, #36	; 0x24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	f240 80d6 	bls.w	8009f84 <put_fat+0x1c4>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	f080 80d0 	bcs.w	8009f84 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d073      	beq.n	8009ed4 <put_fat+0x114>
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	f000 8091 	beq.w	8009f14 <put_fat+0x154>
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	f040 80c6 	bne.w	8009f84 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	61bb      	str	r3, [r7, #24]
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	085b      	lsrs	r3, r3, #1
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	4413      	add	r3, r2
 8009e04:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a1a      	ldr	r2, [r3, #32]
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	0a5b      	lsrs	r3, r3, #9
 8009e0e:	4413      	add	r3, r2
 8009e10:	4619      	mov	r1, r3
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7ff fe74 	bl	8009b00 <move_window>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e1c:	7ffb      	ldrb	r3, [r7, #31]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f040 80a9 	bne.w	8009f76 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	1c59      	adds	r1, r3, #1
 8009e2e:	61b9      	str	r1, [r7, #24]
 8009e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e34:	4413      	add	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00d      	beq.n	8009e5e <put_fat+0x9e>
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	b25b      	sxtb	r3, r3
 8009e48:	f003 030f 	and.w	r3, r3, #15
 8009e4c:	b25a      	sxtb	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	011b      	lsls	r3, r3, #4
 8009e54:	b25b      	sxtb	r3, r3
 8009e56:	4313      	orrs	r3, r2
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	e001      	b.n	8009e62 <put_fat+0xa2>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a1a      	ldr	r2, [r3, #32]
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	0a5b      	lsrs	r3, r3, #9
 8009e74:	4413      	add	r3, r2
 8009e76:	4619      	mov	r1, r3
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f7ff fe41 	bl	8009b00 <move_window>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e82:	7ffb      	ldrb	r3, [r7, #31]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d178      	bne.n	8009f7a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e94:	4413      	add	r3, r2
 8009e96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <put_fat+0xea>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	091b      	lsrs	r3, r3, #4
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	e00e      	b.n	8009ec8 <put_fat+0x108>
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b25b      	sxtb	r3, r3
 8009eb0:	f023 030f 	bic.w	r3, r3, #15
 8009eb4:	b25a      	sxtb	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	0a1b      	lsrs	r3, r3, #8
 8009eba:	b25b      	sxtb	r3, r3
 8009ebc:	f003 030f 	and.w	r3, r3, #15
 8009ec0:	b25b      	sxtb	r3, r3
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	b25b      	sxtb	r3, r3
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	70da      	strb	r2, [r3, #3]
			break;
 8009ed2:	e057      	b.n	8009f84 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6a1a      	ldr	r2, [r3, #32]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	0a1b      	lsrs	r3, r3, #8
 8009edc:	4413      	add	r3, r2
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f7ff fe0d 	bl	8009b00 <move_window>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009eea:	7ffb      	ldrb	r3, [r7, #31]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d146      	bne.n	8009f7e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009efe:	4413      	add	r3, r2
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	b292      	uxth	r2, r2
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff fb85 	bl	8009616 <st_word>
			fs->wflag = 1;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	70da      	strb	r2, [r3, #3]
			break;
 8009f12:	e037      	b.n	8009f84 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a1a      	ldr	r2, [r3, #32]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	09db      	lsrs	r3, r3, #7
 8009f1c:	4413      	add	r3, r2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f7ff fded 	bl	8009b00 <move_window>
 8009f26:	4603      	mov	r3, r0
 8009f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f2a:	7ffb      	ldrb	r3, [r7, #31]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d128      	bne.n	8009f82 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009f44:	4413      	add	r3, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fb42 	bl	80095d0 <ld_dword>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f52:	4323      	orrs	r3, r4
 8009f54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009f64:	4413      	add	r3, r2
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff fb6f 	bl	800964c <st_dword>
			fs->wflag = 1;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	70da      	strb	r2, [r3, #3]
			break;
 8009f74:	e006      	b.n	8009f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009f76:	bf00      	nop
 8009f78:	e004      	b.n	8009f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009f7a:	bf00      	nop
 8009f7c:	e002      	b.n	8009f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009f7e:	bf00      	nop
 8009f80:	e000      	b.n	8009f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009f82:	bf00      	nop
		}
	}
	return res;
 8009f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3724      	adds	r7, #36	; 0x24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd90      	pop	{r4, r7, pc}

08009f8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b088      	sub	sp, #32
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d904      	bls.n	8009fb4 <remove_chain+0x26>
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d301      	bcc.n	8009fb8 <remove_chain+0x2a>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e04b      	b.n	800a050 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00c      	beq.n	8009fd8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	69b8      	ldr	r0, [r7, #24]
 8009fc6:	f7ff fefb 	bl	8009dc0 <put_fat>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009fce:	7ffb      	ldrb	r3, [r7, #31]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <remove_chain+0x4a>
 8009fd4:	7ffb      	ldrb	r3, [r7, #31]
 8009fd6:	e03b      	b.n	800a050 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009fd8:	68b9      	ldr	r1, [r7, #8]
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7ff fe4b 	bl	8009c76 <get_fat>
 8009fe0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d031      	beq.n	800a04c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d101      	bne.n	8009ff2 <remove_chain+0x64>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	e02e      	b.n	800a050 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff8:	d101      	bne.n	8009ffe <remove_chain+0x70>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e028      	b.n	800a050 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009ffe:	2200      	movs	r2, #0
 800a000:	68b9      	ldr	r1, [r7, #8]
 800a002:	69b8      	ldr	r0, [r7, #24]
 800a004:	f7ff fedc 	bl	8009dc0 <put_fat>
 800a008:	4603      	mov	r3, r0
 800a00a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a00c:	7ffb      	ldrb	r3, [r7, #31]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <remove_chain+0x88>
 800a012:	7ffb      	ldrb	r3, [r7, #31]
 800a014:	e01c      	b.n	800a050 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	691a      	ldr	r2, [r3, #16]
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	3b02      	subs	r3, #2
 800a020:	429a      	cmp	r2, r3
 800a022:	d20b      	bcs.n	800a03c <remove_chain+0xae>
			fs->free_clst++;
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	791b      	ldrb	r3, [r3, #4]
 800a032:	f043 0301 	orr.w	r3, r3, #1
 800a036:	b2da      	uxtb	r2, r3
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	429a      	cmp	r2, r3
 800a048:	d3c6      	bcc.n	8009fd8 <remove_chain+0x4a>
 800a04a:	e000      	b.n	800a04e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a04c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3720      	adds	r7, #32
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10d      	bne.n	800a08a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <create_chain+0x2c>
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	429a      	cmp	r2, r3
 800a082:	d31b      	bcc.n	800a0bc <create_chain+0x64>
 800a084:	2301      	movs	r3, #1
 800a086:	61bb      	str	r3, [r7, #24]
 800a088:	e018      	b.n	800a0bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fdf2 	bl	8009c76 <get_fat>
 800a092:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d801      	bhi.n	800a09e <create_chain+0x46>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e070      	b.n	800a180 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a4:	d101      	bne.n	800a0aa <create_chain+0x52>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	e06a      	b.n	800a180 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d201      	bcs.n	800a0b8 <create_chain+0x60>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	e063      	b.n	800a180 <create_chain+0x128>
		scl = clst;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d307      	bcc.n	800a0e0 <create_chain+0x88>
				ncl = 2;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d901      	bls.n	800a0e0 <create_chain+0x88>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e04f      	b.n	800a180 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a0e0:	69f9      	ldr	r1, [r7, #28]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff fdc7 	bl	8009c76 <get_fat>
 800a0e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00e      	beq.n	800a10e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d003      	beq.n	800a0fe <create_chain+0xa6>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d101      	bne.n	800a102 <create_chain+0xaa>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	e03e      	b.n	800a180 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	429a      	cmp	r2, r3
 800a108:	d1da      	bne.n	800a0c0 <create_chain+0x68>
 800a10a:	2300      	movs	r3, #0
 800a10c:	e038      	b.n	800a180 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a10e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a110:	f04f 32ff 	mov.w	r2, #4294967295
 800a114:	69f9      	ldr	r1, [r7, #28]
 800a116:	6938      	ldr	r0, [r7, #16]
 800a118:	f7ff fe52 	bl	8009dc0 <put_fat>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d109      	bne.n	800a13a <create_chain+0xe2>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d006      	beq.n	800a13a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6938      	ldr	r0, [r7, #16]
 800a132:	f7ff fe45 	bl	8009dc0 <put_fat>
 800a136:	4603      	mov	r3, r0
 800a138:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d116      	bne.n	800a16e <create_chain+0x116>
		fs->last_clst = ncl;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	69fa      	ldr	r2, [r7, #28]
 800a144:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	3b02      	subs	r3, #2
 800a150:	429a      	cmp	r2, r3
 800a152:	d804      	bhi.n	800a15e <create_chain+0x106>
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	1e5a      	subs	r2, r3, #1
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	791b      	ldrb	r3, [r3, #4]
 800a162:	f043 0301 	orr.w	r3, r3, #1
 800a166:	b2da      	uxtb	r2, r3
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	711a      	strb	r2, [r3, #4]
 800a16c:	e007      	b.n	800a17e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d102      	bne.n	800a17a <create_chain+0x122>
 800a174:	f04f 33ff 	mov.w	r3, #4294967295
 800a178:	e000      	b.n	800a17c <create_chain+0x124>
 800a17a:	2301      	movs	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a17e:	69fb      	ldr	r3, [r7, #28]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	3304      	adds	r3, #4
 800a19e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	0a5b      	lsrs	r3, r3, #9
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	8952      	ldrh	r2, [r2, #10]
 800a1a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	1d1a      	adds	r2, r3, #4
 800a1b2:	613a      	str	r2, [r7, #16]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d101      	bne.n	800a1c2 <clmt_clust+0x3a>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e010      	b.n	800a1e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d307      	bcc.n	800a1da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1d8:	e7e9      	b.n	800a1ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a1da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4413      	add	r3, r2
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	371c      	adds	r7, #28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a206:	d204      	bcs.n	800a212 <dir_sdi+0x22>
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	f003 031f 	and.w	r3, r3, #31
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a212:	2302      	movs	r3, #2
 800a214:	e063      	b.n	800a2de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <dir_sdi+0x46>
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d902      	bls.n	800a236 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10c      	bne.n	800a256 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	095b      	lsrs	r3, r3, #5
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	8912      	ldrh	r2, [r2, #8]
 800a244:	4293      	cmp	r3, r2
 800a246:	d301      	bcc.n	800a24c <dir_sdi+0x5c>
 800a248:	2302      	movs	r3, #2
 800a24a:	e048      	b.n	800a2de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	61da      	str	r2, [r3, #28]
 800a254:	e029      	b.n	800a2aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	895b      	ldrh	r3, [r3, #10]
 800a25a:	025b      	lsls	r3, r3, #9
 800a25c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a25e:	e019      	b.n	800a294 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6979      	ldr	r1, [r7, #20]
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fd06 	bl	8009c76 <get_fat>
 800a26a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a272:	d101      	bne.n	800a278 <dir_sdi+0x88>
 800a274:	2301      	movs	r3, #1
 800a276:	e032      	b.n	800a2de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d904      	bls.n	800a288 <dir_sdi+0x98>
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	429a      	cmp	r2, r3
 800a286:	d301      	bcc.n	800a28c <dir_sdi+0x9c>
 800a288:	2302      	movs	r3, #2
 800a28a:	e028      	b.n	800a2de <dir_sdi+0xee>
			ofs -= csz;
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d2e1      	bcs.n	800a260 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a29c:	6979      	ldr	r1, [r7, #20]
 800a29e:	6938      	ldr	r0, [r7, #16]
 800a2a0:	f7ff fcca 	bl	8009c38 <clust2sect>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <dir_sdi+0xcc>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e010      	b.n	800a2de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	69da      	ldr	r2, [r3, #28]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	0a5b      	lsrs	r3, r3, #9
 800a2c4:	441a      	add	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d6:	441a      	add	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b086      	sub	sp, #24
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	3320      	adds	r3, #32
 800a2fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <dir_next+0x28>
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a30c:	d301      	bcc.n	800a312 <dir_next+0x2c>
 800a30e:	2304      	movs	r3, #4
 800a310:	e0aa      	b.n	800a468 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f040 8098 	bne.w	800a44e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	095b      	lsrs	r3, r3, #5
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	8912      	ldrh	r2, [r2, #8]
 800a338:	4293      	cmp	r3, r2
 800a33a:	f0c0 8088 	bcc.w	800a44e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	61da      	str	r2, [r3, #28]
 800a344:	2304      	movs	r3, #4
 800a346:	e08f      	b.n	800a468 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	0a5b      	lsrs	r3, r3, #9
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	8952      	ldrh	r2, [r2, #10]
 800a350:	3a01      	subs	r2, #1
 800a352:	4013      	ands	r3, r2
 800a354:	2b00      	cmp	r3, #0
 800a356:	d17a      	bne.n	800a44e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	4619      	mov	r1, r3
 800a360:	4610      	mov	r0, r2
 800a362:	f7ff fc88 	bl	8009c76 <get_fat>
 800a366:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d801      	bhi.n	800a372 <dir_next+0x8c>
 800a36e:	2302      	movs	r3, #2
 800a370:	e07a      	b.n	800a468 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d101      	bne.n	800a37e <dir_next+0x98>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e074      	b.n	800a468 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	429a      	cmp	r2, r3
 800a386:	d358      	bcc.n	800a43a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d104      	bne.n	800a398 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	61da      	str	r2, [r3, #28]
 800a394:	2304      	movs	r3, #4
 800a396:	e067      	b.n	800a468 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	f7ff fe59 	bl	800a058 <create_chain>
 800a3a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <dir_next+0xcc>
 800a3ae:	2307      	movs	r3, #7
 800a3b0:	e05a      	b.n	800a468 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d101      	bne.n	800a3bc <dir_next+0xd6>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	e055      	b.n	800a468 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d101      	bne.n	800a3c8 <dir_next+0xe2>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e04f      	b.n	800a468 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff fb55 	bl	8009a78 <sync_window>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <dir_next+0xf2>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e047      	b.n	800a468 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3330      	adds	r3, #48	; 0x30
 800a3dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff f97f 	bl	80096e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	6979      	ldr	r1, [r7, #20]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff fc22 	bl	8009c38 <clust2sect>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a3fa:	e012      	b.n	800a422 <dir_next+0x13c>
						fs->wflag = 1;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2201      	movs	r2, #1
 800a400:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7ff fb38 	bl	8009a78 <sync_window>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <dir_next+0x12c>
 800a40e:	2301      	movs	r3, #1
 800a410:	e02a      	b.n	800a468 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	3301      	adds	r3, #1
 800a416:	613b      	str	r3, [r7, #16]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	62da      	str	r2, [r3, #44]	; 0x2c
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	895b      	ldrh	r3, [r3, #10]
 800a426:	461a      	mov	r2, r3
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d3e6      	bcc.n	800a3fc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	1ad2      	subs	r2, r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a440:	6979      	ldr	r1, [r7, #20]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff fbf8 	bl	8009c38 <clust2sect>
 800a448:	4602      	mov	r2, r0
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a460:	441a      	add	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a480:	2100      	movs	r1, #0
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff feb4 	bl	800a1f0 <dir_sdi>
 800a488:	4603      	mov	r3, r0
 800a48a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d12b      	bne.n	800a4ea <dir_alloc+0x7a>
		n = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	4619      	mov	r1, r3
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7ff fb2f 	bl	8009b00 <move_window>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d11d      	bne.n	800a4e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	2be5      	cmp	r3, #229	; 0xe5
 800a4b4:	d004      	beq.n	800a4c0 <dir_alloc+0x50>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d107      	bne.n	800a4d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	613b      	str	r3, [r7, #16]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d102      	bne.n	800a4d4 <dir_alloc+0x64>
 800a4ce:	e00c      	b.n	800a4ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff ff05 	bl	800a2e6 <dir_next>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0d7      	beq.n	800a496 <dir_alloc+0x26>
 800a4e6:	e000      	b.n	800a4ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a4e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	d101      	bne.n	800a4f4 <dir_alloc+0x84>
 800a4f0:	2307      	movs	r3, #7
 800a4f2:	75fb      	strb	r3, [r7, #23]
	return res;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	331a      	adds	r3, #26
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff f847 	bl	80095a0 <ld_word>
 800a512:	4603      	mov	r3, r0
 800a514:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d109      	bne.n	800a532 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	3314      	adds	r3, #20
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff f83c 	bl	80095a0 <ld_word>
 800a528:	4603      	mov	r3, r0
 800a52a:	041b      	lsls	r3, r3, #16
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a532:	68fb      	ldr	r3, [r7, #12]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	331a      	adds	r3, #26
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	b292      	uxth	r2, r2
 800a550:	4611      	mov	r1, r2
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff f85f 	bl	8009616 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d109      	bne.n	800a574 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	f103 0214 	add.w	r2, r3, #20
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	0c1b      	lsrs	r3, r3, #16
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7ff f851 	bl	8009616 <st_word>
	}
}
 800a574:	bf00      	nop
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a58a:	2100      	movs	r1, #0
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff fe2f 	bl	800a1f0 <dir_sdi>
 800a592:	4603      	mov	r3, r0
 800a594:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <dir_find+0x24>
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	e03e      	b.n	800a61e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6938      	ldr	r0, [r7, #16]
 800a5a8:	f7ff faaa 	bl	8009b00 <move_window>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d12f      	bne.n	800a616 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <dir_find+0x4e>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	75fb      	strb	r3, [r7, #23]
 800a5c8:	e028      	b.n	800a61c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	330b      	adds	r3, #11
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	330b      	adds	r3, #11
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <dir_find+0x86>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a18      	ldr	r0, [r3, #32]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3324      	adds	r3, #36	; 0x24
 800a5f4:	220b      	movs	r2, #11
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	f7ff f88f 	bl	800971a <mem_cmp>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00b      	beq.n	800a61a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a602:	2100      	movs	r1, #0
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff fe6e 	bl	800a2e6 <dir_next>
 800a60a:	4603      	mov	r3, r0
 800a60c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0c5      	beq.n	800a5a0 <dir_find+0x24>
 800a614:	e002      	b.n	800a61c <dir_find+0xa0>
		if (res != FR_OK) break;
 800a616:	bf00      	nop
 800a618:	e000      	b.n	800a61c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a61a:	bf00      	nop

	return res;
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a634:	2101      	movs	r1, #1
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff ff1a 	bl	800a470 <dir_alloc>
 800a63c:	4603      	mov	r3, r0
 800a63e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a640:	7bfb      	ldrb	r3, [r7, #15]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d11c      	bne.n	800a680 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	4619      	mov	r1, r3
 800a64c:	68b8      	ldr	r0, [r7, #8]
 800a64e:	f7ff fa57 	bl	8009b00 <move_window>
 800a652:	4603      	mov	r3, r0
 800a654:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d111      	bne.n	800a680 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	2220      	movs	r2, #32
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff f83e 	bl	80096e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a18      	ldr	r0, [r3, #32]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3324      	adds	r3, #36	; 0x24
 800a672:	220b      	movs	r2, #11
 800a674:	4619      	mov	r1, r3
 800a676:	f7ff f815 	bl	80096a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2201      	movs	r2, #1
 800a67e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a680:	7bfb      	ldrb	r3, [r7, #15]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b088      	sub	sp, #32
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3324      	adds	r3, #36	; 0x24
 800a6a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a6a2:	220b      	movs	r2, #11
 800a6a4:	2120      	movs	r1, #32
 800a6a6:	68b8      	ldr	r0, [r7, #8]
 800a6a8:	f7ff f81d 	bl	80096e6 <mem_set>
	si = i = 0; ni = 8;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	613b      	str	r3, [r7, #16]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	2308      	movs	r3, #8
 800a6b6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	617a      	str	r2, [r7, #20]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a6c6:	7ffb      	ldrb	r3, [r7, #31]
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	d94e      	bls.n	800a76a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a6cc:	7ffb      	ldrb	r3, [r7, #31]
 800a6ce:	2b2f      	cmp	r3, #47	; 0x2f
 800a6d0:	d006      	beq.n	800a6e0 <create_name+0x54>
 800a6d2:	7ffb      	ldrb	r3, [r7, #31]
 800a6d4:	2b5c      	cmp	r3, #92	; 0x5c
 800a6d6:	d110      	bne.n	800a6fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a6d8:	e002      	b.n	800a6e0 <create_name+0x54>
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b2f      	cmp	r3, #47	; 0x2f
 800a6ea:	d0f6      	beq.n	800a6da <create_name+0x4e>
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b5c      	cmp	r3, #92	; 0x5c
 800a6f6:	d0f0      	beq.n	800a6da <create_name+0x4e>
			break;
 800a6f8:	e038      	b.n	800a76c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a6fa:	7ffb      	ldrb	r3, [r7, #31]
 800a6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6fe:	d003      	beq.n	800a708 <create_name+0x7c>
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	429a      	cmp	r2, r3
 800a706:	d30c      	bcc.n	800a722 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	2b0b      	cmp	r3, #11
 800a70c:	d002      	beq.n	800a714 <create_name+0x88>
 800a70e:	7ffb      	ldrb	r3, [r7, #31]
 800a710:	2b2e      	cmp	r3, #46	; 0x2e
 800a712:	d001      	beq.n	800a718 <create_name+0x8c>
 800a714:	2306      	movs	r3, #6
 800a716:	e044      	b.n	800a7a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a718:	2308      	movs	r3, #8
 800a71a:	613b      	str	r3, [r7, #16]
 800a71c:	230b      	movs	r3, #11
 800a71e:	61bb      	str	r3, [r7, #24]
			continue;
 800a720:	e022      	b.n	800a768 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a726:	2b00      	cmp	r3, #0
 800a728:	da04      	bge.n	800a734 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a72a:	7ffb      	ldrb	r3, [r7, #31]
 800a72c:	3b80      	subs	r3, #128	; 0x80
 800a72e:	4a1f      	ldr	r2, [pc, #124]	; (800a7ac <create_name+0x120>)
 800a730:	5cd3      	ldrb	r3, [r2, r3]
 800a732:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a734:	7ffb      	ldrb	r3, [r7, #31]
 800a736:	4619      	mov	r1, r3
 800a738:	481d      	ldr	r0, [pc, #116]	; (800a7b0 <create_name+0x124>)
 800a73a:	f7ff f815 	bl	8009768 <chk_chr>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <create_name+0xbc>
 800a744:	2306      	movs	r3, #6
 800a746:	e02c      	b.n	800a7a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a748:	7ffb      	ldrb	r3, [r7, #31]
 800a74a:	2b60      	cmp	r3, #96	; 0x60
 800a74c:	d905      	bls.n	800a75a <create_name+0xce>
 800a74e:	7ffb      	ldrb	r3, [r7, #31]
 800a750:	2b7a      	cmp	r3, #122	; 0x7a
 800a752:	d802      	bhi.n	800a75a <create_name+0xce>
 800a754:	7ffb      	ldrb	r3, [r7, #31]
 800a756:	3b20      	subs	r3, #32
 800a758:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	1c5a      	adds	r2, r3, #1
 800a75e:	613a      	str	r2, [r7, #16]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	7ffa      	ldrb	r2, [r7, #31]
 800a766:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a768:	e7a6      	b.n	800a6b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a76a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	441a      	add	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <create_name+0xf4>
 800a77c:	2306      	movs	r3, #6
 800a77e:	e010      	b.n	800a7a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	2be5      	cmp	r3, #229	; 0xe5
 800a786:	d102      	bne.n	800a78e <create_name+0x102>
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2205      	movs	r2, #5
 800a78c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a78e:	7ffb      	ldrb	r3, [r7, #31]
 800a790:	2b20      	cmp	r3, #32
 800a792:	d801      	bhi.n	800a798 <create_name+0x10c>
 800a794:	2204      	movs	r2, #4
 800a796:	e000      	b.n	800a79a <create_name+0x10e>
 800a798:	2200      	movs	r2, #0
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	330b      	adds	r3, #11
 800a79e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a7a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3720      	adds	r7, #32
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	0800dd24 	.word	0x0800dd24
 800a7b0:	0800dc74 	.word	0x0800dc74

0800a7b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a7c8:	e002      	b.n	800a7d0 <follow_path+0x1c>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b2f      	cmp	r3, #47	; 0x2f
 800a7d6:	d0f8      	beq.n	800a7ca <follow_path+0x16>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b5c      	cmp	r3, #92	; 0x5c
 800a7de:	d0f4      	beq.n	800a7ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	2b1f      	cmp	r3, #31
 800a7ec:	d80a      	bhi.n	800a804 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2280      	movs	r2, #128	; 0x80
 800a7f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff fcf9 	bl	800a1f0 <dir_sdi>
 800a7fe:	4603      	mov	r3, r0
 800a800:	75fb      	strb	r3, [r7, #23]
 800a802:	e043      	b.n	800a88c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a804:	463b      	mov	r3, r7
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff ff3f 	bl	800a68c <create_name>
 800a80e:	4603      	mov	r3, r0
 800a810:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d134      	bne.n	800a882 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff feaf 	bl	800a57c <dir_find>
 800a81e:	4603      	mov	r3, r0
 800a820:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a828:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00a      	beq.n	800a846 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b04      	cmp	r3, #4
 800a834:	d127      	bne.n	800a886 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a836:	7afb      	ldrb	r3, [r7, #11]
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d122      	bne.n	800a886 <follow_path+0xd2>
 800a840:	2305      	movs	r3, #5
 800a842:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a844:	e01f      	b.n	800a886 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a846:	7afb      	ldrb	r3, [r7, #11]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d11c      	bne.n	800a88a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	799b      	ldrb	r3, [r3, #6]
 800a854:	f003 0310 	and.w	r3, r3, #16
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d102      	bne.n	800a862 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a85c:	2305      	movs	r3, #5
 800a85e:	75fb      	strb	r3, [r7, #23]
 800a860:	e014      	b.n	800a88c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a870:	4413      	add	r3, r2
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff fe42 	bl	800a4fe <ld_clust>
 800a87a:	4602      	mov	r2, r0
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a880:	e7c0      	b.n	800a804 <follow_path+0x50>
			if (res != FR_OK) break;
 800a882:	bf00      	nop
 800a884:	e002      	b.n	800a88c <follow_path+0xd8>
				break;
 800a886:	bf00      	nop
 800a888:	e000      	b.n	800a88c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a88a:	bf00      	nop
			}
		}
	}

	return res;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a896:	b480      	push	{r7}
 800a898:	b087      	sub	sp, #28
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a89e:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d031      	beq.n	800a910 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	617b      	str	r3, [r7, #20]
 800a8b2:	e002      	b.n	800a8ba <get_ldnumber+0x24>
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	617b      	str	r3, [r7, #20]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b20      	cmp	r3, #32
 800a8c0:	d903      	bls.n	800a8ca <get_ldnumber+0x34>
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b3a      	cmp	r3, #58	; 0x3a
 800a8c8:	d1f4      	bne.n	800a8b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b3a      	cmp	r3, #58	; 0x3a
 800a8d0:	d11c      	bne.n	800a90c <get_ldnumber+0x76>
			tp = *path;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	60fa      	str	r2, [r7, #12]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	3b30      	subs	r3, #48	; 0x30
 800a8e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	d80e      	bhi.n	800a908 <get_ldnumber+0x72>
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d10a      	bne.n	800a908 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d107      	bne.n	800a908 <get_ldnumber+0x72>
					vol = (int)i;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3301      	adds	r3, #1
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	e002      	b.n	800a912 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a90c:	2300      	movs	r3, #0
 800a90e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a910:	693b      	ldr	r3, [r7, #16]
}
 800a912:	4618      	mov	r0, r3
 800a914:	371c      	adds	r7, #28
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
	...

0800a920 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	70da      	strb	r2, [r3, #3]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f04f 32ff 	mov.w	r2, #4294967295
 800a936:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff f8e0 	bl	8009b00 <move_window>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <check_fs+0x2a>
 800a946:	2304      	movs	r3, #4
 800a948:	e038      	b.n	800a9bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3330      	adds	r3, #48	; 0x30
 800a94e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fe24 	bl	80095a0 <ld_word>
 800a958:	4603      	mov	r3, r0
 800a95a:	461a      	mov	r2, r3
 800a95c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a960:	429a      	cmp	r2, r3
 800a962:	d001      	beq.n	800a968 <check_fs+0x48>
 800a964:	2303      	movs	r3, #3
 800a966:	e029      	b.n	800a9bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a96e:	2be9      	cmp	r3, #233	; 0xe9
 800a970:	d009      	beq.n	800a986 <check_fs+0x66>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a978:	2beb      	cmp	r3, #235	; 0xeb
 800a97a:	d11e      	bne.n	800a9ba <check_fs+0x9a>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a982:	2b90      	cmp	r3, #144	; 0x90
 800a984:	d119      	bne.n	800a9ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	3330      	adds	r3, #48	; 0x30
 800a98a:	3336      	adds	r3, #54	; 0x36
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe fe1f 	bl	80095d0 <ld_dword>
 800a992:	4603      	mov	r3, r0
 800a994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a998:	4a0a      	ldr	r2, [pc, #40]	; (800a9c4 <check_fs+0xa4>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d101      	bne.n	800a9a2 <check_fs+0x82>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e00c      	b.n	800a9bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3330      	adds	r3, #48	; 0x30
 800a9a6:	3352      	adds	r3, #82	; 0x52
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fe11 	bl	80095d0 <ld_dword>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <check_fs+0xa8>)
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d101      	bne.n	800a9ba <check_fs+0x9a>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e000      	b.n	800a9bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a9ba:	2302      	movs	r3, #2
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	00544146 	.word	0x00544146
 800a9c8:	33544146 	.word	0x33544146

0800a9cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b096      	sub	sp, #88	; 0x58
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f7ff ff58 	bl	800a896 <get_ldnumber>
 800a9e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da01      	bge.n	800a9f2 <find_volume+0x26>
 800a9ee:	230b      	movs	r3, #11
 800a9f0:	e22e      	b.n	800ae50 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a9f2:	4aa8      	ldr	r2, [pc, #672]	; (800ac94 <find_volume+0x2c8>)
 800a9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <find_volume+0x3a>
 800aa02:	230c      	movs	r3, #12
 800aa04:	e224      	b.n	800ae50 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aa0c:	79fb      	ldrb	r3, [r7, #7]
 800aa0e:	f023 0301 	bic.w	r3, r3, #1
 800aa12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d01a      	beq.n	800aa52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1e:	785b      	ldrb	r3, [r3, #1]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fd1f 	bl	8009464 <disk_status>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aa2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10c      	bne.n	800aa52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d007      	beq.n	800aa4e <find_volume+0x82>
 800aa3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa42:	f003 0304 	and.w	r3, r3, #4
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aa4a:	230a      	movs	r3, #10
 800aa4c:	e200      	b.n	800ae50 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e1fe      	b.n	800ae50 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	2200      	movs	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	785b      	ldrb	r3, [r3, #1]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe fd17 	bl	8009498 <disk_initialize>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aa70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e1e7      	b.n	800ae50 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <find_volume+0xca>
 800aa86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800aa92:	230a      	movs	r3, #10
 800aa94:	e1dc      	b.n	800ae50 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aa9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa9e:	f7ff ff3f 	bl	800a920 <check_fs>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aaa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d14b      	bne.n	800ab48 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aab0:	2300      	movs	r3, #0
 800aab2:	643b      	str	r3, [r7, #64]	; 0x40
 800aab4:	e01f      	b.n	800aaf6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aabc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aabe:	011b      	lsls	r3, r3, #4
 800aac0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aac4:	4413      	add	r3, r2
 800aac6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	3304      	adds	r3, #4
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d006      	beq.n	800aae0 <find_volume+0x114>
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	3308      	adds	r3, #8
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fd7a 	bl	80095d0 <ld_dword>
 800aadc:	4602      	mov	r2, r0
 800aade:	e000      	b.n	800aae2 <find_volume+0x116>
 800aae0:	2200      	movs	r2, #0
 800aae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aaea:	440b      	add	r3, r1
 800aaec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aaf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	643b      	str	r3, [r7, #64]	; 0x40
 800aaf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d9dc      	bls.n	800aab6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aafc:	2300      	movs	r3, #0
 800aafe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ab00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d002      	beq.n	800ab0c <find_volume+0x140>
 800ab06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ab0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ab14:	4413      	add	r3, r2
 800ab16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ab1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ab1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d005      	beq.n	800ab2e <find_volume+0x162>
 800ab22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab26:	f7ff fefb 	bl	800a920 <check_fs>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	e000      	b.n	800ab30 <find_volume+0x164>
 800ab2e:	2303      	movs	r3, #3
 800ab30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ab34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d905      	bls.n	800ab48 <find_volume+0x17c>
 800ab3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab3e:	3301      	adds	r3, #1
 800ab40:	643b      	str	r3, [r7, #64]	; 0x40
 800ab42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d9e1      	bls.n	800ab0c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ab48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab4c:	2b04      	cmp	r3, #4
 800ab4e:	d101      	bne.n	800ab54 <find_volume+0x188>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e17d      	b.n	800ae50 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ab54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d901      	bls.n	800ab60 <find_volume+0x194>
 800ab5c:	230d      	movs	r3, #13
 800ab5e:	e177      	b.n	800ae50 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	3330      	adds	r3, #48	; 0x30
 800ab64:	330b      	adds	r3, #11
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fd1a 	bl	80095a0 <ld_word>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab72:	d001      	beq.n	800ab78 <find_volume+0x1ac>
 800ab74:	230d      	movs	r3, #13
 800ab76:	e16b      	b.n	800ae50 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ab78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7a:	3330      	adds	r3, #48	; 0x30
 800ab7c:	3316      	adds	r3, #22
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fd0e 	bl	80095a0 <ld_word>
 800ab84:	4603      	mov	r3, r0
 800ab86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ab88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <find_volume+0x1d0>
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	3330      	adds	r3, #48	; 0x30
 800ab92:	3324      	adds	r3, #36	; 0x24
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fe fd1b 	bl	80095d0 <ld_dword>
 800ab9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aba0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800abac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abae:	789b      	ldrb	r3, [r3, #2]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d005      	beq.n	800abc0 <find_volume+0x1f4>
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	789b      	ldrb	r3, [r3, #2]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d001      	beq.n	800abc0 <find_volume+0x1f4>
 800abbc:	230d      	movs	r3, #13
 800abbe:	e147      	b.n	800ae50 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800abc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc2:	789b      	ldrb	r3, [r3, #2]
 800abc4:	461a      	mov	r2, r3
 800abc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc8:	fb02 f303 	mul.w	r3, r2, r3
 800abcc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	895b      	ldrh	r3, [r3, #10]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d008      	beq.n	800abf4 <find_volume+0x228>
 800abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe4:	895b      	ldrh	r3, [r3, #10]
 800abe6:	461a      	mov	r2, r3
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	895b      	ldrh	r3, [r3, #10]
 800abec:	3b01      	subs	r3, #1
 800abee:	4013      	ands	r3, r2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <find_volume+0x22c>
 800abf4:	230d      	movs	r3, #13
 800abf6:	e12b      	b.n	800ae50 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfa:	3330      	adds	r3, #48	; 0x30
 800abfc:	3311      	adds	r3, #17
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fe fcce 	bl	80095a0 <ld_word>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0e:	891b      	ldrh	r3, [r3, #8]
 800ac10:	f003 030f 	and.w	r3, r3, #15
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <find_volume+0x252>
 800ac1a:	230d      	movs	r3, #13
 800ac1c:	e118      	b.n	800ae50 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac20:	3330      	adds	r3, #48	; 0x30
 800ac22:	3313      	adds	r3, #19
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe fcbb 	bl	80095a0 <ld_word>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ac2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d106      	bne.n	800ac42 <find_volume+0x276>
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	3330      	adds	r3, #48	; 0x30
 800ac38:	3320      	adds	r3, #32
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe fcc8 	bl	80095d0 <ld_dword>
 800ac40:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ac42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac44:	3330      	adds	r3, #48	; 0x30
 800ac46:	330e      	adds	r3, #14
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe fca9 	bl	80095a0 <ld_word>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ac52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <find_volume+0x290>
 800ac58:	230d      	movs	r3, #13
 800ac5a:	e0f9      	b.n	800ae50 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ac5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac60:	4413      	add	r3, r2
 800ac62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac64:	8912      	ldrh	r2, [r2, #8]
 800ac66:	0912      	lsrs	r2, r2, #4
 800ac68:	b292      	uxth	r2, r2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ac6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d201      	bcs.n	800ac7a <find_volume+0x2ae>
 800ac76:	230d      	movs	r3, #13
 800ac78:	e0ea      	b.n	800ae50 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ac7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac82:	8952      	ldrh	r2, [r2, #10]
 800ac84:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <find_volume+0x2cc>
 800ac90:	230d      	movs	r3, #13
 800ac92:	e0dd      	b.n	800ae50 <find_volume+0x484>
 800ac94:	20000200 	.word	0x20000200
		fmt = FS_FAT32;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d802      	bhi.n	800acae <find_volume+0x2e2>
 800aca8:	2302      	movs	r3, #2
 800acaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d802      	bhi.n	800acbe <find_volume+0x2f2>
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	1c9a      	adds	r2, r3, #2
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acca:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800accc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800acce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd0:	441a      	add	r2, r3
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800acd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	441a      	add	r2, r3
 800acdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acde:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ace0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	d11e      	bne.n	800ad26 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	3330      	adds	r3, #48	; 0x30
 800acec:	332a      	adds	r3, #42	; 0x2a
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fc56 	bl	80095a0 <ld_word>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <find_volume+0x332>
 800acfa:	230d      	movs	r3, #13
 800acfc:	e0a8      	b.n	800ae50 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	891b      	ldrh	r3, [r3, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <find_volume+0x33e>
 800ad06:	230d      	movs	r3, #13
 800ad08:	e0a2      	b.n	800ae50 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	3330      	adds	r3, #48	; 0x30
 800ad0e:	332c      	adds	r3, #44	; 0x2c
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fc5d 	bl	80095d0 <ld_dword>
 800ad16:	4602      	mov	r2, r0
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1e:	695b      	ldr	r3, [r3, #20]
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	647b      	str	r3, [r7, #68]	; 0x44
 800ad24:	e01f      	b.n	800ad66 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	891b      	ldrh	r3, [r3, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <find_volume+0x366>
 800ad2e:	230d      	movs	r3, #13
 800ad30:	e08e      	b.n	800ae50 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	6a1a      	ldr	r2, [r3, #32]
 800ad36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad38:	441a      	add	r2, r3
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ad3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d103      	bne.n	800ad4e <find_volume+0x382>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	005b      	lsls	r3, r3, #1
 800ad4c:	e00a      	b.n	800ad64 <find_volume+0x398>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	695a      	ldr	r2, [r3, #20]
 800ad52:	4613      	mov	r3, r2
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	4413      	add	r3, r2
 800ad58:	085a      	lsrs	r2, r3, #1
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	695b      	ldr	r3, [r3, #20]
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ad64:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	699a      	ldr	r2, [r3, #24]
 800ad6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ad70:	0a5b      	lsrs	r3, r3, #9
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d201      	bcs.n	800ad7a <find_volume+0x3ae>
 800ad76:	230d      	movs	r3, #13
 800ad78:	e06a      	b.n	800ae50 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad80:	611a      	str	r2, [r3, #16]
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	691a      	ldr	r2, [r3, #16]
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2280      	movs	r2, #128	; 0x80
 800ad8e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ad90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d149      	bne.n	800ae2c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	3330      	adds	r3, #48	; 0x30
 800ad9c:	3330      	adds	r3, #48	; 0x30
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fbfe 	bl	80095a0 <ld_word>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d140      	bne.n	800ae2c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800adaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adac:	3301      	adds	r3, #1
 800adae:	4619      	mov	r1, r3
 800adb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adb2:	f7fe fea5 	bl	8009b00 <move_window>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d137      	bne.n	800ae2c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	2200      	movs	r2, #0
 800adc0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800adc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc4:	3330      	adds	r3, #48	; 0x30
 800adc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe fbe8 	bl	80095a0 <ld_word>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800add8:	429a      	cmp	r2, r3
 800adda:	d127      	bne.n	800ae2c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	3330      	adds	r3, #48	; 0x30
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe fbf5 	bl	80095d0 <ld_dword>
 800ade6:	4602      	mov	r2, r0
 800ade8:	4b1b      	ldr	r3, [pc, #108]	; (800ae58 <find_volume+0x48c>)
 800adea:	429a      	cmp	r2, r3
 800adec:	d11e      	bne.n	800ae2c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	3330      	adds	r3, #48	; 0x30
 800adf2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fbea 	bl	80095d0 <ld_dword>
 800adfc:	4602      	mov	r2, r0
 800adfe:	4b17      	ldr	r3, [pc, #92]	; (800ae5c <find_volume+0x490>)
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d113      	bne.n	800ae2c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	3330      	adds	r3, #48	; 0x30
 800ae08:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe fbdf 	bl	80095d0 <ld_dword>
 800ae12:	4602      	mov	r2, r0
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	3330      	adds	r3, #48	; 0x30
 800ae1c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fe fbd5 	bl	80095d0 <ld_dword>
 800ae26:	4602      	mov	r2, r0
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ae32:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ae34:	4b0a      	ldr	r3, [pc, #40]	; (800ae60 <find_volume+0x494>)
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	4b08      	ldr	r3, [pc, #32]	; (800ae60 <find_volume+0x494>)
 800ae3e:	801a      	strh	r2, [r3, #0]
 800ae40:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <find_volume+0x494>)
 800ae42:	881a      	ldrh	r2, [r3, #0]
 800ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae46:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ae48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae4a:	f7fe fdf1 	bl	8009a30 <clear_lock>
#endif
	return FR_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3758      	adds	r7, #88	; 0x58
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	41615252 	.word	0x41615252
 800ae5c:	61417272 	.word	0x61417272
 800ae60:	20000204 	.word	0x20000204

0800ae64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ae6e:	2309      	movs	r3, #9
 800ae70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d01c      	beq.n	800aeb2 <validate+0x4e>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d018      	beq.n	800aeb2 <validate+0x4e>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d013      	beq.n	800aeb2 <validate+0x4e>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	889a      	ldrh	r2, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	88db      	ldrh	r3, [r3, #6]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d10c      	bne.n	800aeb2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	785b      	ldrb	r3, [r3, #1]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fae0 	bl	8009464 <disk_status>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <validate+0x4e>
			res = FR_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <validate+0x5a>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	e000      	b.n	800aec0 <validate+0x5c>
 800aebe:	2300      	movs	r3, #0
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	6013      	str	r3, [r2, #0]
	return res;
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
	...

0800aed0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b088      	sub	sp, #32
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	4613      	mov	r3, r2
 800aedc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aee2:	f107 0310 	add.w	r3, r7, #16
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff fcd5 	bl	800a896 <get_ldnumber>
 800aeec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da01      	bge.n	800aef8 <f_mount+0x28>
 800aef4:	230b      	movs	r3, #11
 800aef6:	e02b      	b.n	800af50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aef8:	4a17      	ldr	r2, [pc, #92]	; (800af58 <f_mount+0x88>)
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800af08:	69b8      	ldr	r0, [r7, #24]
 800af0a:	f7fe fd91 	bl	8009a30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2200      	movs	r2, #0
 800af12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	490d      	ldr	r1, [pc, #52]	; (800af58 <f_mount+0x88>)
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <f_mount+0x66>
 800af30:	79fb      	ldrb	r3, [r7, #7]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d001      	beq.n	800af3a <f_mount+0x6a>
 800af36:	2300      	movs	r3, #0
 800af38:	e00a      	b.n	800af50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800af3a:	f107 010c 	add.w	r1, r7, #12
 800af3e:	f107 0308 	add.w	r3, r7, #8
 800af42:	2200      	movs	r2, #0
 800af44:	4618      	mov	r0, r3
 800af46:	f7ff fd41 	bl	800a9cc <find_volume>
 800af4a:	4603      	mov	r3, r0
 800af4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20000200 	.word	0x20000200

0800af5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b098      	sub	sp, #96	; 0x60
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <f_open+0x18>
 800af70:	2309      	movs	r3, #9
 800af72:	e1ad      	b.n	800b2d0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800af7c:	79fa      	ldrb	r2, [r7, #7]
 800af7e:	f107 0110 	add.w	r1, r7, #16
 800af82:	f107 0308 	add.w	r3, r7, #8
 800af86:	4618      	mov	r0, r3
 800af88:	f7ff fd20 	bl	800a9cc <find_volume>
 800af8c:	4603      	mov	r3, r0
 800af8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800af92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af96:	2b00      	cmp	r3, #0
 800af98:	f040 8191 	bne.w	800b2be <f_open+0x362>
		dj.obj.fs = fs;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	f107 0314 	add.w	r3, r7, #20
 800afa6:	4611      	mov	r1, r2
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7ff fc03 	bl	800a7b4 <follow_path>
 800afae:	4603      	mov	r3, r0
 800afb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800afb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d11a      	bne.n	800aff2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800afbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800afc0:	b25b      	sxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	da03      	bge.n	800afce <f_open+0x72>
				res = FR_INVALID_NAME;
 800afc6:	2306      	movs	r3, #6
 800afc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800afcc:	e011      	b.n	800aff2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	f023 0301 	bic.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bf14      	ite	ne
 800afd8:	2301      	movne	r3, #1
 800afda:	2300      	moveq	r3, #0
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	461a      	mov	r2, r3
 800afe0:	f107 0314 	add.w	r3, r7, #20
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe fbda 	bl	80097a0 <chk_lock>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	f003 031c 	and.w	r3, r3, #28
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d07f      	beq.n	800b0fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800affc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b000:	2b00      	cmp	r3, #0
 800b002:	d017      	beq.n	800b034 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b008:	2b04      	cmp	r3, #4
 800b00a:	d10e      	bne.n	800b02a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b00c:	f7fe fc24 	bl	8009858 <enq_lock>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d006      	beq.n	800b024 <f_open+0xc8>
 800b016:	f107 0314 	add.w	r3, r7, #20
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff fb03 	bl	800a626 <dir_register>
 800b020:	4603      	mov	r3, r0
 800b022:	e000      	b.n	800b026 <f_open+0xca>
 800b024:	2312      	movs	r3, #18
 800b026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	f043 0308 	orr.w	r3, r3, #8
 800b030:	71fb      	strb	r3, [r7, #7]
 800b032:	e010      	b.n	800b056 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b034:	7ebb      	ldrb	r3, [r7, #26]
 800b036:	f003 0311 	and.w	r3, r3, #17
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <f_open+0xea>
					res = FR_DENIED;
 800b03e:	2307      	movs	r3, #7
 800b040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b044:	e007      	b.n	800b056 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <f_open+0xfa>
 800b050:	2308      	movs	r3, #8
 800b052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d168      	bne.n	800b130 <f_open+0x1d4>
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	f003 0308 	and.w	r3, r3, #8
 800b064:	2b00      	cmp	r3, #0
 800b066:	d063      	beq.n	800b130 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b068:	f000 fcb8 	bl	800b9dc <get_fattime>
 800b06c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	330e      	adds	r3, #14
 800b072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b074:	4618      	mov	r0, r3
 800b076:	f7fe fae9 	bl	800964c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07c:	3316      	adds	r3, #22
 800b07e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fae3 	bl	800964c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b088:	330b      	adds	r3, #11
 800b08a:	2220      	movs	r2, #32
 800b08c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff fa32 	bl	800a4fe <ld_clust>
 800b09a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7ff fa4a 	bl	800a53c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0aa:	331c      	adds	r3, #28
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fe facc 	bl	800964c <st_dword>
					fs->wflag = 1;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d037      	beq.n	800b130 <f_open+0x1d4>
						dw = fs->winsect;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b0c6:	f107 0314 	add.w	r3, r7, #20
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fe ff5d 	bl	8009f8e <remove_chain>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b0da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d126      	bne.n	800b130 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe fd0a 	bl	8009b00 <move_window>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0f6:	3a01      	subs	r2, #1
 800b0f8:	60da      	str	r2, [r3, #12]
 800b0fa:	e019      	b.n	800b130 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b0fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b100:	2b00      	cmp	r3, #0
 800b102:	d115      	bne.n	800b130 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b104:	7ebb      	ldrb	r3, [r7, #26]
 800b106:	f003 0310 	and.w	r3, r3, #16
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b10e:	2304      	movs	r3, #4
 800b110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b114:	e00c      	b.n	800b130 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	f003 0302 	and.w	r3, r3, #2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d007      	beq.n	800b130 <f_open+0x1d4>
 800b120:	7ebb      	ldrb	r3, [r7, #26]
 800b122:	f003 0301 	and.w	r3, r3, #1
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <f_open+0x1d4>
						res = FR_DENIED;
 800b12a:	2307      	movs	r3, #7
 800b12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b134:	2b00      	cmp	r3, #0
 800b136:	d128      	bne.n	800b18a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	f003 0308 	and.w	r3, r3, #8
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b148:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	f023 0301 	bic.w	r3, r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bf14      	ite	ne
 800b162:	2301      	movne	r3, #1
 800b164:	2300      	moveq	r3, #0
 800b166:	b2db      	uxtb	r3, r3
 800b168:	461a      	mov	r2, r3
 800b16a:	f107 0314 	add.w	r3, r7, #20
 800b16e:	4611      	mov	r1, r2
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fb93 	bl	800989c <inc_lock>
 800b176:	4602      	mov	r2, r0
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d102      	bne.n	800b18a <f_open+0x22e>
 800b184:	2302      	movs	r3, #2
 800b186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b18a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f040 8095 	bne.w	800b2be <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b198:	4611      	mov	r1, r2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff f9af 	bl	800a4fe <ld_clust>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	331c      	adds	r3, #28
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe fa10 	bl	80095d0 <ld_dword>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	88da      	ldrh	r2, [r3, #6]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	79fa      	ldrb	r2, [r7, #7]
 800b1ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3330      	adds	r3, #48	; 0x30
 800b1e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe fa7a 	bl	80096e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d060      	beq.n	800b2be <f_open+0x362>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d05c      	beq.n	800b2be <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	895b      	ldrh	r3, [r3, #10]
 800b210:	025b      	lsls	r3, r3, #9
 800b212:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	657b      	str	r3, [r7, #84]	; 0x54
 800b220:	e016      	b.n	800b250 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe fd25 	bl	8009c76 <get_fat>
 800b22c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b22e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b230:	2b01      	cmp	r3, #1
 800b232:	d802      	bhi.n	800b23a <f_open+0x2de>
 800b234:	2302      	movs	r3, #2
 800b236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b23a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b240:	d102      	bne.n	800b248 <f_open+0x2ec>
 800b242:	2301      	movs	r3, #1
 800b244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	657b      	str	r3, [r7, #84]	; 0x54
 800b250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b254:	2b00      	cmp	r3, #0
 800b256:	d103      	bne.n	800b260 <f_open+0x304>
 800b258:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d8e0      	bhi.n	800b222 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b264:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d127      	bne.n	800b2be <f_open+0x362>
 800b26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b274:	2b00      	cmp	r3, #0
 800b276:	d022      	beq.n	800b2be <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fcdb 	bl	8009c38 <clust2sect>
 800b282:	6478      	str	r0, [r7, #68]	; 0x44
 800b284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b286:	2b00      	cmp	r3, #0
 800b288:	d103      	bne.n	800b292 <f_open+0x336>
						res = FR_INT_ERR;
 800b28a:	2302      	movs	r3, #2
 800b28c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b290:	e015      	b.n	800b2be <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b294:	0a5a      	lsrs	r2, r3, #9
 800b296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b298:	441a      	add	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	7858      	ldrb	r0, [r3, #1]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6a1a      	ldr	r2, [r3, #32]
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	f7fe f919 	bl	80094e4 <disk_read>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <f_open+0x362>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b2be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <f_open+0x370>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b2cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3760      	adds	r7, #96	; 0x60
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08c      	sub	sp, #48	; 0x30
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
 800b2e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f107 0210 	add.w	r2, r7, #16
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7ff fdb3 	bl	800ae64 <validate>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d107      	bne.n	800b31c <f_write+0x44>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	7d5b      	ldrb	r3, [r3, #21]
 800b310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <f_write+0x4a>
 800b31c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b320:	e14b      	b.n	800b5ba <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	7d1b      	ldrb	r3, [r3, #20]
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <f_write+0x5a>
 800b32e:	2307      	movs	r3, #7
 800b330:	e143      	b.n	800b5ba <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	699a      	ldr	r2, [r3, #24]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	441a      	add	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	429a      	cmp	r2, r3
 800b340:	f080 812d 	bcs.w	800b59e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	43db      	mvns	r3, r3
 800b34a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b34c:	e127      	b.n	800b59e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b356:	2b00      	cmp	r3, #0
 800b358:	f040 80e3 	bne.w	800b522 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	0a5b      	lsrs	r3, r3, #9
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	8952      	ldrh	r2, [r2, #10]
 800b366:	3a01      	subs	r2, #1
 800b368:	4013      	ands	r3, r2
 800b36a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d143      	bne.n	800b3fa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10c      	bne.n	800b394 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d11a      	bne.n	800b3bc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe fe64 	bl	800a058 <create_chain>
 800b390:	62b8      	str	r0, [r7, #40]	; 0x28
 800b392:	e013      	b.n	800b3bc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d007      	beq.n	800b3ac <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7fe fef0 	bl	800a188 <clmt_clust>
 800b3a8:	62b8      	str	r0, [r7, #40]	; 0x28
 800b3aa:	e007      	b.n	800b3bc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f7fe fe4f 	bl	800a058 <create_chain>
 800b3ba:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f000 80f2 	beq.w	800b5a8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d104      	bne.n	800b3d4 <f_write+0xfc>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	755a      	strb	r2, [r3, #21]
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	e0f2      	b.n	800b5ba <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3da:	d104      	bne.n	800b3e6 <f_write+0x10e>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	755a      	strb	r2, [r3, #21]
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e0e9      	b.n	800b5ba <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <f_write+0x122>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3f8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	7d1b      	ldrb	r3, [r3, #20]
 800b3fe:	b25b      	sxtb	r3, r3
 800b400:	2b00      	cmp	r3, #0
 800b402:	da18      	bge.n	800b436 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	7858      	ldrb	r0, [r3, #1]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a1a      	ldr	r2, [r3, #32]
 800b412:	2301      	movs	r3, #1
 800b414:	f7fe f886 	bl	8009524 <disk_write>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <f_write+0x150>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2201      	movs	r2, #1
 800b422:	755a      	strb	r2, [r3, #21]
 800b424:	2301      	movs	r3, #1
 800b426:	e0c8      	b.n	800b5ba <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	7d1b      	ldrb	r3, [r3, #20]
 800b42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b430:	b2da      	uxtb	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	69db      	ldr	r3, [r3, #28]
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f7fe fbfa 	bl	8009c38 <clust2sect>
 800b444:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <f_write+0x17e>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2202      	movs	r2, #2
 800b450:	755a      	strb	r2, [r3, #21]
 800b452:	2302      	movs	r3, #2
 800b454:	e0b1      	b.n	800b5ba <f_write+0x2e2>
			sect += csect;
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	4413      	add	r3, r2
 800b45c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	0a5b      	lsrs	r3, r3, #9
 800b462:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d03c      	beq.n	800b4e4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b46a:	69ba      	ldr	r2, [r7, #24]
 800b46c:	6a3b      	ldr	r3, [r7, #32]
 800b46e:	4413      	add	r3, r2
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	8952      	ldrh	r2, [r2, #10]
 800b474:	4293      	cmp	r3, r2
 800b476:	d905      	bls.n	800b484 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	895b      	ldrh	r3, [r3, #10]
 800b47c:	461a      	mov	r2, r3
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	7858      	ldrb	r0, [r3, #1]
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	69f9      	ldr	r1, [r7, #28]
 800b48e:	f7fe f849 	bl	8009524 <disk_write>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d004      	beq.n	800b4a2 <f_write+0x1ca>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2201      	movs	r2, #1
 800b49c:	755a      	strb	r2, [r3, #21]
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e08b      	b.n	800b5ba <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6a1a      	ldr	r2, [r3, #32]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	6a3a      	ldr	r2, [r7, #32]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d915      	bls.n	800b4dc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6a1a      	ldr	r2, [r3, #32]
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	025b      	lsls	r3, r3, #9
 800b4c0:	69fa      	ldr	r2, [r7, #28]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f7fe f8eb 	bl	80096a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	7d1b      	ldrb	r3, [r3, #20]
 800b4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	025b      	lsls	r3, r3, #9
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b4e2:	e03f      	b.n	800b564 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d016      	beq.n	800b51c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	699a      	ldr	r2, [r3, #24]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d210      	bcs.n	800b51c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	7858      	ldrb	r0, [r3, #1]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b504:	2301      	movs	r3, #1
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	f7fd ffec 	bl	80094e4 <disk_read>
 800b50c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2201      	movs	r2, #1
 800b516:	755a      	strb	r2, [r3, #21]
 800b518:	2301      	movs	r3, #1
 800b51a:	e04e      	b.n	800b5ba <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	429a      	cmp	r2, r3
 800b536:	d901      	bls.n	800b53c <f_write+0x264>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54a:	4413      	add	r3, r2
 800b54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b54e:	69f9      	ldr	r1, [r7, #28]
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe f8a7 	bl	80096a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	7d1b      	ldrb	r3, [r3, #20]
 800b55a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b564:	69fa      	ldr	r2, [r7, #28]
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	4413      	add	r3, r2
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	699a      	ldr	r2, [r3, #24]
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	441a      	add	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	619a      	str	r2, [r3, #24]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	429a      	cmp	r2, r3
 800b582:	bf38      	it	cc
 800b584:	461a      	movcc	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	60da      	str	r2, [r3, #12]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	441a      	add	r2, r3
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	601a      	str	r2, [r3, #0]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f47f aed4 	bne.w	800b34e <f_write+0x76>
 800b5a6:	e000      	b.n	800b5aa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b5a8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	7d1b      	ldrb	r3, [r3, #20]
 800b5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3730      	adds	r7, #48	; 0x30
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b086      	sub	sp, #24
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f107 0208 	add.w	r2, r7, #8
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff fc46 	bl	800ae64 <validate>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d168      	bne.n	800b6b4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	7d1b      	ldrb	r3, [r3, #20]
 800b5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d062      	beq.n	800b6b4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	7d1b      	ldrb	r3, [r3, #20]
 800b5f2:	b25b      	sxtb	r3, r3
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da15      	bge.n	800b624 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	7858      	ldrb	r0, [r3, #1]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1a      	ldr	r2, [r3, #32]
 800b606:	2301      	movs	r3, #1
 800b608:	f7fd ff8c 	bl	8009524 <disk_write>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <f_sync+0x54>
 800b612:	2301      	movs	r3, #1
 800b614:	e04f      	b.n	800b6b6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	7d1b      	ldrb	r3, [r3, #20]
 800b61a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b624:	f000 f9da 	bl	800b9dc <get_fattime>
 800b628:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	4619      	mov	r1, r3
 800b632:	4610      	mov	r0, r2
 800b634:	f7fe fa64 	bl	8009b00 <move_window>
 800b638:	4603      	mov	r3, r0
 800b63a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d138      	bne.n	800b6b4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b646:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	330b      	adds	r3, #11
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	330b      	adds	r3, #11
 800b652:	f042 0220 	orr.w	r2, r2, #32
 800b656:	b2d2      	uxtb	r2, r2
 800b658:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	461a      	mov	r2, r3
 800b664:	68f9      	ldr	r1, [r7, #12]
 800b666:	f7fe ff69 	bl	800a53c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f103 021c 	add.w	r2, r3, #28
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f7fd ffe8 	bl	800964c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3316      	adds	r3, #22
 800b680:	6939      	ldr	r1, [r7, #16]
 800b682:	4618      	mov	r0, r3
 800b684:	f7fd ffe2 	bl	800964c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3312      	adds	r3, #18
 800b68c:	2100      	movs	r1, #0
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fd ffc1 	bl	8009616 <st_word>
					fs->wflag = 1;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2201      	movs	r2, #1
 800b698:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fe fa5d 	bl	8009b5c <sync_fs>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	7d1b      	ldrb	r3, [r3, #20]
 800b6aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff ff7b 	bl	800b5c2 <f_sync>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d118      	bne.n	800b708 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f107 0208 	add.w	r2, r7, #8
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fbc0 	bl	800ae64 <validate>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10c      	bne.n	800b708 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fe f960 	bl	80099b8 <dec_lock>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d102      	bne.n	800b708 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b708:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b714:	b480      	push	{r7}
 800b716:	b087      	sub	sp, #28
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	4613      	mov	r3, r2
 800b720:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b722:	2301      	movs	r3, #1
 800b724:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b726:	2300      	movs	r3, #0
 800b728:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b72a:	4b1f      	ldr	r3, [pc, #124]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b72c:	7a5b      	ldrb	r3, [r3, #9]
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d131      	bne.n	800b798 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b734:	4b1c      	ldr	r3, [pc, #112]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b736:	7a5b      	ldrb	r3, [r3, #9]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	461a      	mov	r2, r3
 800b73c:	4b1a      	ldr	r3, [pc, #104]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b73e:	2100      	movs	r1, #0
 800b740:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b742:	4b19      	ldr	r3, [pc, #100]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b744:	7a5b      	ldrb	r3, [r3, #9]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	4a17      	ldr	r2, [pc, #92]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b752:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b754:	7a5b      	ldrb	r3, [r3, #9]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	461a      	mov	r2, r3
 800b75a:	4b13      	ldr	r3, [pc, #76]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b75c:	4413      	add	r3, r2
 800b75e:	79fa      	ldrb	r2, [r7, #7]
 800b760:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b762:	4b11      	ldr	r3, [pc, #68]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b764:	7a5b      	ldrb	r3, [r3, #9]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	b2d1      	uxtb	r1, r2
 800b76c:	4a0e      	ldr	r2, [pc, #56]	; (800b7a8 <FATFS_LinkDriverEx+0x94>)
 800b76e:	7251      	strb	r1, [r2, #9]
 800b770:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b772:	7dbb      	ldrb	r3, [r7, #22]
 800b774:	3330      	adds	r3, #48	; 0x30
 800b776:	b2da      	uxtb	r2, r3
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	3301      	adds	r3, #1
 800b780:	223a      	movs	r2, #58	; 0x3a
 800b782:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	3302      	adds	r3, #2
 800b788:	222f      	movs	r2, #47	; 0x2f
 800b78a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	3303      	adds	r3, #3
 800b790:	2200      	movs	r2, #0
 800b792:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b794:	2300      	movs	r3, #0
 800b796:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b798:	7dfb      	ldrb	r3, [r7, #23]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000228 	.word	0x20000228

0800b7ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff ffaa 	bl	800b714 <FATFS_LinkDriverEx>
 800b7c0:	4603      	mov	r3, r0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800b7e0:	4b15      	ldr	r3, [pc, #84]	; (800b838 <FATFS_UnLinkDriverEx+0x6c>)
 800b7e2:	7a5b      	ldrb	r3, [r3, #9]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d01e      	beq.n	800b828 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	3b30      	subs	r3, #48	; 0x30
 800b7f0:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800b7f2:	7bbb      	ldrb	r3, [r7, #14]
 800b7f4:	4a10      	ldr	r2, [pc, #64]	; (800b838 <FATFS_UnLinkDriverEx+0x6c>)
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d013      	beq.n	800b828 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	4a0d      	ldr	r2, [pc, #52]	; (800b838 <FATFS_UnLinkDriverEx+0x6c>)
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	2200      	movs	r2, #0
 800b80a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	4a0a      	ldr	r2, [pc, #40]	; (800b838 <FATFS_UnLinkDriverEx+0x6c>)
 800b810:	4413      	add	r3, r2
 800b812:	2200      	movs	r2, #0
 800b814:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800b816:	4b08      	ldr	r3, [pc, #32]	; (800b838 <FATFS_UnLinkDriverEx+0x6c>)
 800b818:	7a5b      	ldrb	r3, [r3, #9]
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	3b01      	subs	r3, #1
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	4b05      	ldr	r3, [pc, #20]	; (800b838 <FATFS_UnLinkDriverEx+0x6c>)
 800b822:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3714      	adds	r7, #20
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	20000228 	.word	0x20000228

0800b83c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800b844:	2100      	movs	r1, #0
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff ffc0 	bl	800b7cc <FATFS_UnLinkDriverEx>
 800b84c:	4603      	mov	r3, r0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b862:	f000 f896 	bl	800b992 <BSP_SD_IsDetected>
 800b866:	4603      	mov	r3, r0
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d001      	beq.n	800b870 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e012      	b.n	800b896 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b870:	480b      	ldr	r0, [pc, #44]	; (800b8a0 <BSP_SD_Init+0x48>)
 800b872:	f7f8 ffad 	bl	80047d0 <HAL_SD_Init>
 800b876:	4603      	mov	r3, r0
 800b878:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d109      	bne.n	800b894 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b884:	4806      	ldr	r0, [pc, #24]	; (800b8a0 <BSP_SD_Init+0x48>)
 800b886:	f7f9 fd88 	bl	800539a <HAL_SD_ConfigWideBusOperation>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b894:	79fb      	ldrb	r3, [r7, #7]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	200009c8 	.word	0x200009c8

0800b8a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	68f9      	ldr	r1, [r7, #12]
 800b8ba:	4806      	ldr	r0, [pc, #24]	; (800b8d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b8bc:	f7f9 f810 	bl	80048e0 <HAL_SD_ReadBlocks_DMA>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	200009c8 	.word	0x200009c8

0800b8d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	68f9      	ldr	r1, [r7, #12]
 800b8ee:	4806      	ldr	r0, [pc, #24]	; (800b908 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b8f0:	f7f9 f8c2 	bl	8004a78 <HAL_SD_WriteBlocks_DMA>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	200009c8 	.word	0x200009c8

0800b90c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b910:	4805      	ldr	r0, [pc, #20]	; (800b928 <BSP_SD_GetCardState+0x1c>)
 800b912:	f7f9 fdbe 	bl	8005492 <HAL_SD_GetCardState>
 800b916:	4603      	mov	r3, r0
 800b918:	2b04      	cmp	r3, #4
 800b91a:	bf14      	ite	ne
 800b91c:	2301      	movne	r3, #1
 800b91e:	2300      	moveq	r3, #0
 800b920:	b2db      	uxtb	r3, r3
}
 800b922:	4618      	mov	r0, r3
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	200009c8 	.word	0x200009c8

0800b92c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4803      	ldr	r0, [pc, #12]	; (800b944 <BSP_SD_GetCardInfo+0x18>)
 800b938:	f7f9 fd03 	bl	8005342 <HAL_SD_GetCardInfo>
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	200009c8 	.word	0x200009c8

0800b948 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b950:	f000 f818 	bl	800b984 <BSP_SD_AbortCallback>
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b964:	f000 fd7e 	bl	800c464 <BSP_SD_WriteCpltCallback>
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b978:	f000 fd80 	bl	800c47c <BSP_SD_ReadCpltCallback>
}
 800b97c:	bf00      	nop
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0

}
 800b988:	bf00      	nop
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b998:	2301      	movs	r3, #1
 800b99a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b99c:	f000 f826 	bl	800b9ec <BSP_PlatformIsDetected>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	b2db      	uxtb	r3, r3
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b9bc:	4904      	ldr	r1, [pc, #16]	; (800b9d0 <MX_FATFS_Init+0x18>)
 800b9be:	4805      	ldr	r0, [pc, #20]	; (800b9d4 <MX_FATFS_Init+0x1c>)
 800b9c0:	f7ff fef4 	bl	800b7ac <FATFS_LinkDriver>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <MX_FATFS_Init+0x20>)
 800b9ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b9cc:	bf00      	nop
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20000450 	.word	0x20000450
 800b9d4:	0800dda4 	.word	0x0800dda4
 800b9d8:	2000044c 	.word	0x2000044c

0800b9dc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b9e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b9f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b9fa:	4806      	ldr	r0, [pc, #24]	; (800ba14 <BSP_PlatformIsDetected+0x28>)
 800b9fc:	f7f6 f9b0 	bl	8001d60 <HAL_GPIO_ReadPin>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ba06:	2300      	movs	r3, #0
 800ba08:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
}  
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	40020400 	.word	0x40020400

0800ba18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ba18:	b590      	push	{r4, r7, lr}
 800ba1a:	b08d      	sub	sp, #52	; 0x34
 800ba1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  FRESULT fres;
  uint16_t raw_temp;
  float temp_c;
  char log_path[] = "/TEMPLOG.TXT";
 800ba1e:	4b4f      	ldr	r3, [pc, #316]	; (800bb5c <main+0x144>)
 800ba20:	f107 0418 	add.w	r4, r7, #24
 800ba24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba26:	c407      	stmia	r4!, {r0, r1, r2}
 800ba28:	7023      	strb	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ba2a:	f7f5 f9c7 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ba2e:	f000 f89f 	bl	800bb70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ba32:	f000 f97d 	bl	800bd30 <MX_GPIO_Init>
  MX_DMA_Init();
 800ba36:	f000 f953 	bl	800bce0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800ba3a:	f000 f931 	bl	800bca0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800ba3e:	f7ff ffbb 	bl	800b9b8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800ba42:	f000 ff6d 	bl	800c920 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800ba46:	f000 f8fd 	bl	800bc44 <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Attempt to read temperature from sensor
    raw_temp = ReadPCTTemperature(PCT_I2C_ADDR);
 800ba4a:	236e      	movs	r3, #110	; 0x6e
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 f9eb 	bl	800be28 <ReadPCTTemperature>
 800ba52:	4603      	mov	r3, r0
 800ba54:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if ( raw_temp == PCT_ERROR ) {
 800ba56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d104      	bne.n	800ba6a <main+0x52>
      BlinkLED(100, 5);
 800ba60:	2105      	movs	r1, #5
 800ba62:	2064      	movs	r0, #100	; 0x64
 800ba64:	f000 fac4 	bl	800bff0 <BlinkLED>
 800ba68:	e072      	b.n	800bb50 <main+0x138>
    } else {

      // Convert raw to 2's complement, since temperature can be negative
      if ( raw_temp > 0x3FF ) {
 800ba6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba70:	d305      	bcc.n	800ba7e <main+0x66>
        raw_temp |= 0xF800;
 800ba72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba74:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800ba78:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 800ba7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      // Convert to float temperature value (Celsius)
      temp_c = (int16_t)raw_temp * 0.125;
 800ba7e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f4 fd4e 	bl	8000524 <__aeabi_i2d>
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba90:	f7f4 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ba94:	4603      	mov	r3, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	4618      	mov	r0, r3
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	f7f4 ffbe 	bl	8000a1c <__aeabi_d2f>
 800baa0:	4603      	mov	r3, r0
 800baa2:	62bb      	str	r3, [r7, #40]	; 0x28

      // Convert temperature to decimal format (without float conversion)
      temp_c *= 100;
 800baa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baa8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800bb60 <main+0x148>
 800baac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bab0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      sprintf((char*)buf,
            "%u.%02u C\r\n",
            ((unsigned int)temp_c / 100),
 800bab4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800babc:	ee17 2a90 	vmov	r2, s15
      sprintf((char*)buf,
 800bac0:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <main+0x14c>)
 800bac2:	fba3 2302 	umull	r2, r3, r3, r2
 800bac6:	095c      	lsrs	r4, r3, #5
            ((unsigned int)temp_c % 100));
 800bac8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad0:	ee17 2a90 	vmov	r2, s15
      sprintf((char*)buf,
 800bad4:	4b23      	ldr	r3, [pc, #140]	; (800bb64 <main+0x14c>)
 800bad6:	fba3 1302 	umull	r1, r3, r3, r2
 800bada:	095b      	lsrs	r3, r3, #5
 800badc:	2164      	movs	r1, #100	; 0x64
 800bade:	fb01 f303 	mul.w	r3, r1, r3
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	1d38      	adds	r0, r7, #4
 800bae6:	4622      	mov	r2, r4
 800bae8:	491f      	ldr	r1, [pc, #124]	; (800bb68 <main+0x150>)
 800baea:	f001 fd73 	bl	800d5d4 <siprintf>

      // Print temperature to console
      CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
 800baee:	1d3b      	adds	r3, r7, #4
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f4 fb6d 	bl	80001d0 <strlen>
 800baf6:	4603      	mov	r3, r0
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	1d3b      	adds	r3, r7, #4
 800bafc:	4611      	mov	r1, r2
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 f804 	bl	800cb0c <CDC_Transmit_FS>

      // Turn LED on while writing to file
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800bb04:	2201      	movs	r2, #1
 800bb06:	2102      	movs	r1, #2
 800bb08:	4818      	ldr	r0, [pc, #96]	; (800bb6c <main+0x154>)
 800bb0a:	f7f6 f941 	bl	8001d90 <HAL_GPIO_WritePin>
      fres = AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
 800bb0e:	f107 0318 	add.w	r3, r7, #24
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7f4 fb5c 	bl	80001d0 <strlen>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	1d3b      	adds	r3, r7, #4
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7f4 fb57 	bl	80001d0 <strlen>
 800bb22:	4603      	mov	r3, r0
 800bb24:	1d3a      	adds	r2, r7, #4
 800bb26:	f107 0018 	add.w	r0, r7, #24
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	f000 f9c8 	bl	800bec0 <AppendToFile>
 800bb30:	4603      	mov	r3, r0
 800bb32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800bb36:	2200      	movs	r2, #0
 800bb38:	2102      	movs	r1, #2
 800bb3a:	480c      	ldr	r0, [pc, #48]	; (800bb6c <main+0x154>)
 800bb3c:	f7f6 f928 	bl	8001d90 <HAL_GPIO_WritePin>

      // If error writing to card, blink 3 times
      if ( fres != FR_OK) {
 800bb40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <main+0x138>
        BlinkLED(200, 3);
 800bb48:	2103      	movs	r1, #3
 800bb4a:	20c8      	movs	r0, #200	; 0xc8
 800bb4c:	f000 fa50 	bl	800bff0 <BlinkLED>
      }
    }

    // Wait before sampling again
    HAL_Delay(1000);
 800bb50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bb54:	f7f5 f9a4 	bl	8000ea0 <HAL_Delay>
    raw_temp = ReadPCTTemperature(PCT_I2C_ADDR);
 800bb58:	e777      	b.n	800ba4a <main+0x32>
 800bb5a:	bf00      	nop
 800bb5c:	0800dcc4 	.word	0x0800dcc4
 800bb60:	42c80000 	.word	0x42c80000
 800bb64:	51eb851f 	.word	0x51eb851f
 800bb68:	0800dcb8 	.word	0x0800dcb8
 800bb6c:	40020800 	.word	0x40020800

0800bb70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b094      	sub	sp, #80	; 0x50
 800bb74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bb76:	f107 0320 	add.w	r3, r7, #32
 800bb7a:	2230      	movs	r2, #48	; 0x30
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f001 fc67 	bl	800d452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bb84:	f107 030c 	add.w	r3, r7, #12
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]
 800bb8c:	605a      	str	r2, [r3, #4]
 800bb8e:	609a      	str	r2, [r3, #8]
 800bb90:	60da      	str	r2, [r3, #12]
 800bb92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bb94:	2300      	movs	r3, #0
 800bb96:	60bb      	str	r3, [r7, #8]
 800bb98:	4b28      	ldr	r3, [pc, #160]	; (800bc3c <SystemClock_Config+0xcc>)
 800bb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9c:	4a27      	ldr	r2, [pc, #156]	; (800bc3c <SystemClock_Config+0xcc>)
 800bb9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bba2:	6413      	str	r3, [r2, #64]	; 0x40
 800bba4:	4b25      	ldr	r3, [pc, #148]	; (800bc3c <SystemClock_Config+0xcc>)
 800bba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbac:	60bb      	str	r3, [r7, #8]
 800bbae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	607b      	str	r3, [r7, #4]
 800bbb4:	4b22      	ldr	r3, [pc, #136]	; (800bc40 <SystemClock_Config+0xd0>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a21      	ldr	r2, [pc, #132]	; (800bc40 <SystemClock_Config+0xd0>)
 800bbba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	4b1f      	ldr	r3, [pc, #124]	; (800bc40 <SystemClock_Config+0xd0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbc8:	607b      	str	r3, [r7, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bbd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bbd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bbda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800bbe0:	2306      	movs	r3, #6
 800bbe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800bbe4:	23a8      	movs	r3, #168	; 0xa8
 800bbe6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bbe8:	2302      	movs	r3, #2
 800bbea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800bbec:	2307      	movs	r3, #7
 800bbee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bbf0:	f107 0320 	add.w	r3, r7, #32
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f8 f9f5 	bl	8003fe4 <HAL_RCC_OscConfig>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800bc00:	f000 fa1c 	bl	800c03c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bc04:	230f      	movs	r3, #15
 800bc06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800bc10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bc14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bc16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800bc1c:	f107 030c 	add.w	r3, r7, #12
 800bc20:	2105      	movs	r1, #5
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f8 fc20 	bl	8004468 <HAL_RCC_ClockConfig>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800bc2e:	f000 fa05 	bl	800c03c <Error_Handler>
  }
}
 800bc32:	bf00      	nop
 800bc34:	3750      	adds	r7, #80	; 0x50
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	40023800 	.word	0x40023800
 800bc40:	40007000 	.word	0x40007000

0800bc44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bc48:	4b12      	ldr	r3, [pc, #72]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc4a:	4a13      	ldr	r2, [pc, #76]	; (800bc98 <MX_I2C1_Init+0x54>)
 800bc4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800bc4e:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc50:	4a12      	ldr	r2, [pc, #72]	; (800bc9c <MX_I2C1_Init+0x58>)
 800bc52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bc54:	4b0f      	ldr	r3, [pc, #60]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800bc5a:	4b0e      	ldr	r3, [pc, #56]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bc60:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bc66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800bc6e:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bc7a:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bc80:	4804      	ldr	r0, [pc, #16]	; (800bc94 <MX_I2C1_Init+0x50>)
 800bc82:	f7f6 f89f 	bl	8001dc4 <HAL_I2C_Init>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800bc8c:	f000 f9d6 	bl	800c03c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bc90:	bf00      	nop
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	20000914 	.word	0x20000914
 800bc98:	40005400 	.word	0x40005400
 800bc9c:	000186a0 	.word	0x000186a0

0800bca0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800bca0:	b480      	push	{r7}
 800bca2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800bca4:	4b0c      	ldr	r3, [pc, #48]	; (800bcd8 <MX_SDIO_SD_Init+0x38>)
 800bca6:	4a0d      	ldr	r2, [pc, #52]	; (800bcdc <MX_SDIO_SD_Init+0x3c>)
 800bca8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800bcaa:	4b0b      	ldr	r3, [pc, #44]	; (800bcd8 <MX_SDIO_SD_Init+0x38>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800bcb0:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <MX_SDIO_SD_Init+0x38>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800bcb6:	4b08      	ldr	r3, [pc, #32]	; (800bcd8 <MX_SDIO_SD_Init+0x38>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800bcbc:	4b06      	ldr	r3, [pc, #24]	; (800bcd8 <MX_SDIO_SD_Init+0x38>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800bcc2:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <MX_SDIO_SD_Init+0x38>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800bcc8:	4b03      	ldr	r3, [pc, #12]	; (800bcd8 <MX_SDIO_SD_Init+0x38>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800bcce:	bf00      	nop
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	200009c8 	.word	0x200009c8
 800bcdc:	40012c00 	.word	0x40012c00

0800bce0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800bce6:	2300      	movs	r3, #0
 800bce8:	607b      	str	r3, [r7, #4]
 800bcea:	4b10      	ldr	r3, [pc, #64]	; (800bd2c <MX_DMA_Init+0x4c>)
 800bcec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcee:	4a0f      	ldr	r2, [pc, #60]	; (800bd2c <MX_DMA_Init+0x4c>)
 800bcf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bcf4:	6313      	str	r3, [r2, #48]	; 0x30
 800bcf6:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <MX_DMA_Init+0x4c>)
 800bcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcfe:	607b      	str	r3, [r7, #4]
 800bd00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800bd02:	2200      	movs	r2, #0
 800bd04:	2100      	movs	r1, #0
 800bd06:	203b      	movs	r0, #59	; 0x3b
 800bd08:	f7f5 f9c7 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800bd0c:	203b      	movs	r0, #59	; 0x3b
 800bd0e:	f7f5 f9e0 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800bd12:	2200      	movs	r2, #0
 800bd14:	2100      	movs	r1, #0
 800bd16:	2045      	movs	r0, #69	; 0x45
 800bd18:	f7f5 f9bf 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800bd1c:	2045      	movs	r0, #69	; 0x45
 800bd1e:	f7f5 f9d8 	bl	80010d2 <HAL_NVIC_EnableIRQ>

}
 800bd22:	bf00      	nop
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	40023800 	.word	0x40023800

0800bd30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08a      	sub	sp, #40	; 0x28
 800bd34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd36:	f107 0314 	add.w	r3, r7, #20
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	605a      	str	r2, [r3, #4]
 800bd40:	609a      	str	r2, [r3, #8]
 800bd42:	60da      	str	r2, [r3, #12]
 800bd44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]
 800bd4a:	4b34      	ldr	r3, [pc, #208]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4e:	4a33      	ldr	r2, [pc, #204]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd54:	6313      	str	r3, [r2, #48]	; 0x30
 800bd56:	4b31      	ldr	r3, [pc, #196]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd5e:	613b      	str	r3, [r7, #16]
 800bd60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd62:	2300      	movs	r3, #0
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	4b2d      	ldr	r3, [pc, #180]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6a:	4a2c      	ldr	r2, [pc, #176]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd6c:	f043 0304 	orr.w	r3, r3, #4
 800bd70:	6313      	str	r3, [r2, #48]	; 0x30
 800bd72:	4b2a      	ldr	r3, [pc, #168]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd76:	f003 0304 	and.w	r3, r3, #4
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60bb      	str	r3, [r7, #8]
 800bd82:	4b26      	ldr	r3, [pc, #152]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd86:	4a25      	ldr	r2, [pc, #148]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	6313      	str	r3, [r2, #48]	; 0x30
 800bd8e:	4b23      	ldr	r3, [pc, #140]	; (800be1c <MX_GPIO_Init+0xec>)
 800bd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd92:	f003 0302 	and.w	r3, r3, #2
 800bd96:	60bb      	str	r3, [r7, #8]
 800bd98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	607b      	str	r3, [r7, #4]
 800bd9e:	4b1f      	ldr	r3, [pc, #124]	; (800be1c <MX_GPIO_Init+0xec>)
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	4a1e      	ldr	r2, [pc, #120]	; (800be1c <MX_GPIO_Init+0xec>)
 800bda4:	f043 0301 	orr.w	r3, r3, #1
 800bda8:	6313      	str	r3, [r2, #48]	; 0x30
 800bdaa:	4b1c      	ldr	r3, [pc, #112]	; (800be1c <MX_GPIO_Init+0xec>)
 800bdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	607b      	str	r3, [r7, #4]
 800bdb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	4b18      	ldr	r3, [pc, #96]	; (800be1c <MX_GPIO_Init+0xec>)
 800bdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdbe:	4a17      	ldr	r2, [pc, #92]	; (800be1c <MX_GPIO_Init+0xec>)
 800bdc0:	f043 0308 	orr.w	r3, r3, #8
 800bdc4:	6313      	str	r3, [r2, #48]	; 0x30
 800bdc6:	4b15      	ldr	r3, [pc, #84]	; (800be1c <MX_GPIO_Init+0xec>)
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdca:	f003 0308 	and.w	r3, r3, #8
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2102      	movs	r1, #2
 800bdd6:	4812      	ldr	r0, [pc, #72]	; (800be20 <MX_GPIO_Init+0xf0>)
 800bdd8:	f7f5 ffda 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800bddc:	2302      	movs	r3, #2
 800bdde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bde0:	2301      	movs	r3, #1
 800bde2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde4:	2300      	movs	r3, #0
 800bde6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bde8:	2300      	movs	r3, #0
 800bdea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800bdec:	f107 0314 	add.w	r3, r7, #20
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	480b      	ldr	r0, [pc, #44]	; (800be20 <MX_GPIO_Init+0xf0>)
 800bdf4:	f7f5 fd20 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800bdf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdfe:	2300      	movs	r3, #0
 800be00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be02:	2300      	movs	r3, #0
 800be04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be06:	f107 0314 	add.w	r3, r7, #20
 800be0a:	4619      	mov	r1, r3
 800be0c:	4805      	ldr	r0, [pc, #20]	; (800be24 <MX_GPIO_Init+0xf4>)
 800be0e:	f7f5 fd13 	bl	8001838 <HAL_GPIO_Init>

}
 800be12:	bf00      	nop
 800be14:	3728      	adds	r7, #40	; 0x28
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	40023800 	.word	0x40023800
 800be20:	40020800 	.word	0x40020800
 800be24:	40020400 	.word	0x40020400

0800be28 <ReadPCTTemperature>:

/* USER CODE BEGIN 4 */

// Read temperature from PCT2075
uint16_t ReadPCTTemperature(uint8_t i2c_addr) {
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af02      	add	r7, sp, #8
 800be2e:	4603      	mov	r3, r0
 800be30:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  uint8_t buf[2];
  uint16_t val;

  // Tell PCT2075 that we want to read from the temperature register
  buf[0] = PCT_REG_TEMP;
 800be32:	2300      	movs	r3, #0
 800be34:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, PCT_I2C_ADDR, buf, 1, I2C_DELAY);
 800be36:	236e      	movs	r3, #110	; 0x6e
 800be38:	b299      	uxth	r1, r3
 800be3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be3e:	f107 0208 	add.w	r2, r7, #8
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	2301      	movs	r3, #1
 800be46:	481d      	ldr	r0, [pc, #116]	; (800bebc <ReadPCTTemperature+0x94>)
 800be48:	f7f6 f914 	bl	8002074 <HAL_I2C_Master_Transmit>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]

  // If the I2C device has just been hot-plugged, reset the peripheral
  if ( ret == HAL_BUSY ) {
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	2b02      	cmp	r3, #2
 800be54:	d109      	bne.n	800be6a <ReadPCTTemperature+0x42>
    if (HAL_I2C_DeInit(&hi2c1) != HAL_OK){
 800be56:	4819      	ldr	r0, [pc, #100]	; (800bebc <ReadPCTTemperature+0x94>)
 800be58:	f7f6 f8dc 	bl	8002014 <HAL_I2C_DeInit>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <ReadPCTTemperature+0x3e>
      Error_Handler();
 800be62:	f000 f8eb 	bl	800c03c <Error_Handler>
    }
    MX_I2C1_Init();
 800be66:	f7ff feed 	bl	800bc44 <MX_I2C1_Init>
  }

  // Throw error if communication not OK
  if ( ret != HAL_OK ) {
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <ReadPCTTemperature+0x4e>
    return PCT_ERROR;
 800be70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be74:	e01d      	b.n	800beb2 <ReadPCTTemperature+0x8a>
  }

  // Read 2 bytes from the temperature register
  ret = HAL_I2C_Master_Receive(&hi2c1, PCT_I2C_ADDR, buf, 2, I2C_DELAY);
 800be76:	236e      	movs	r3, #110	; 0x6e
 800be78:	b299      	uxth	r1, r3
 800be7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be7e:	f107 0208 	add.w	r2, r7, #8
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	2302      	movs	r3, #2
 800be86:	480d      	ldr	r0, [pc, #52]	; (800bebc <ReadPCTTemperature+0x94>)
 800be88:	f7f6 f9f2 	bl	8002270 <HAL_I2C_Master_Receive>
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]
  if ( ret != HAL_OK ) {
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d002      	beq.n	800be9c <ReadPCTTemperature+0x74>
    return PCT_ERROR;
 800be96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be9a:	e00a      	b.n	800beb2 <ReadPCTTemperature+0x8a>
  }

  // Combine the bytes and return raw value
  val = ((uint16_t)buf[0] << 3) | (buf[1] >> 5);
 800be9c:	7a3b      	ldrb	r3, [r7, #8]
 800be9e:	00db      	lsls	r3, r3, #3
 800bea0:	b21a      	sxth	r2, r3
 800bea2:	7a7b      	ldrb	r3, [r7, #9]
 800bea4:	095b      	lsrs	r3, r3, #5
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	b21b      	sxth	r3, r3
 800beaa:	4313      	orrs	r3, r2
 800beac:	b21b      	sxth	r3, r3
 800beae:	81bb      	strh	r3, [r7, #12]

  return val;
 800beb0:	89bb      	ldrh	r3, [r7, #12]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20000914 	.word	0x20000914

0800bec0 <AppendToFile>:

// Append string to file given at path
FRESULT AppendToFile(char* path, size_t path_len, char* msg, size_t msg_len) {
 800bec0:	b590      	push	{r4, r7, lr}
 800bec2:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	f107 040c 	add.w	r4, r7, #12
 800becc:	6020      	str	r0, [r4, #0]
 800bece:	f107 0008 	add.w	r0, r7, #8
 800bed2:	6001      	str	r1, [r0, #0]
 800bed4:	1d39      	adds	r1, r7, #4
 800bed6:	600a      	str	r2, [r1, #0]
 800bed8:	463a      	mov	r2, r7
 800beda:	6013      	str	r3, [r2, #0]
  FIL myFILE;
  UINT testByte;
  FRESULT stat;

  // Bounds check on strings
  if ( (path[path_len] != 0) || (msg[msg_len] != 0) ) {
 800bedc:	f107 020c 	add.w	r2, r7, #12
 800bee0:	f107 0308 	add.w	r3, r7, #8
 800bee4:	6812      	ldr	r2, [r2, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4413      	add	r3, r2
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d107      	bne.n	800bf00 <AppendToFile+0x40>
 800bef0:	1d3a      	adds	r2, r7, #4
 800bef2:	463b      	mov	r3, r7
 800bef4:	6812      	ldr	r2, [r2, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4413      	add	r3, r2
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <AppendToFile+0x44>
    return FR_INVALID_NAME;
 800bf00:	2306      	movs	r3, #6
 800bf02:	e06c      	b.n	800bfde <AppendToFile+0x11e>
  }

  // Re-initialize SD
  if ( BSP_SD_Init() != MSD_OK ) {
 800bf04:	f7ff fca8 	bl	800b858 <BSP_SD_Init>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <AppendToFile+0x52>
    return FR_NOT_READY;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e065      	b.n	800bfde <AppendToFile+0x11e>
  }

  // Re-initialize FATFS
  if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
 800bf12:	4835      	ldr	r0, [pc, #212]	; (800bfe8 <AppendToFile+0x128>)
 800bf14:	f7ff fc92 	bl	800b83c <FATFS_UnLinkDriver>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <AppendToFile+0x62>
    return FR_NOT_READY;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e05d      	b.n	800bfde <AppendToFile+0x11e>
  }
  if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
 800bf22:	4931      	ldr	r1, [pc, #196]	; (800bfe8 <AppendToFile+0x128>)
 800bf24:	4831      	ldr	r0, [pc, #196]	; (800bfec <AppendToFile+0x12c>)
 800bf26:	f7ff fc41 	bl	800b7ac <FATFS_LinkDriver>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <AppendToFile+0x74>
    return FR_NOT_READY;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e054      	b.n	800bfde <AppendToFile+0x11e>
  }

  // Mount filesystem
  stat = f_mount(&fs, SDPath, 0);
 800bf34:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800bf38:	2200      	movs	r2, #0
 800bf3a:	492b      	ldr	r1, [pc, #172]	; (800bfe8 <AppendToFile+0x128>)
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fe ffc7 	bl	800aed0 <f_mount>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
  if (stat != FR_OK) {
 800bf48:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d007      	beq.n	800bf60 <AppendToFile+0xa0>
    f_mount(0, SDPath, 0);
 800bf50:	2200      	movs	r2, #0
 800bf52:	4925      	ldr	r1, [pc, #148]	; (800bfe8 <AppendToFile+0x128>)
 800bf54:	2000      	movs	r0, #0
 800bf56:	f7fe ffbb 	bl	800aed0 <f_mount>
    return stat;
 800bf5a:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800bf5e:	e03e      	b.n	800bfde <AppendToFile+0x11e>
  }

  // Open file for appending
  stat = f_open(&myFILE, path, FA_WRITE | FA_OPEN_APPEND);
 800bf60:	f107 030c 	add.w	r3, r7, #12
 800bf64:	f107 0014 	add.w	r0, r7, #20
 800bf68:	2232      	movs	r2, #50	; 0x32
 800bf6a:	6819      	ldr	r1, [r3, #0]
 800bf6c:	f7fe fff6 	bl	800af5c <f_open>
 800bf70:	4603      	mov	r3, r0
 800bf72:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
  if (stat != FR_OK) {
 800bf76:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d007      	beq.n	800bf8e <AppendToFile+0xce>
    f_mount(0, SDPath, 0);
 800bf7e:	2200      	movs	r2, #0
 800bf80:	4919      	ldr	r1, [pc, #100]	; (800bfe8 <AppendToFile+0x128>)
 800bf82:	2000      	movs	r0, #0
 800bf84:	f7fe ffa4 	bl	800aed0 <f_mount>
    return stat;
 800bf88:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800bf8c:	e027      	b.n	800bfde <AppendToFile+0x11e>
  }

  // Write message to end of file
  stat = f_write(&myFILE, msg, msg_len, &testByte);
 800bf8e:	f107 0310 	add.w	r3, r7, #16
 800bf92:	463a      	mov	r2, r7
 800bf94:	1d39      	adds	r1, r7, #4
 800bf96:	f107 0014 	add.w	r0, r7, #20
 800bf9a:	6812      	ldr	r2, [r2, #0]
 800bf9c:	6809      	ldr	r1, [r1, #0]
 800bf9e:	f7ff f99b 	bl	800b2d8 <f_write>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
  if (stat != FR_OK) {
 800bfa8:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <AppendToFile+0x100>
    f_mount(0, SDPath, 0);
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	490d      	ldr	r1, [pc, #52]	; (800bfe8 <AppendToFile+0x128>)
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f7fe ff8b 	bl	800aed0 <f_mount>
    return stat;
 800bfba:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800bfbe:	e00e      	b.n	800bfde <AppendToFile+0x11e>
  }

  // Sync, close file, unmount
  stat = f_close(&myFILE);
 800bfc0:	f107 0314 	add.w	r3, r7, #20
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff fb7a 	bl	800b6be <f_close>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
  f_mount(0, SDPath, 0);
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4905      	ldr	r1, [pc, #20]	; (800bfe8 <AppendToFile+0x128>)
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	f7fe ff7b 	bl	800aed0 <f_mount>

  return stat;
 800bfda:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}
 800bfe8:	20000450 	.word	0x20000450
 800bfec:	0800dda4 	.word	0x0800dda4

0800bff0 <BlinkLED>:

// Blink onboard LED
void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  for ( int i = 0; i < num_blinks; i++ ) {
 800bffc:	2300      	movs	r3, #0
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	e012      	b.n	800c028 <BlinkLED+0x38>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800c002:	2201      	movs	r2, #1
 800c004:	2102      	movs	r1, #2
 800c006:	480c      	ldr	r0, [pc, #48]	; (800c038 <BlinkLED+0x48>)
 800c008:	f7f5 fec2 	bl	8001d90 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7f4 ff47 	bl	8000ea0 <HAL_Delay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800c012:	2200      	movs	r2, #0
 800c014:	2102      	movs	r1, #2
 800c016:	4808      	ldr	r0, [pc, #32]	; (800c038 <BlinkLED+0x48>)
 800c018:	f7f5 feba 	bl	8001d90 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7f4 ff3f 	bl	8000ea0 <HAL_Delay>
  for ( int i = 0; i < num_blinks; i++ ) {
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3301      	adds	r3, #1
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	78fb      	ldrb	r3, [r7, #3]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	dbe8      	blt.n	800c002 <BlinkLED+0x12>
  }
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	40020800 	.word	0x40020800

0800c03c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c03c:	b480      	push	{r7}
 800c03e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c040:	bf00      	nop
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c052:	f7f4 ff19 	bl	8000e88 <HAL_GetTick>
 800c056:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c058:	e006      	b.n	800c068 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c05a:	f7ff fc57 	bl	800b90c <BSP_SD_GetCardState>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c064:	2300      	movs	r3, #0
 800c066:	e009      	b.n	800c07c <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c068:	f7f4 ff0e 	bl	8000e88 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	429a      	cmp	r2, r3
 800c076:	d8f0      	bhi.n	800c05a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c08e:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <SD_CheckStatus+0x38>)
 800c090:	2201      	movs	r2, #1
 800c092:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c094:	f7ff fc3a 	bl	800b90c <BSP_SD_GetCardState>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d107      	bne.n	800c0ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c09e:	4b07      	ldr	r3, [pc, #28]	; (800c0bc <SD_CheckStatus+0x38>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	f023 0301 	bic.w	r3, r3, #1
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	4b04      	ldr	r3, [pc, #16]	; (800c0bc <SD_CheckStatus+0x38>)
 800c0ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c0ae:	4b03      	ldr	r3, [pc, #12]	; (800c0bc <SD_CheckStatus+0x38>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	b2db      	uxtb	r3, r3
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	20000117 	.word	0x20000117

0800c0c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c0ca:	f7ff fbc5 	bl	800b858 <BSP_SD_Init>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d107      	bne.n	800c0e4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff ffd4 	bl	800c084 <SD_CheckStatus>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	461a      	mov	r2, r3
 800c0e0:	4b04      	ldr	r3, [pc, #16]	; (800c0f4 <SD_initialize+0x34>)
 800c0e2:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800c0e4:	4b03      	ldr	r3, [pc, #12]	; (800c0f4 <SD_initialize+0x34>)
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	b2db      	uxtb	r3, r3
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000117 	.word	0x20000117

0800c0f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	4603      	mov	r3, r0
 800c100:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff ffbd 	bl	800c084 <SD_CheckStatus>
 800c10a:	4603      	mov	r3, r0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
 800c11e:	603b      	str	r3, [r7, #0]
 800c120:	4603      	mov	r3, r0
 800c122:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c128:	f247 5030 	movw	r0, #30000	; 0x7530
 800c12c:	f7ff ff8d 	bl	800c04a <SD_CheckStatusWithTimeout>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	da01      	bge.n	800c13a <SD_read+0x26>
  {
    return res;
 800c136:	7ffb      	ldrb	r3, [r7, #31]
 800c138:	e08b      	b.n	800c252 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	2b00      	cmp	r3, #0
 800c142:	f040 8085 	bne.w	800c250 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	68b8      	ldr	r0, [r7, #8]
 800c14c:	f7ff fbaa 	bl	800b8a4 <BSP_SD_ReadBlocks_DMA>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d133      	bne.n	800c1be <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c156:	4b41      	ldr	r3, [pc, #260]	; (800c25c <SD_read+0x148>)
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c15c:	f7f4 fe94 	bl	8000e88 <HAL_GetTick>
 800c160:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c162:	bf00      	nop
 800c164:	4b3d      	ldr	r3, [pc, #244]	; (800c25c <SD_read+0x148>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d108      	bne.n	800c17e <SD_read+0x6a>
 800c16c:	f7f4 fe8c 	bl	8000e88 <HAL_GetTick>
 800c170:	4602      	mov	r2, r0
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	f247 522f 	movw	r2, #29999	; 0x752f
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d9f2      	bls.n	800c164 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800c17e:	4b37      	ldr	r3, [pc, #220]	; (800c25c <SD_read+0x148>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <SD_read+0x78>
      {
        res = RES_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	77fb      	strb	r3, [r7, #31]
 800c18a:	e061      	b.n	800c250 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800c18c:	4b33      	ldr	r3, [pc, #204]	; (800c25c <SD_read+0x148>)
 800c18e:	2200      	movs	r2, #0
 800c190:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c192:	f7f4 fe79 	bl	8000e88 <HAL_GetTick>
 800c196:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c198:	e007      	b.n	800c1aa <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c19a:	f7ff fbb7 	bl	800b90c <BSP_SD_GetCardState>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <SD_read+0x96>
          {
            res = RES_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c1a8:	e052      	b.n	800c250 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c1aa:	f7f4 fe6d 	bl	8000e88 <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	f247 522f 	movw	r2, #29999	; 0x752f
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d9ee      	bls.n	800c19a <SD_read+0x86>
 800c1bc:	e048      	b.n	800c250 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800c1be:	2300      	movs	r3, #0
 800c1c0:	61bb      	str	r3, [r7, #24]
 800c1c2:	e034      	b.n	800c22e <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	607a      	str	r2, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4824      	ldr	r0, [pc, #144]	; (800c260 <SD_read+0x14c>)
 800c1d0:	f7ff fb68 	bl	800b8a4 <BSP_SD_ReadBlocks_DMA>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c1d8:	7fbb      	ldrb	r3, [r7, #30]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d12c      	bne.n	800c238 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800c1de:	4b1f      	ldr	r3, [pc, #124]	; (800c25c <SD_read+0x148>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800c1e4:	f7f4 fe50 	bl	8000e88 <HAL_GetTick>
 800c1e8:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c1ea:	bf00      	nop
 800c1ec:	4b1b      	ldr	r3, [pc, #108]	; (800c25c <SD_read+0x148>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d108      	bne.n	800c206 <SD_read+0xf2>
 800c1f4:	f7f4 fe48 	bl	8000e88 <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	f247 522f 	movw	r2, #29999	; 0x752f
 800c202:	4293      	cmp	r3, r2
 800c204:	d9f2      	bls.n	800c1ec <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800c206:	4b15      	ldr	r3, [pc, #84]	; (800c25c <SD_read+0x148>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d016      	beq.n	800c23c <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	4a13      	ldr	r2, [pc, #76]	; (800c260 <SD_read+0x14c>)
 800c212:	4618      	mov	r0, r3
 800c214:	4611      	mov	r1, r2
 800c216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c21a:	461a      	mov	r2, r3
 800c21c:	f001 f90e 	bl	800d43c <memcpy>
          buff += BLOCKSIZE;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c226:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	3301      	adds	r3, #1
 800c22c:	61bb      	str	r3, [r7, #24]
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d8c6      	bhi.n	800c1c4 <SD_read+0xb0>
 800c236:	e002      	b.n	800c23e <SD_read+0x12a>
        }
        else
        {
          break;
 800c238:	bf00      	nop
 800c23a:	e000      	b.n	800c23e <SD_read+0x12a>
            break;
 800c23c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d104      	bne.n	800c250 <SD_read+0x13c>
 800c246:	7fbb      	ldrb	r3, [r7, #30]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <SD_read+0x13c>
        res = RES_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800c250:	7ffb      	ldrb	r3, [r7, #31]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3720      	adds	r7, #32
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20000438 	.word	0x20000438
 800c260:	20000234 	.word	0x20000234

0800c264 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	607a      	str	r2, [r7, #4]
 800c26e:	603b      	str	r3, [r7, #0]
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800c278:	4b4c      	ldr	r3, [pc, #304]	; (800c3ac <SD_write+0x148>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c27e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c282:	f7ff fee2 	bl	800c04a <SD_CheckStatusWithTimeout>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	da01      	bge.n	800c290 <SD_write+0x2c>
  {
    return res;
 800c28c:	7ffb      	ldrb	r3, [r7, #31]
 800c28e:	e088      	b.n	800c3a2 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	f003 0303 	and.w	r3, r3, #3
 800c296:	2b00      	cmp	r3, #0
 800c298:	f040 8082 	bne.w	800c3a0 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	68b8      	ldr	r0, [r7, #8]
 800c2a2:	f7ff fb19 	bl	800b8d8 <BSP_SD_WriteBlocks_DMA>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d130      	bne.n	800c30e <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c2ac:	f7f4 fdec 	bl	8000e88 <HAL_GetTick>
 800c2b0:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c2b2:	bf00      	nop
 800c2b4:	4b3d      	ldr	r3, [pc, #244]	; (800c3ac <SD_write+0x148>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d108      	bne.n	800c2ce <SD_write+0x6a>
 800c2bc:	f7f4 fde4 	bl	8000e88 <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	f247 522f 	movw	r2, #29999	; 0x752f
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d9f2      	bls.n	800c2b4 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800c2ce:	4b37      	ldr	r3, [pc, #220]	; (800c3ac <SD_write+0x148>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <SD_write+0x78>
      {
        res = RES_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	77fb      	strb	r3, [r7, #31]
 800c2da:	e061      	b.n	800c3a0 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800c2dc:	4b33      	ldr	r3, [pc, #204]	; (800c3ac <SD_write+0x148>)
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c2e2:	f7f4 fdd1 	bl	8000e88 <HAL_GetTick>
 800c2e6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c2e8:	e007      	b.n	800c2fa <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c2ea:	f7ff fb0f 	bl	800b90c <BSP_SD_GetCardState>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d102      	bne.n	800c2fa <SD_write+0x96>
          {
            res = RES_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	77fb      	strb	r3, [r7, #31]
            break;
 800c2f8:	e052      	b.n	800c3a0 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c2fa:	f7f4 fdc5 	bl	8000e88 <HAL_GetTick>
 800c2fe:	4602      	mov	r2, r0
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	f247 522f 	movw	r2, #29999	; 0x752f
 800c308:	4293      	cmp	r3, r2
 800c30a:	d9ee      	bls.n	800c2ea <SD_write+0x86>
 800c30c:	e048      	b.n	800c3a0 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800c30e:	2300      	movs	r3, #0
 800c310:	61bb      	str	r3, [r7, #24]
 800c312:	e034      	b.n	800c37e <SD_write+0x11a>
      {
        WriteStatus = 0;
 800c314:	4b25      	ldr	r3, [pc, #148]	; (800c3ac <SD_write+0x148>)
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	4619      	mov	r1, r3
 800c324:	4822      	ldr	r0, [pc, #136]	; (800c3b0 <SD_write+0x14c>)
 800c326:	f7ff fad7 	bl	800b8d8 <BSP_SD_WriteBlocks_DMA>
 800c32a:	4603      	mov	r3, r0
 800c32c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c32e:	7fbb      	ldrb	r3, [r7, #30]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d129      	bne.n	800c388 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800c334:	f7f4 fda8 	bl	8000e88 <HAL_GetTick>
 800c338:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c33a:	bf00      	nop
 800c33c:	4b1b      	ldr	r3, [pc, #108]	; (800c3ac <SD_write+0x148>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d108      	bne.n	800c356 <SD_write+0xf2>
 800c344:	f7f4 fda0 	bl	8000e88 <HAL_GetTick>
 800c348:	4602      	mov	r2, r0
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c352:	4293      	cmp	r3, r2
 800c354:	d9f2      	bls.n	800c33c <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800c356:	4b15      	ldr	r3, [pc, #84]	; (800c3ac <SD_write+0x148>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d016      	beq.n	800c38c <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	4a13      	ldr	r2, [pc, #76]	; (800c3b0 <SD_write+0x14c>)
 800c362:	4618      	mov	r0, r3
 800c364:	4611      	mov	r1, r2
 800c366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c36a:	461a      	mov	r2, r3
 800c36c:	f001 f866 	bl	800d43c <memcpy>
          buff += BLOCKSIZE;
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c376:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	3301      	adds	r3, #1
 800c37c:	61bb      	str	r3, [r7, #24]
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	429a      	cmp	r2, r3
 800c384:	d8c6      	bhi.n	800c314 <SD_write+0xb0>
 800c386:	e002      	b.n	800c38e <SD_write+0x12a>
        }
        else
        {
          break;
 800c388:	bf00      	nop
 800c38a:	e000      	b.n	800c38e <SD_write+0x12a>
            break;
 800c38c:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d104      	bne.n	800c3a0 <SD_write+0x13c>
 800c396:	7fbb      	ldrb	r3, [r7, #30]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <SD_write+0x13c>
        res = RES_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800c3a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3720      	adds	r7, #32
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20000434 	.word	0x20000434
 800c3b0:	20000234 	.word	0x20000234

0800c3b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08c      	sub	sp, #48	; 0x30
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	603a      	str	r2, [r7, #0]
 800c3be:	71fb      	strb	r3, [r7, #7]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c3ca:	4b25      	ldr	r3, [pc, #148]	; (800c460 <SD_ioctl+0xac>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <SD_ioctl+0x28>
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e03c      	b.n	800c456 <SD_ioctl+0xa2>

  switch (cmd)
 800c3dc:	79bb      	ldrb	r3, [r7, #6]
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d834      	bhi.n	800c44c <SD_ioctl+0x98>
 800c3e2:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <SD_ioctl+0x34>)
 800c3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e8:	0800c3f9 	.word	0x0800c3f9
 800c3ec:	0800c401 	.word	0x0800c401
 800c3f0:	0800c419 	.word	0x0800c419
 800c3f4:	0800c433 	.word	0x0800c433
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3fe:	e028      	b.n	800c452 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c400:	f107 030c 	add.w	r3, r7, #12
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff fa91 	bl	800b92c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c416:	e01c      	b.n	800c452 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c418:	f107 030c 	add.w	r3, r7, #12
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff fa85 	bl	800b92c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c424:	b29a      	uxth	r2, r3
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c430:	e00f      	b.n	800c452 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	4618      	mov	r0, r3
 800c438:	f7ff fa78 	bl	800b92c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	0a5a      	lsrs	r2, r3, #9
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c44a:	e002      	b.n	800c452 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c44c:	2304      	movs	r3, #4
 800c44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c456:	4618      	mov	r0, r3
 800c458:	3730      	adds	r7, #48	; 0x30
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	20000117 	.word	0x20000117

0800c464 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c464:	b480      	push	{r7}
 800c466:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800c468:	4b03      	ldr	r3, [pc, #12]	; (800c478 <BSP_SD_WriteCpltCallback+0x14>)
 800c46a:	2201      	movs	r2, #1
 800c46c:	601a      	str	r2, [r3, #0]
}
 800c46e:	bf00      	nop
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	20000434 	.word	0x20000434

0800c47c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c480:	4b03      	ldr	r3, [pc, #12]	; (800c490 <BSP_SD_ReadCpltCallback+0x14>)
 800c482:	2201      	movs	r2, #1
 800c484:	601a      	str	r2, [r3, #0]
}
 800c486:	bf00      	nop
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	20000438 	.word	0x20000438

0800c494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c49a:	2300      	movs	r3, #0
 800c49c:	607b      	str	r3, [r7, #4]
 800c49e:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <HAL_MspInit+0x4c>)
 800c4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a2:	4a0f      	ldr	r2, [pc, #60]	; (800c4e0 <HAL_MspInit+0x4c>)
 800c4a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4a8:	6453      	str	r3, [r2, #68]	; 0x44
 800c4aa:	4b0d      	ldr	r3, [pc, #52]	; (800c4e0 <HAL_MspInit+0x4c>)
 800c4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4b2:	607b      	str	r3, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	603b      	str	r3, [r7, #0]
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <HAL_MspInit+0x4c>)
 800c4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4be:	4a08      	ldr	r2, [pc, #32]	; (800c4e0 <HAL_MspInit+0x4c>)
 800c4c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4c4:	6413      	str	r3, [r2, #64]	; 0x40
 800c4c6:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <HAL_MspInit+0x4c>)
 800c4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4ce:	603b      	str	r3, [r7, #0]
 800c4d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c4d2:	bf00      	nop
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	40023800 	.word	0x40023800

0800c4e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4ec:	f107 0314 	add.w	r3, r7, #20
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	605a      	str	r2, [r3, #4]
 800c4f6:	609a      	str	r2, [r3, #8]
 800c4f8:	60da      	str	r2, [r3, #12]
 800c4fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a19      	ldr	r2, [pc, #100]	; (800c568 <HAL_I2C_MspInit+0x84>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d12b      	bne.n	800c55e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c506:	2300      	movs	r3, #0
 800c508:	613b      	str	r3, [r7, #16]
 800c50a:	4b18      	ldr	r3, [pc, #96]	; (800c56c <HAL_I2C_MspInit+0x88>)
 800c50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50e:	4a17      	ldr	r2, [pc, #92]	; (800c56c <HAL_I2C_MspInit+0x88>)
 800c510:	f043 0302 	orr.w	r3, r3, #2
 800c514:	6313      	str	r3, [r2, #48]	; 0x30
 800c516:	4b15      	ldr	r3, [pc, #84]	; (800c56c <HAL_I2C_MspInit+0x88>)
 800c518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51a:	f003 0302 	and.w	r3, r3, #2
 800c51e:	613b      	str	r3, [r7, #16]
 800c520:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c522:	23c0      	movs	r3, #192	; 0xc0
 800c524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c526:	2312      	movs	r3, #18
 800c528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c52e:	2303      	movs	r3, #3
 800c530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c532:	2304      	movs	r3, #4
 800c534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c536:	f107 0314 	add.w	r3, r7, #20
 800c53a:	4619      	mov	r1, r3
 800c53c:	480c      	ldr	r0, [pc, #48]	; (800c570 <HAL_I2C_MspInit+0x8c>)
 800c53e:	f7f5 f97b 	bl	8001838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c542:	2300      	movs	r3, #0
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	4b09      	ldr	r3, [pc, #36]	; (800c56c <HAL_I2C_MspInit+0x88>)
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	4a08      	ldr	r2, [pc, #32]	; (800c56c <HAL_I2C_MspInit+0x88>)
 800c54c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c550:	6413      	str	r3, [r2, #64]	; 0x40
 800c552:	4b06      	ldr	r3, [pc, #24]	; (800c56c <HAL_I2C_MspInit+0x88>)
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800c55e:	bf00      	nop
 800c560:	3728      	adds	r7, #40	; 0x28
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	40005400 	.word	0x40005400
 800c56c:	40023800 	.word	0x40023800
 800c570:	40020400 	.word	0x40020400

0800c574 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a08      	ldr	r2, [pc, #32]	; (800c5a4 <HAL_I2C_MspDeInit+0x30>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d109      	bne.n	800c59a <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800c586:	4b08      	ldr	r3, [pc, #32]	; (800c5a8 <HAL_I2C_MspDeInit+0x34>)
 800c588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58a:	4a07      	ldr	r2, [pc, #28]	; (800c5a8 <HAL_I2C_MspDeInit+0x34>)
 800c58c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c590:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800c592:	21c0      	movs	r1, #192	; 0xc0
 800c594:	4805      	ldr	r0, [pc, #20]	; (800c5ac <HAL_I2C_MspDeInit+0x38>)
 800c596:	f7f5 fae9 	bl	8001b6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	40005400 	.word	0x40005400
 800c5a8:	40023800 	.word	0x40023800
 800c5ac:	40020400 	.word	0x40020400

0800c5b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08a      	sub	sp, #40	; 0x28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5b8:	f107 0314 	add.w	r3, r7, #20
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]
 800c5c0:	605a      	str	r2, [r3, #4]
 800c5c2:	609a      	str	r2, [r3, #8]
 800c5c4:	60da      	str	r2, [r3, #12]
 800c5c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a70      	ldr	r2, [pc, #448]	; (800c790 <HAL_SD_MspInit+0x1e0>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	f040 80da 	bne.w	800c788 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	613b      	str	r3, [r7, #16]
 800c5d8:	4b6e      	ldr	r3, [pc, #440]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c5da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5dc:	4a6d      	ldr	r2, [pc, #436]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c5de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c5e2:	6453      	str	r3, [r2, #68]	; 0x44
 800c5e4:	4b6b      	ldr	r3, [pc, #428]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5ec:	613b      	str	r3, [r7, #16]
 800c5ee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	4b67      	ldr	r3, [pc, #412]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f8:	4a66      	ldr	r2, [pc, #408]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c5fa:	f043 0304 	orr.w	r3, r3, #4
 800c5fe:	6313      	str	r3, [r2, #48]	; 0x30
 800c600:	4b64      	ldr	r3, [pc, #400]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c604:	f003 0304 	and.w	r3, r3, #4
 800c608:	60fb      	str	r3, [r7, #12]
 800c60a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c60c:	2300      	movs	r3, #0
 800c60e:	60bb      	str	r3, [r7, #8]
 800c610:	4b60      	ldr	r3, [pc, #384]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c614:	4a5f      	ldr	r2, [pc, #380]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c616:	f043 0308 	orr.w	r3, r3, #8
 800c61a:	6313      	str	r3, [r2, #48]	; 0x30
 800c61c:	4b5d      	ldr	r3, [pc, #372]	; (800c794 <HAL_SD_MspInit+0x1e4>)
 800c61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c620:	f003 0308 	and.w	r3, r3, #8
 800c624:	60bb      	str	r3, [r7, #8]
 800c626:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800c628:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800c62c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c62e:	2302      	movs	r3, #2
 800c630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c632:	2301      	movs	r3, #1
 800c634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c636:	2303      	movs	r3, #3
 800c638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c63a:	230c      	movs	r3, #12
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c63e:	f107 0314 	add.w	r3, r7, #20
 800c642:	4619      	mov	r1, r3
 800c644:	4854      	ldr	r0, [pc, #336]	; (800c798 <HAL_SD_MspInit+0x1e8>)
 800c646:	f7f5 f8f7 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c64a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c64e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c650:	2302      	movs	r3, #2
 800c652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c658:	2303      	movs	r3, #3
 800c65a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c65c:	230c      	movs	r3, #12
 800c65e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c660:	f107 0314 	add.w	r3, r7, #20
 800c664:	4619      	mov	r1, r3
 800c666:	484c      	ldr	r0, [pc, #304]	; (800c798 <HAL_SD_MspInit+0x1e8>)
 800c668:	f7f5 f8e6 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c66c:	2304      	movs	r3, #4
 800c66e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c670:	2302      	movs	r3, #2
 800c672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c674:	2301      	movs	r3, #1
 800c676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c678:	2303      	movs	r3, #3
 800c67a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c67c:	230c      	movs	r3, #12
 800c67e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c680:	f107 0314 	add.w	r3, r7, #20
 800c684:	4619      	mov	r1, r3
 800c686:	4845      	ldr	r0, [pc, #276]	; (800c79c <HAL_SD_MspInit+0x1ec>)
 800c688:	f7f5 f8d6 	bl	8001838 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800c68c:	4b44      	ldr	r3, [pc, #272]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c68e:	4a45      	ldr	r2, [pc, #276]	; (800c7a4 <HAL_SD_MspInit+0x1f4>)
 800c690:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800c692:	4b43      	ldr	r3, [pc, #268]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c694:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c698:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c69a:	4b41      	ldr	r3, [pc, #260]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c6a0:	4b3f      	ldr	r3, [pc, #252]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c6a6:	4b3e      	ldr	r3, [pc, #248]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6ac:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c6ae:	4b3c      	ldr	r3, [pc, #240]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c6b4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c6b6:	4b3a      	ldr	r3, [pc, #232]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c6bc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800c6be:	4b38      	ldr	r3, [pc, #224]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6c0:	2220      	movs	r2, #32
 800c6c2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c6c4:	4b36      	ldr	r3, [pc, #216]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c6ca:	4b35      	ldr	r3, [pc, #212]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6cc:	2204      	movs	r2, #4
 800c6ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c6d0:	4b33      	ldr	r3, [pc, #204]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800c6d6:	4b32      	ldr	r3, [pc, #200]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c6dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800c6de:	4b30      	ldr	r3, [pc, #192]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c6e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800c6e6:	482e      	ldr	r0, [pc, #184]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6e8:	f7f4 fd0e 	bl	8001108 <HAL_DMA_Init>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800c6f2:	f7ff fca3 	bl	800c03c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a29      	ldr	r2, [pc, #164]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6fa:	63da      	str	r2, [r3, #60]	; 0x3c
 800c6fc:	4a28      	ldr	r2, [pc, #160]	; (800c7a0 <HAL_SD_MspInit+0x1f0>)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800c702:	4b29      	ldr	r3, [pc, #164]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c704:	4a29      	ldr	r2, [pc, #164]	; (800c7ac <HAL_SD_MspInit+0x1fc>)
 800c706:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800c708:	4b27      	ldr	r3, [pc, #156]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c70a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c70e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c710:	4b25      	ldr	r3, [pc, #148]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c712:	2240      	movs	r2, #64	; 0x40
 800c714:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c716:	4b24      	ldr	r3, [pc, #144]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c718:	2200      	movs	r2, #0
 800c71a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c71c:	4b22      	ldr	r3, [pc, #136]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c71e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c722:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c724:	4b20      	ldr	r3, [pc, #128]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c72a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c72c:	4b1e      	ldr	r3, [pc, #120]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c72e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c732:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800c734:	4b1c      	ldr	r3, [pc, #112]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c736:	2220      	movs	r2, #32
 800c738:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c73a:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c740:	4b19      	ldr	r3, [pc, #100]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c742:	2204      	movs	r2, #4
 800c744:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c746:	4b18      	ldr	r3, [pc, #96]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c748:	2203      	movs	r2, #3
 800c74a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800c74c:	4b16      	ldr	r3, [pc, #88]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c74e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c752:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800c754:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c756:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c75a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800c75c:	4812      	ldr	r0, [pc, #72]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c75e:	f7f4 fcd3 	bl	8001108 <HAL_DMA_Init>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d001      	beq.n	800c76c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800c768:	f7ff fc68 	bl	800c03c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a0e      	ldr	r2, [pc, #56]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c770:	641a      	str	r2, [r3, #64]	; 0x40
 800c772:	4a0d      	ldr	r2, [pc, #52]	; (800c7a8 <HAL_SD_MspInit+0x1f8>)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800c778:	2200      	movs	r2, #0
 800c77a:	2100      	movs	r1, #0
 800c77c:	2031      	movs	r0, #49	; 0x31
 800c77e:	f7f4 fc8c 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800c782:	2031      	movs	r0, #49	; 0x31
 800c784:	f7f4 fca5 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800c788:	bf00      	nop
 800c78a:	3728      	adds	r7, #40	; 0x28
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	40012c00 	.word	0x40012c00
 800c794:	40023800 	.word	0x40023800
 800c798:	40020800 	.word	0x40020800
 800c79c:	40020c00 	.word	0x40020c00
 800c7a0:	200008b4 	.word	0x200008b4
 800c7a4:	40026458 	.word	0x40026458
 800c7a8:	20000968 	.word	0x20000968
 800c7ac:	400264a0 	.word	0x400264a0

0800c7b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c7b4:	bf00      	nop
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c7c2:	e7fe      	b.n	800c7c2 <HardFault_Handler+0x4>

0800c7c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c7c8:	e7fe      	b.n	800c7c8 <MemManage_Handler+0x4>

0800c7ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c7ce:	e7fe      	b.n	800c7ce <BusFault_Handler+0x4>

0800c7d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c7d4:	e7fe      	b.n	800c7d4 <UsageFault_Handler+0x4>

0800c7d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c7da:	bf00      	nop
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c7e8:	bf00      	nop
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c7f6:	bf00      	nop
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c804:	f7f4 fb2c 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c808:	bf00      	nop
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800c810:	4802      	ldr	r0, [pc, #8]	; (800c81c <SDIO_IRQHandler+0x10>)
 800c812:	f7f8 f9fd 	bl	8004c10 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800c816:	bf00      	nop
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	200009c8 	.word	0x200009c8

0800c820 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800c824:	4802      	ldr	r0, [pc, #8]	; (800c830 <DMA2_Stream3_IRQHandler+0x10>)
 800c826:	f7f4 fd9f 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800c82a:	bf00      	nop
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	200008b4 	.word	0x200008b4

0800c834 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800c838:	4802      	ldr	r0, [pc, #8]	; (800c844 <OTG_FS_IRQHandler+0x10>)
 800c83a:	f7f6 fb98 	bl	8002f6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c83e:	bf00      	nop
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20001ce8 	.word	0x20001ce8

0800c848 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800c84c:	4802      	ldr	r0, [pc, #8]	; (800c858 <DMA2_Stream6_IRQHandler+0x10>)
 800c84e:	f7f4 fd8b 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800c852:	bf00      	nop
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	20000968 	.word	0x20000968

0800c85c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c864:	4b11      	ldr	r3, [pc, #68]	; (800c8ac <_sbrk+0x50>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d102      	bne.n	800c872 <_sbrk+0x16>
		heap_end = &end;
 800c86c:	4b0f      	ldr	r3, [pc, #60]	; (800c8ac <_sbrk+0x50>)
 800c86e:	4a10      	ldr	r2, [pc, #64]	; (800c8b0 <_sbrk+0x54>)
 800c870:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c872:	4b0e      	ldr	r3, [pc, #56]	; (800c8ac <_sbrk+0x50>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c878:	4b0c      	ldr	r3, [pc, #48]	; (800c8ac <_sbrk+0x50>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4413      	add	r3, r2
 800c880:	466a      	mov	r2, sp
 800c882:	4293      	cmp	r3, r2
 800c884:	d907      	bls.n	800c896 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c886:	f000 fd9f 	bl	800d3c8 <__errno>
 800c88a:	4602      	mov	r2, r0
 800c88c:	230c      	movs	r3, #12
 800c88e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c890:	f04f 33ff 	mov.w	r3, #4294967295
 800c894:	e006      	b.n	800c8a4 <_sbrk+0x48>
	}

	heap_end += incr;
 800c896:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <_sbrk+0x50>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4413      	add	r3, r2
 800c89e:	4a03      	ldr	r2, [pc, #12]	; (800c8ac <_sbrk+0x50>)
 800c8a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	2000043c 	.word	0x2000043c
 800c8b0:	200022f8 	.word	0x200022f8

0800c8b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c8b8:	4b16      	ldr	r3, [pc, #88]	; (800c914 <SystemInit+0x60>)
 800c8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8be:	4a15      	ldr	r2, [pc, #84]	; (800c914 <SystemInit+0x60>)
 800c8c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c8c8:	4b13      	ldr	r3, [pc, #76]	; (800c918 <SystemInit+0x64>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a12      	ldr	r2, [pc, #72]	; (800c918 <SystemInit+0x64>)
 800c8ce:	f043 0301 	orr.w	r3, r3, #1
 800c8d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c8d4:	4b10      	ldr	r3, [pc, #64]	; (800c918 <SystemInit+0x64>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c8da:	4b0f      	ldr	r3, [pc, #60]	; (800c918 <SystemInit+0x64>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a0e      	ldr	r2, [pc, #56]	; (800c918 <SystemInit+0x64>)
 800c8e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c8e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c8ea:	4b0b      	ldr	r3, [pc, #44]	; (800c918 <SystemInit+0x64>)
 800c8ec:	4a0b      	ldr	r2, [pc, #44]	; (800c91c <SystemInit+0x68>)
 800c8ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c8f0:	4b09      	ldr	r3, [pc, #36]	; (800c918 <SystemInit+0x64>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a08      	ldr	r2, [pc, #32]	; (800c918 <SystemInit+0x64>)
 800c8f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c8fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c8fc:	4b06      	ldr	r3, [pc, #24]	; (800c918 <SystemInit+0x64>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c902:	4b04      	ldr	r3, [pc, #16]	; (800c914 <SystemInit+0x60>)
 800c904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c908:	609a      	str	r2, [r3, #8]
#endif
}
 800c90a:	bf00      	nop
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	e000ed00 	.word	0xe000ed00
 800c918:	40023800 	.word	0x40023800
 800c91c:	24003010 	.word	0x24003010

0800c920 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c924:	2200      	movs	r2, #0
 800c926:	4912      	ldr	r1, [pc, #72]	; (800c970 <MX_USB_DEVICE_Init+0x50>)
 800c928:	4812      	ldr	r0, [pc, #72]	; (800c974 <MX_USB_DEVICE_Init+0x54>)
 800c92a:	f7fb fd41 	bl	80083b0 <USBD_Init>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c934:	f7ff fb82 	bl	800c03c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c938:	490f      	ldr	r1, [pc, #60]	; (800c978 <MX_USB_DEVICE_Init+0x58>)
 800c93a:	480e      	ldr	r0, [pc, #56]	; (800c974 <MX_USB_DEVICE_Init+0x54>)
 800c93c:	f7fb fd63 	bl	8008406 <USBD_RegisterClass>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c946:	f7ff fb79 	bl	800c03c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c94a:	490c      	ldr	r1, [pc, #48]	; (800c97c <MX_USB_DEVICE_Init+0x5c>)
 800c94c:	4809      	ldr	r0, [pc, #36]	; (800c974 <MX_USB_DEVICE_Init+0x54>)
 800c94e:	f7fb fc91 	bl	8008274 <USBD_CDC_RegisterInterface>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c958:	f7ff fb70 	bl	800c03c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c95c:	4805      	ldr	r0, [pc, #20]	; (800c974 <MX_USB_DEVICE_Init+0x54>)
 800c95e:	f7fb fd6c 	bl	800843a <USBD_Start>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c968:	f7ff fb68 	bl	800c03c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c96c:	bf00      	nop
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	2000012c 	.word	0x2000012c
 800c974:	20000a4c 	.word	0x20000a4c
 800c978:	20000014 	.word	0x20000014
 800c97c:	2000011c 	.word	0x2000011c

0800c980 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c984:	2200      	movs	r2, #0
 800c986:	4905      	ldr	r1, [pc, #20]	; (800c99c <CDC_Init_FS+0x1c>)
 800c988:	4805      	ldr	r0, [pc, #20]	; (800c9a0 <CDC_Init_FS+0x20>)
 800c98a:	f7fb fc8a 	bl	80082a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c98e:	4905      	ldr	r1, [pc, #20]	; (800c9a4 <CDC_Init_FS+0x24>)
 800c990:	4803      	ldr	r0, [pc, #12]	; (800c9a0 <CDC_Init_FS+0x20>)
 800c992:	f7fb fca0 	bl	80082d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c996:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c998:	4618      	mov	r0, r3
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	200014e8 	.word	0x200014e8
 800c9a0:	20000a4c 	.word	0x20000a4c
 800c9a4:	20000ce8 	.word	0x20000ce8

0800c9a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c9ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	4603      	mov	r3, r0
 800c9c0:	6039      	str	r1, [r7, #0]
 800c9c2:	71fb      	strb	r3, [r7, #7]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800c9c8:	f107 0308 	add.w	r3, r7, #8
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800c9d4:	79fb      	ldrb	r3, [r7, #7]
 800c9d6:	2b23      	cmp	r3, #35	; 0x23
 800c9d8:	d87c      	bhi.n	800cad4 <CDC_Control_FS+0x11c>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <CDC_Control_FS+0x28>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800cad5 	.word	0x0800cad5
 800c9e4:	0800cad5 	.word	0x0800cad5
 800c9e8:	0800cad5 	.word	0x0800cad5
 800c9ec:	0800cad5 	.word	0x0800cad5
 800c9f0:	0800cad5 	.word	0x0800cad5
 800c9f4:	0800cad5 	.word	0x0800cad5
 800c9f8:	0800cad5 	.word	0x0800cad5
 800c9fc:	0800cad5 	.word	0x0800cad5
 800ca00:	0800cad5 	.word	0x0800cad5
 800ca04:	0800cad5 	.word	0x0800cad5
 800ca08:	0800cad5 	.word	0x0800cad5
 800ca0c:	0800cad5 	.word	0x0800cad5
 800ca10:	0800cad5 	.word	0x0800cad5
 800ca14:	0800cad5 	.word	0x0800cad5
 800ca18:	0800cad5 	.word	0x0800cad5
 800ca1c:	0800cad5 	.word	0x0800cad5
 800ca20:	0800cad5 	.word	0x0800cad5
 800ca24:	0800cad5 	.word	0x0800cad5
 800ca28:	0800cad5 	.word	0x0800cad5
 800ca2c:	0800cad5 	.word	0x0800cad5
 800ca30:	0800cad5 	.word	0x0800cad5
 800ca34:	0800cad5 	.word	0x0800cad5
 800ca38:	0800cad5 	.word	0x0800cad5
 800ca3c:	0800cad5 	.word	0x0800cad5
 800ca40:	0800cad5 	.word	0x0800cad5
 800ca44:	0800cad5 	.word	0x0800cad5
 800ca48:	0800cad5 	.word	0x0800cad5
 800ca4c:	0800cad5 	.word	0x0800cad5
 800ca50:	0800cad5 	.word	0x0800cad5
 800ca54:	0800cad5 	.word	0x0800cad5
 800ca58:	0800cad5 	.word	0x0800cad5
 800ca5c:	0800cad5 	.word	0x0800cad5
 800ca60:	0800ca71 	.word	0x0800ca71
 800ca64:	0800ca9d 	.word	0x0800ca9d
 800ca68:	0800cad5 	.word	0x0800cad5
 800ca6c:	0800cad5 	.word	0x0800cad5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       tempbuf[0] = pbuf[0];
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	723b      	strb	r3, [r7, #8]
       tempbuf[1] = pbuf[1];
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	785b      	ldrb	r3, [r3, #1]
 800ca7a:	727b      	strb	r3, [r7, #9]
       tempbuf[2] = pbuf[2];
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	789b      	ldrb	r3, [r3, #2]
 800ca80:	72bb      	strb	r3, [r7, #10]
       tempbuf[3] = pbuf[3];
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	78db      	ldrb	r3, [r3, #3]
 800ca86:	72fb      	strb	r3, [r7, #11]
       tempbuf[4] = pbuf[4];
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	791b      	ldrb	r3, [r3, #4]
 800ca8c:	733b      	strb	r3, [r7, #12]
       tempbuf[5] = pbuf[5];
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	795b      	ldrb	r3, [r3, #5]
 800ca92:	737b      	strb	r3, [r7, #13]
       tempbuf[6] = pbuf[6];
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	799b      	ldrb	r3, [r3, #6]
 800ca98:	73bb      	strb	r3, [r7, #14]
       break;
 800ca9a:	e01c      	b.n	800cad6 <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
       pbuf[0] = tempbuf[0];
 800ca9c:	7a3a      	ldrb	r2, [r7, #8]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	701a      	strb	r2, [r3, #0]
       pbuf[1] = tempbuf[1];
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	3301      	adds	r3, #1
 800caa6:	7a7a      	ldrb	r2, [r7, #9]
 800caa8:	701a      	strb	r2, [r3, #0]
       pbuf[2] = tempbuf[2];
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	3302      	adds	r3, #2
 800caae:	7aba      	ldrb	r2, [r7, #10]
 800cab0:	701a      	strb	r2, [r3, #0]
       pbuf[3] = tempbuf[3];
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	3303      	adds	r3, #3
 800cab6:	7afa      	ldrb	r2, [r7, #11]
 800cab8:	701a      	strb	r2, [r3, #0]
       pbuf[4] = tempbuf[4];
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	3304      	adds	r3, #4
 800cabe:	7b3a      	ldrb	r2, [r7, #12]
 800cac0:	701a      	strb	r2, [r3, #0]
       pbuf[5] = tempbuf[5];
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	3305      	adds	r3, #5
 800cac6:	7b7a      	ldrb	r2, [r7, #13]
 800cac8:	701a      	strb	r2, [r3, #0]
       pbuf[6] = tempbuf[6];
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	3306      	adds	r3, #6
 800cace:	7bba      	ldrb	r2, [r7, #14]
 800cad0:	701a      	strb	r2, [r3, #0]
       break;
 800cad2:	e000      	b.n	800cad6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cad4:	bf00      	nop
  }

  return (USBD_OK);
 800cad6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	4805      	ldr	r0, [pc, #20]	; (800cb08 <CDC_Receive_FS+0x24>)
 800caf2:	f7fb fbf0 	bl	80082d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800caf6:	4804      	ldr	r0, [pc, #16]	; (800cb08 <CDC_Receive_FS+0x24>)
 800caf8:	f7fb fc30 	bl	800835c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cafc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20000a4c 	.word	0x20000a4c

0800cb0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb1c:	4b0d      	ldr	r3, [pc, #52]	; (800cb54 <CDC_Transmit_FS+0x48>)
 800cb1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d001      	beq.n	800cb32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e00b      	b.n	800cb4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb32:	887b      	ldrh	r3, [r7, #2]
 800cb34:	461a      	mov	r2, r3
 800cb36:	6879      	ldr	r1, [r7, #4]
 800cb38:	4806      	ldr	r0, [pc, #24]	; (800cb54 <CDC_Transmit_FS+0x48>)
 800cb3a:	f7fb fbb2 	bl	80082a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb3e:	4805      	ldr	r0, [pc, #20]	; (800cb54 <CDC_Transmit_FS+0x48>)
 800cb40:	f7fb fbdd 	bl	80082fe <USBD_CDC_TransmitPacket>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20000a4c 	.word	0x20000a4c

0800cb58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b08a      	sub	sp, #40	; 0x28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb60:	f107 0314 	add.w	r3, r7, #20
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	605a      	str	r2, [r3, #4]
 800cb6a:	609a      	str	r2, [r3, #8]
 800cb6c:	60da      	str	r2, [r3, #12]
 800cb6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb78:	d13a      	bne.n	800cbf0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	613b      	str	r3, [r7, #16]
 800cb7e:	4b1e      	ldr	r3, [pc, #120]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb82:	4a1d      	ldr	r2, [pc, #116]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cb84:	f043 0301 	orr.w	r3, r3, #1
 800cb88:	6313      	str	r3, [r2, #48]	; 0x30
 800cb8a:	4b1b      	ldr	r3, [pc, #108]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8e:	f003 0301 	and.w	r3, r3, #1
 800cb92:	613b      	str	r3, [r7, #16]
 800cb94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cb96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cb9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cba4:	2303      	movs	r3, #3
 800cba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cba8:	230a      	movs	r3, #10
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbac:	f107 0314 	add.w	r3, r7, #20
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4812      	ldr	r0, [pc, #72]	; (800cbfc <HAL_PCD_MspInit+0xa4>)
 800cbb4:	f7f4 fe40 	bl	8001838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cbb8:	4b0f      	ldr	r3, [pc, #60]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbbc:	4a0e      	ldr	r2, [pc, #56]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cbbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc2:	6353      	str	r3, [r2, #52]	; 0x34
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	4b0b      	ldr	r3, [pc, #44]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cbca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbcc:	4a0a      	ldr	r2, [pc, #40]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cbce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cbd2:	6453      	str	r3, [r2, #68]	; 0x44
 800cbd4:	4b08      	ldr	r3, [pc, #32]	; (800cbf8 <HAL_PCD_MspInit+0xa0>)
 800cbd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbdc:	60fb      	str	r3, [r7, #12]
 800cbde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	2043      	movs	r0, #67	; 0x43
 800cbe6:	f7f4 fa58 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cbea:	2043      	movs	r0, #67	; 0x43
 800cbec:	f7f4 fa71 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cbf0:	bf00      	nop
 800cbf2:	3728      	adds	r7, #40	; 0x28
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	40023800 	.word	0x40023800
 800cbfc:	40020000 	.word	0x40020000

0800cc00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cc14:	4619      	mov	r1, r3
 800cc16:	4610      	mov	r0, r2
 800cc18:	f7fb fc58 	bl	80084cc <USBD_LL_SetupStage>
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cc36:	78fa      	ldrb	r2, [r7, #3]
 800cc38:	6879      	ldr	r1, [r7, #4]
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	1a9b      	subs	r3, r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	440b      	add	r3, r1
 800cc44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	f7fb fc88 	bl	8008562 <USBD_LL_DataOutStage>
}
 800cc52:	bf00      	nop
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cc6c:	78fa      	ldrb	r2, [r7, #3]
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	4613      	mov	r3, r2
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	1a9b      	subs	r3, r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	440b      	add	r3, r1
 800cc7a:	3348      	adds	r3, #72	; 0x48
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	78fb      	ldrb	r3, [r7, #3]
 800cc80:	4619      	mov	r1, r3
 800cc82:	f7fb fcdf 	bl	8008644 <USBD_LL_DataInStage>
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fb fded 	bl	800887c <USBD_LL_SOF>
}
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b084      	sub	sp, #16
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d102      	bne.n	800ccc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
 800ccc2:	e008      	b.n	800ccd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d102      	bne.n	800ccd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cccc:	2301      	movs	r3, #1
 800ccce:	73fb      	strb	r3, [r7, #15]
 800ccd0:	e001      	b.n	800ccd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ccd2:	f7ff f9b3 	bl	800c03c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ccdc:	7bfa      	ldrb	r2, [r7, #15]
 800ccde:	4611      	mov	r1, r2
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fb fd95 	bl	8008810 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fb fd4e 	bl	800878e <USBD_LL_Reset>
}
 800ccf2:	bf00      	nop
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
	...

0800ccfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fb fd90 	bl	8008830 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	6812      	ldr	r2, [r2, #0]
 800cd1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd22:	f043 0301 	orr.w	r3, r3, #1
 800cd26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a1b      	ldr	r3, [r3, #32]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d005      	beq.n	800cd3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd30:	4b04      	ldr	r3, [pc, #16]	; (800cd44 <HAL_PCD_SuspendCallback+0x48>)
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	4a03      	ldr	r2, [pc, #12]	; (800cd44 <HAL_PCD_SuspendCallback+0x48>)
 800cd36:	f043 0306 	orr.w	r3, r3, #6
 800cd3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd3c:	bf00      	nop
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	e000ed00 	.word	0xe000ed00

0800cd48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fb fd7f 	bl	800885a <USBD_LL_Resume>
}
 800cd5c:	bf00      	nop
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cd76:	78fa      	ldrb	r2, [r7, #3]
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fb fda5 	bl	80088ca <USBD_LL_IsoOUTIncomplete>
}
 800cd80:	bf00      	nop
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	460b      	mov	r3, r1
 800cd92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cd9a:	78fa      	ldrb	r2, [r7, #3]
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fb fd86 	bl	80088b0 <USBD_LL_IsoINIncomplete>
}
 800cda4:	bf00      	nop
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fb fd92 	bl	80088e4 <USBD_LL_DevConnected>
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fb fd8f 	bl	80088fa <USBD_LL_DevDisconnected>
}
 800cddc:	bf00      	nop
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d13c      	bne.n	800ce6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cdf4:	4a20      	ldr	r2, [pc, #128]	; (800ce78 <USBD_LL_Init+0x94>)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a1e      	ldr	r2, [pc, #120]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ce04:	4b1c      	ldr	r3, [pc, #112]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ce0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ce0c:	4b1a      	ldr	r3, [pc, #104]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce0e:	2204      	movs	r2, #4
 800ce10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ce12:	4b19      	ldr	r3, [pc, #100]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce14:	2202      	movs	r2, #2
 800ce16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ce18:	4b17      	ldr	r3, [pc, #92]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ce1e:	4b16      	ldr	r3, [pc, #88]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce20:	2202      	movs	r2, #2
 800ce22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ce24:	4b14      	ldr	r3, [pc, #80]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ce2a:	4b13      	ldr	r3, [pc, #76]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ce30:	4b11      	ldr	r3, [pc, #68]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ce36:	4b10      	ldr	r3, [pc, #64]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ce3c:	4b0e      	ldr	r3, [pc, #56]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ce42:	480d      	ldr	r0, [pc, #52]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce44:	f7f5 ff43 	bl	8002cce <HAL_PCD_Init>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d001      	beq.n	800ce52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ce4e:	f7ff f8f5 	bl	800c03c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ce52:	2180      	movs	r1, #128	; 0x80
 800ce54:	4808      	ldr	r0, [pc, #32]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce56:	f7f7 f8a8 	bl	8003faa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ce5a:	2240      	movs	r2, #64	; 0x40
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	4806      	ldr	r0, [pc, #24]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce60:	f7f7 f85c 	bl	8003f1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ce64:	2280      	movs	r2, #128	; 0x80
 800ce66:	2101      	movs	r1, #1
 800ce68:	4803      	ldr	r0, [pc, #12]	; (800ce78 <USBD_LL_Init+0x94>)
 800ce6a:	f7f7 f857 	bl	8003f1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20001ce8 	.word	0x20001ce8

0800ce7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7f6 f838 	bl	8002f08 <HAL_PCD_Start>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 f92e 	bl	800d100 <USBD_Get_USB_Status>
 800cea4:	4603      	mov	r3, r0
 800cea6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	4608      	mov	r0, r1
 800cebc:	4611      	mov	r1, r2
 800cebe:	461a      	mov	r2, r3
 800cec0:	4603      	mov	r3, r0
 800cec2:	70fb      	strb	r3, [r7, #3]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70bb      	strb	r3, [r7, #2]
 800cec8:	4613      	mov	r3, r2
 800ceca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ceda:	78bb      	ldrb	r3, [r7, #2]
 800cedc:	883a      	ldrh	r2, [r7, #0]
 800cede:	78f9      	ldrb	r1, [r7, #3]
 800cee0:	f7f6 fc0d 	bl	80036fe <HAL_PCD_EP_Open>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 f908 	bl	800d100 <USBD_Get_USB_Status>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cf18:	78fa      	ldrb	r2, [r7, #3]
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f6 fc56 	bl	80037ce <HAL_PCD_EP_Close>
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 f8e9 	bl	800d100 <USBD_Get_USB_Status>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cf56:	78fa      	ldrb	r2, [r7, #3]
 800cf58:	4611      	mov	r1, r2
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7f6 fd2e 	bl	80039bc <HAL_PCD_EP_SetStall>
 800cf60:	4603      	mov	r3, r0
 800cf62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf64:	7bfb      	ldrb	r3, [r7, #15]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 f8ca 	bl	800d100 <USBD_Get_USB_Status>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	460b      	mov	r3, r1
 800cf84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7f6 fd73 	bl	8003a84 <HAL_PCD_EP_ClrStall>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 f8ab 	bl	800d100 <USBD_Get_USB_Status>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800cfae:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cfca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cfcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	da0b      	bge.n	800cfec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfda:	68f9      	ldr	r1, [r7, #12]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	1a9b      	subs	r3, r3, r2
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	440b      	add	r3, r1
 800cfe6:	333e      	adds	r3, #62	; 0x3e
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	e00b      	b.n	800d004 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cff2:	68f9      	ldr	r1, [r7, #12]
 800cff4:	4613      	mov	r3, r2
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	1a9b      	subs	r3, r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	440b      	add	r3, r1
 800cffe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d002:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d02a:	78fa      	ldrb	r2, [r7, #3]
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7f6 fb40 	bl	80036b4 <HAL_PCD_SetAddress>
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 f860 	bl	800d100 <USBD_Get_USB_Status>
 800d040:	4603      	mov	r3, r0
 800d042:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d044:	7bbb      	ldrb	r3, [r7, #14]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b086      	sub	sp, #24
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	461a      	mov	r2, r3
 800d05a:	460b      	mov	r3, r1
 800d05c:	72fb      	strb	r3, [r7, #11]
 800d05e:	4613      	mov	r3, r2
 800d060:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d070:	893b      	ldrh	r3, [r7, #8]
 800d072:	7af9      	ldrb	r1, [r7, #11]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	f7f6 fc57 	bl	8003928 <HAL_PCD_EP_Transmit>
 800d07a:	4603      	mov	r3, r0
 800d07c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	4618      	mov	r0, r3
 800d082:	f000 f83d 	bl	800d100 <USBD_Get_USB_Status>
 800d086:	4603      	mov	r3, r0
 800d088:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d08a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3718      	adds	r7, #24
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	607a      	str	r2, [r7, #4]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	72fb      	strb	r3, [r7, #11]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d0b6:	893b      	ldrh	r3, [r7, #8]
 800d0b8:	7af9      	ldrb	r1, [r7, #11]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	f7f6 fbd1 	bl	8003862 <HAL_PCD_EP_Receive>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d0c4:	7dfb      	ldrb	r3, [r7, #23]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 f81a 	bl	800d100 <USBD_Get_USB_Status>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d0d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3718      	adds	r7, #24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b082      	sub	sp, #8
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d0ec:	78fa      	ldrb	r2, [r7, #3]
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f6 fc01 	bl	80038f8 <HAL_PCD_EP_GetRxCount>
 800d0f6:	4603      	mov	r3, r0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	4603      	mov	r3, r0
 800d108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	2b03      	cmp	r3, #3
 800d112:	d817      	bhi.n	800d144 <USBD_Get_USB_Status+0x44>
 800d114:	a201      	add	r2, pc, #4	; (adr r2, 800d11c <USBD_Get_USB_Status+0x1c>)
 800d116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d11a:	bf00      	nop
 800d11c:	0800d12d 	.word	0x0800d12d
 800d120:	0800d133 	.word	0x0800d133
 800d124:	0800d139 	.word	0x0800d139
 800d128:	0800d13f 	.word	0x0800d13f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73fb      	strb	r3, [r7, #15]
    break;
 800d130:	e00b      	b.n	800d14a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d132:	2302      	movs	r3, #2
 800d134:	73fb      	strb	r3, [r7, #15]
    break;
 800d136:	e008      	b.n	800d14a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d138:	2301      	movs	r3, #1
 800d13a:	73fb      	strb	r3, [r7, #15]
    break;
 800d13c:	e005      	b.n	800d14a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d13e:	2302      	movs	r3, #2
 800d140:	73fb      	strb	r3, [r7, #15]
    break;
 800d142:	e002      	b.n	800d14a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d144:	2302      	movs	r3, #2
 800d146:	73fb      	strb	r3, [r7, #15]
    break;
 800d148:	bf00      	nop
  }
  return usb_status;
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3714      	adds	r7, #20
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	6039      	str	r1, [r7, #0]
 800d162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	2212      	movs	r2, #18
 800d168:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d16a:	4b03      	ldr	r3, [pc, #12]	; (800d178 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	20000148 	.word	0x20000148

0800d17c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	4603      	mov	r3, r0
 800d184:	6039      	str	r1, [r7, #0]
 800d186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2204      	movs	r2, #4
 800d18c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d18e:	4b03      	ldr	r3, [pc, #12]	; (800d19c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	2000015c 	.word	0x2000015c

0800d1a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	4907      	ldr	r1, [pc, #28]	; (800d1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1b6:	4808      	ldr	r0, [pc, #32]	; (800d1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1b8:	f7fc f876 	bl	80092a8 <USBD_GetString>
 800d1bc:	e004      	b.n	800d1c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	4904      	ldr	r1, [pc, #16]	; (800d1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1c2:	4805      	ldr	r0, [pc, #20]	; (800d1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1c4:	f7fc f870 	bl	80092a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1c8:	4b02      	ldr	r3, [pc, #8]	; (800d1d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	200020f0 	.word	0x200020f0
 800d1d8:	0800dcd4 	.word	0x0800dcd4

0800d1dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	6039      	str	r1, [r7, #0]
 800d1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	4904      	ldr	r1, [pc, #16]	; (800d1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1ec:	4804      	ldr	r0, [pc, #16]	; (800d200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1ee:	f7fc f85b 	bl	80092a8 <USBD_GetString>
  return USBD_StrDesc;
 800d1f2:	4b02      	ldr	r3, [pc, #8]	; (800d1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	200020f0 	.word	0x200020f0
 800d200:	0800dcec 	.word	0x0800dcec

0800d204 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	6039      	str	r1, [r7, #0]
 800d20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	221a      	movs	r2, #26
 800d214:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d216:	f000 f843 	bl	800d2a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d21a:	4b02      	ldr	r3, [pc, #8]	; (800d224 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	20000160 	.word	0x20000160

0800d228 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	6039      	str	r1, [r7, #0]
 800d232:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d105      	bne.n	800d246 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	4907      	ldr	r1, [pc, #28]	; (800d25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d23e:	4808      	ldr	r0, [pc, #32]	; (800d260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d240:	f7fc f832 	bl	80092a8 <USBD_GetString>
 800d244:	e004      	b.n	800d250 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	4904      	ldr	r1, [pc, #16]	; (800d25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d24a:	4805      	ldr	r0, [pc, #20]	; (800d260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d24c:	f7fc f82c 	bl	80092a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d250:	4b02      	ldr	r3, [pc, #8]	; (800d25c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	200020f0 	.word	0x200020f0
 800d260:	0800dd00 	.word	0x0800dd00

0800d264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	4603      	mov	r3, r0
 800d26c:	6039      	str	r1, [r7, #0]
 800d26e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d105      	bne.n	800d282 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	4907      	ldr	r1, [pc, #28]	; (800d298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d27a:	4808      	ldr	r0, [pc, #32]	; (800d29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d27c:	f7fc f814 	bl	80092a8 <USBD_GetString>
 800d280:	e004      	b.n	800d28c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	4904      	ldr	r1, [pc, #16]	; (800d298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d286:	4805      	ldr	r0, [pc, #20]	; (800d29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d288:	f7fc f80e 	bl	80092a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d28c:	4b02      	ldr	r3, [pc, #8]	; (800d298 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	200020f0 	.word	0x200020f0
 800d29c:	0800dd0c 	.word	0x0800dd0c

0800d2a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2a6:	4b0f      	ldr	r3, [pc, #60]	; (800d2e4 <Get_SerialNum+0x44>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2ac:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <Get_SerialNum+0x48>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2b2:	4b0e      	ldr	r3, [pc, #56]	; (800d2ec <Get_SerialNum+0x4c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4413      	add	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d009      	beq.n	800d2da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2c6:	2208      	movs	r2, #8
 800d2c8:	4909      	ldr	r1, [pc, #36]	; (800d2f0 <Get_SerialNum+0x50>)
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f000 f814 	bl	800d2f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2d0:	2204      	movs	r2, #4
 800d2d2:	4908      	ldr	r1, [pc, #32]	; (800d2f4 <Get_SerialNum+0x54>)
 800d2d4:	68b8      	ldr	r0, [r7, #8]
 800d2d6:	f000 f80f 	bl	800d2f8 <IntToUnicode>
  }
}
 800d2da:	bf00      	nop
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	1fff7a10 	.word	0x1fff7a10
 800d2e8:	1fff7a14 	.word	0x1fff7a14
 800d2ec:	1fff7a18 	.word	0x1fff7a18
 800d2f0:	20000162 	.word	0x20000162
 800d2f4:	20000172 	.word	0x20000172

0800d2f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	4613      	mov	r3, r2
 800d304:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d30a:	2300      	movs	r3, #0
 800d30c:	75fb      	strb	r3, [r7, #23]
 800d30e:	e027      	b.n	800d360 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	0f1b      	lsrs	r3, r3, #28
 800d314:	2b09      	cmp	r3, #9
 800d316:	d80b      	bhi.n	800d330 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	0f1b      	lsrs	r3, r3, #28
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	005b      	lsls	r3, r3, #1
 800d322:	4619      	mov	r1, r3
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	440b      	add	r3, r1
 800d328:	3230      	adds	r2, #48	; 0x30
 800d32a:	b2d2      	uxtb	r2, r2
 800d32c:	701a      	strb	r2, [r3, #0]
 800d32e:	e00a      	b.n	800d346 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	0f1b      	lsrs	r3, r3, #28
 800d334:	b2da      	uxtb	r2, r3
 800d336:	7dfb      	ldrb	r3, [r7, #23]
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	4619      	mov	r1, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	440b      	add	r3, r1
 800d340:	3237      	adds	r2, #55	; 0x37
 800d342:	b2d2      	uxtb	r2, r2
 800d344:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	011b      	lsls	r3, r3, #4
 800d34a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	3301      	adds	r3, #1
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	4413      	add	r3, r2
 800d356:	2200      	movs	r2, #0
 800d358:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	3301      	adds	r3, #1
 800d35e:	75fb      	strb	r3, [r7, #23]
 800d360:	7dfa      	ldrb	r2, [r7, #23]
 800d362:	79fb      	ldrb	r3, [r7, #7]
 800d364:	429a      	cmp	r2, r3
 800d366:	d3d3      	bcc.n	800d310 <IntToUnicode+0x18>
  }
}
 800d368:	bf00      	nop
 800d36a:	371c      	adds	r7, #28
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d374:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d3ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d37a:	e003      	b.n	800d384 <LoopCopyDataInit>

0800d37c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d37c:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d37e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d382:	3104      	adds	r1, #4

0800d384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d384:	480b      	ldr	r0, [pc, #44]	; (800d3b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d386:	4b0c      	ldr	r3, [pc, #48]	; (800d3b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d38a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d38c:	d3f6      	bcc.n	800d37c <CopyDataInit>
  ldr  r2, =_sbss
 800d38e:	4a0b      	ldr	r2, [pc, #44]	; (800d3bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d390:	e002      	b.n	800d398 <LoopFillZerobss>

0800d392 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d394:	f842 3b04 	str.w	r3, [r2], #4

0800d398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d39a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d39c:	d3f9      	bcc.n	800d392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d39e:	f7ff fa89 	bl	800c8b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d3a2:	f000 f817 	bl	800d3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d3a6:	f7fe fb37 	bl	800ba18 <main>
  bx  lr    
 800d3aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d3ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d3b0:	0800de14 	.word	0x0800de14
  ldr  r0, =_sdata
 800d3b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d3b8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800d3bc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800d3c0:	200022f4 	.word	0x200022f4

0800d3c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d3c4:	e7fe      	b.n	800d3c4 <ADC_IRQHandler>
	...

0800d3c8 <__errno>:
 800d3c8:	4b01      	ldr	r3, [pc, #4]	; (800d3d0 <__errno+0x8>)
 800d3ca:	6818      	ldr	r0, [r3, #0]
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	2000017c 	.word	0x2000017c

0800d3d4 <__libc_init_array>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	4e0d      	ldr	r6, [pc, #52]	; (800d40c <__libc_init_array+0x38>)
 800d3d8:	4c0d      	ldr	r4, [pc, #52]	; (800d410 <__libc_init_array+0x3c>)
 800d3da:	1ba4      	subs	r4, r4, r6
 800d3dc:	10a4      	asrs	r4, r4, #2
 800d3de:	2500      	movs	r5, #0
 800d3e0:	42a5      	cmp	r5, r4
 800d3e2:	d109      	bne.n	800d3f8 <__libc_init_array+0x24>
 800d3e4:	4e0b      	ldr	r6, [pc, #44]	; (800d414 <__libc_init_array+0x40>)
 800d3e6:	4c0c      	ldr	r4, [pc, #48]	; (800d418 <__libc_init_array+0x44>)
 800d3e8:	f000 fc38 	bl	800dc5c <_init>
 800d3ec:	1ba4      	subs	r4, r4, r6
 800d3ee:	10a4      	asrs	r4, r4, #2
 800d3f0:	2500      	movs	r5, #0
 800d3f2:	42a5      	cmp	r5, r4
 800d3f4:	d105      	bne.n	800d402 <__libc_init_array+0x2e>
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d3fc:	4798      	blx	r3
 800d3fe:	3501      	adds	r5, #1
 800d400:	e7ee      	b.n	800d3e0 <__libc_init_array+0xc>
 800d402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d406:	4798      	blx	r3
 800d408:	3501      	adds	r5, #1
 800d40a:	e7f2      	b.n	800d3f2 <__libc_init_array+0x1e>
 800d40c:	0800de0c 	.word	0x0800de0c
 800d410:	0800de0c 	.word	0x0800de0c
 800d414:	0800de0c 	.word	0x0800de0c
 800d418:	0800de10 	.word	0x0800de10

0800d41c <malloc>:
 800d41c:	4b02      	ldr	r3, [pc, #8]	; (800d428 <malloc+0xc>)
 800d41e:	4601      	mov	r1, r0
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	f000 b86d 	b.w	800d500 <_malloc_r>
 800d426:	bf00      	nop
 800d428:	2000017c 	.word	0x2000017c

0800d42c <free>:
 800d42c:	4b02      	ldr	r3, [pc, #8]	; (800d438 <free+0xc>)
 800d42e:	4601      	mov	r1, r0
 800d430:	6818      	ldr	r0, [r3, #0]
 800d432:	f000 b817 	b.w	800d464 <_free_r>
 800d436:	bf00      	nop
 800d438:	2000017c 	.word	0x2000017c

0800d43c <memcpy>:
 800d43c:	b510      	push	{r4, lr}
 800d43e:	1e43      	subs	r3, r0, #1
 800d440:	440a      	add	r2, r1
 800d442:	4291      	cmp	r1, r2
 800d444:	d100      	bne.n	800d448 <memcpy+0xc>
 800d446:	bd10      	pop	{r4, pc}
 800d448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d44c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d450:	e7f7      	b.n	800d442 <memcpy+0x6>

0800d452 <memset>:
 800d452:	4402      	add	r2, r0
 800d454:	4603      	mov	r3, r0
 800d456:	4293      	cmp	r3, r2
 800d458:	d100      	bne.n	800d45c <memset+0xa>
 800d45a:	4770      	bx	lr
 800d45c:	f803 1b01 	strb.w	r1, [r3], #1
 800d460:	e7f9      	b.n	800d456 <memset+0x4>
	...

0800d464 <_free_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4605      	mov	r5, r0
 800d468:	2900      	cmp	r1, #0
 800d46a:	d045      	beq.n	800d4f8 <_free_r+0x94>
 800d46c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d470:	1f0c      	subs	r4, r1, #4
 800d472:	2b00      	cmp	r3, #0
 800d474:	bfb8      	it	lt
 800d476:	18e4      	addlt	r4, r4, r3
 800d478:	f000 f8cc 	bl	800d614 <__malloc_lock>
 800d47c:	4a1f      	ldr	r2, [pc, #124]	; (800d4fc <_free_r+0x98>)
 800d47e:	6813      	ldr	r3, [r2, #0]
 800d480:	4610      	mov	r0, r2
 800d482:	b933      	cbnz	r3, 800d492 <_free_r+0x2e>
 800d484:	6063      	str	r3, [r4, #4]
 800d486:	6014      	str	r4, [r2, #0]
 800d488:	4628      	mov	r0, r5
 800d48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d48e:	f000 b8c2 	b.w	800d616 <__malloc_unlock>
 800d492:	42a3      	cmp	r3, r4
 800d494:	d90c      	bls.n	800d4b0 <_free_r+0x4c>
 800d496:	6821      	ldr	r1, [r4, #0]
 800d498:	1862      	adds	r2, r4, r1
 800d49a:	4293      	cmp	r3, r2
 800d49c:	bf04      	itt	eq
 800d49e:	681a      	ldreq	r2, [r3, #0]
 800d4a0:	685b      	ldreq	r3, [r3, #4]
 800d4a2:	6063      	str	r3, [r4, #4]
 800d4a4:	bf04      	itt	eq
 800d4a6:	1852      	addeq	r2, r2, r1
 800d4a8:	6022      	streq	r2, [r4, #0]
 800d4aa:	6004      	str	r4, [r0, #0]
 800d4ac:	e7ec      	b.n	800d488 <_free_r+0x24>
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	685a      	ldr	r2, [r3, #4]
 800d4b2:	b10a      	cbz	r2, 800d4b8 <_free_r+0x54>
 800d4b4:	42a2      	cmp	r2, r4
 800d4b6:	d9fa      	bls.n	800d4ae <_free_r+0x4a>
 800d4b8:	6819      	ldr	r1, [r3, #0]
 800d4ba:	1858      	adds	r0, r3, r1
 800d4bc:	42a0      	cmp	r0, r4
 800d4be:	d10b      	bne.n	800d4d8 <_free_r+0x74>
 800d4c0:	6820      	ldr	r0, [r4, #0]
 800d4c2:	4401      	add	r1, r0
 800d4c4:	1858      	adds	r0, r3, r1
 800d4c6:	4282      	cmp	r2, r0
 800d4c8:	6019      	str	r1, [r3, #0]
 800d4ca:	d1dd      	bne.n	800d488 <_free_r+0x24>
 800d4cc:	6810      	ldr	r0, [r2, #0]
 800d4ce:	6852      	ldr	r2, [r2, #4]
 800d4d0:	605a      	str	r2, [r3, #4]
 800d4d2:	4401      	add	r1, r0
 800d4d4:	6019      	str	r1, [r3, #0]
 800d4d6:	e7d7      	b.n	800d488 <_free_r+0x24>
 800d4d8:	d902      	bls.n	800d4e0 <_free_r+0x7c>
 800d4da:	230c      	movs	r3, #12
 800d4dc:	602b      	str	r3, [r5, #0]
 800d4de:	e7d3      	b.n	800d488 <_free_r+0x24>
 800d4e0:	6820      	ldr	r0, [r4, #0]
 800d4e2:	1821      	adds	r1, r4, r0
 800d4e4:	428a      	cmp	r2, r1
 800d4e6:	bf04      	itt	eq
 800d4e8:	6811      	ldreq	r1, [r2, #0]
 800d4ea:	6852      	ldreq	r2, [r2, #4]
 800d4ec:	6062      	str	r2, [r4, #4]
 800d4ee:	bf04      	itt	eq
 800d4f0:	1809      	addeq	r1, r1, r0
 800d4f2:	6021      	streq	r1, [r4, #0]
 800d4f4:	605c      	str	r4, [r3, #4]
 800d4f6:	e7c7      	b.n	800d488 <_free_r+0x24>
 800d4f8:	bd38      	pop	{r3, r4, r5, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20000440 	.word	0x20000440

0800d500 <_malloc_r>:
 800d500:	b570      	push	{r4, r5, r6, lr}
 800d502:	1ccd      	adds	r5, r1, #3
 800d504:	f025 0503 	bic.w	r5, r5, #3
 800d508:	3508      	adds	r5, #8
 800d50a:	2d0c      	cmp	r5, #12
 800d50c:	bf38      	it	cc
 800d50e:	250c      	movcc	r5, #12
 800d510:	2d00      	cmp	r5, #0
 800d512:	4606      	mov	r6, r0
 800d514:	db01      	blt.n	800d51a <_malloc_r+0x1a>
 800d516:	42a9      	cmp	r1, r5
 800d518:	d903      	bls.n	800d522 <_malloc_r+0x22>
 800d51a:	230c      	movs	r3, #12
 800d51c:	6033      	str	r3, [r6, #0]
 800d51e:	2000      	movs	r0, #0
 800d520:	bd70      	pop	{r4, r5, r6, pc}
 800d522:	f000 f877 	bl	800d614 <__malloc_lock>
 800d526:	4a21      	ldr	r2, [pc, #132]	; (800d5ac <_malloc_r+0xac>)
 800d528:	6814      	ldr	r4, [r2, #0]
 800d52a:	4621      	mov	r1, r4
 800d52c:	b991      	cbnz	r1, 800d554 <_malloc_r+0x54>
 800d52e:	4c20      	ldr	r4, [pc, #128]	; (800d5b0 <_malloc_r+0xb0>)
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	b91b      	cbnz	r3, 800d53c <_malloc_r+0x3c>
 800d534:	4630      	mov	r0, r6
 800d536:	f000 f83d 	bl	800d5b4 <_sbrk_r>
 800d53a:	6020      	str	r0, [r4, #0]
 800d53c:	4629      	mov	r1, r5
 800d53e:	4630      	mov	r0, r6
 800d540:	f000 f838 	bl	800d5b4 <_sbrk_r>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d124      	bne.n	800d592 <_malloc_r+0x92>
 800d548:	230c      	movs	r3, #12
 800d54a:	6033      	str	r3, [r6, #0]
 800d54c:	4630      	mov	r0, r6
 800d54e:	f000 f862 	bl	800d616 <__malloc_unlock>
 800d552:	e7e4      	b.n	800d51e <_malloc_r+0x1e>
 800d554:	680b      	ldr	r3, [r1, #0]
 800d556:	1b5b      	subs	r3, r3, r5
 800d558:	d418      	bmi.n	800d58c <_malloc_r+0x8c>
 800d55a:	2b0b      	cmp	r3, #11
 800d55c:	d90f      	bls.n	800d57e <_malloc_r+0x7e>
 800d55e:	600b      	str	r3, [r1, #0]
 800d560:	50cd      	str	r5, [r1, r3]
 800d562:	18cc      	adds	r4, r1, r3
 800d564:	4630      	mov	r0, r6
 800d566:	f000 f856 	bl	800d616 <__malloc_unlock>
 800d56a:	f104 000b 	add.w	r0, r4, #11
 800d56e:	1d23      	adds	r3, r4, #4
 800d570:	f020 0007 	bic.w	r0, r0, #7
 800d574:	1ac3      	subs	r3, r0, r3
 800d576:	d0d3      	beq.n	800d520 <_malloc_r+0x20>
 800d578:	425a      	negs	r2, r3
 800d57a:	50e2      	str	r2, [r4, r3]
 800d57c:	e7d0      	b.n	800d520 <_malloc_r+0x20>
 800d57e:	428c      	cmp	r4, r1
 800d580:	684b      	ldr	r3, [r1, #4]
 800d582:	bf16      	itet	ne
 800d584:	6063      	strne	r3, [r4, #4]
 800d586:	6013      	streq	r3, [r2, #0]
 800d588:	460c      	movne	r4, r1
 800d58a:	e7eb      	b.n	800d564 <_malloc_r+0x64>
 800d58c:	460c      	mov	r4, r1
 800d58e:	6849      	ldr	r1, [r1, #4]
 800d590:	e7cc      	b.n	800d52c <_malloc_r+0x2c>
 800d592:	1cc4      	adds	r4, r0, #3
 800d594:	f024 0403 	bic.w	r4, r4, #3
 800d598:	42a0      	cmp	r0, r4
 800d59a:	d005      	beq.n	800d5a8 <_malloc_r+0xa8>
 800d59c:	1a21      	subs	r1, r4, r0
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f000 f808 	bl	800d5b4 <_sbrk_r>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	d0cf      	beq.n	800d548 <_malloc_r+0x48>
 800d5a8:	6025      	str	r5, [r4, #0]
 800d5aa:	e7db      	b.n	800d564 <_malloc_r+0x64>
 800d5ac:	20000440 	.word	0x20000440
 800d5b0:	20000444 	.word	0x20000444

0800d5b4 <_sbrk_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4c06      	ldr	r4, [pc, #24]	; (800d5d0 <_sbrk_r+0x1c>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	6023      	str	r3, [r4, #0]
 800d5c0:	f7ff f94c 	bl	800c85c <_sbrk>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_sbrk_r+0x1a>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_sbrk_r+0x1a>
 800d5cc:	602b      	str	r3, [r5, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	200022f0 	.word	0x200022f0

0800d5d4 <siprintf>:
 800d5d4:	b40e      	push	{r1, r2, r3}
 800d5d6:	b500      	push	{lr}
 800d5d8:	b09c      	sub	sp, #112	; 0x70
 800d5da:	ab1d      	add	r3, sp, #116	; 0x74
 800d5dc:	9002      	str	r0, [sp, #8]
 800d5de:	9006      	str	r0, [sp, #24]
 800d5e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5e4:	4809      	ldr	r0, [pc, #36]	; (800d60c <siprintf+0x38>)
 800d5e6:	9107      	str	r1, [sp, #28]
 800d5e8:	9104      	str	r1, [sp, #16]
 800d5ea:	4909      	ldr	r1, [pc, #36]	; (800d610 <siprintf+0x3c>)
 800d5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5f0:	9105      	str	r1, [sp, #20]
 800d5f2:	6800      	ldr	r0, [r0, #0]
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	a902      	add	r1, sp, #8
 800d5f8:	f000 f868 	bl	800d6cc <_svfiprintf_r>
 800d5fc:	9b02      	ldr	r3, [sp, #8]
 800d5fe:	2200      	movs	r2, #0
 800d600:	701a      	strb	r2, [r3, #0]
 800d602:	b01c      	add	sp, #112	; 0x70
 800d604:	f85d eb04 	ldr.w	lr, [sp], #4
 800d608:	b003      	add	sp, #12
 800d60a:	4770      	bx	lr
 800d60c:	2000017c 	.word	0x2000017c
 800d610:	ffff0208 	.word	0xffff0208

0800d614 <__malloc_lock>:
 800d614:	4770      	bx	lr

0800d616 <__malloc_unlock>:
 800d616:	4770      	bx	lr

0800d618 <__ssputs_r>:
 800d618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d61c:	688e      	ldr	r6, [r1, #8]
 800d61e:	429e      	cmp	r6, r3
 800d620:	4682      	mov	sl, r0
 800d622:	460c      	mov	r4, r1
 800d624:	4690      	mov	r8, r2
 800d626:	4699      	mov	r9, r3
 800d628:	d837      	bhi.n	800d69a <__ssputs_r+0x82>
 800d62a:	898a      	ldrh	r2, [r1, #12]
 800d62c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d630:	d031      	beq.n	800d696 <__ssputs_r+0x7e>
 800d632:	6825      	ldr	r5, [r4, #0]
 800d634:	6909      	ldr	r1, [r1, #16]
 800d636:	1a6f      	subs	r7, r5, r1
 800d638:	6965      	ldr	r5, [r4, #20]
 800d63a:	2302      	movs	r3, #2
 800d63c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d640:	fb95 f5f3 	sdiv	r5, r5, r3
 800d644:	f109 0301 	add.w	r3, r9, #1
 800d648:	443b      	add	r3, r7
 800d64a:	429d      	cmp	r5, r3
 800d64c:	bf38      	it	cc
 800d64e:	461d      	movcc	r5, r3
 800d650:	0553      	lsls	r3, r2, #21
 800d652:	d530      	bpl.n	800d6b6 <__ssputs_r+0x9e>
 800d654:	4629      	mov	r1, r5
 800d656:	f7ff ff53 	bl	800d500 <_malloc_r>
 800d65a:	4606      	mov	r6, r0
 800d65c:	b950      	cbnz	r0, 800d674 <__ssputs_r+0x5c>
 800d65e:	230c      	movs	r3, #12
 800d660:	f8ca 3000 	str.w	r3, [sl]
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d66a:	81a3      	strh	r3, [r4, #12]
 800d66c:	f04f 30ff 	mov.w	r0, #4294967295
 800d670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d674:	463a      	mov	r2, r7
 800d676:	6921      	ldr	r1, [r4, #16]
 800d678:	f7ff fee0 	bl	800d43c <memcpy>
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d686:	81a3      	strh	r3, [r4, #12]
 800d688:	6126      	str	r6, [r4, #16]
 800d68a:	6165      	str	r5, [r4, #20]
 800d68c:	443e      	add	r6, r7
 800d68e:	1bed      	subs	r5, r5, r7
 800d690:	6026      	str	r6, [r4, #0]
 800d692:	60a5      	str	r5, [r4, #8]
 800d694:	464e      	mov	r6, r9
 800d696:	454e      	cmp	r6, r9
 800d698:	d900      	bls.n	800d69c <__ssputs_r+0x84>
 800d69a:	464e      	mov	r6, r9
 800d69c:	4632      	mov	r2, r6
 800d69e:	4641      	mov	r1, r8
 800d6a0:	6820      	ldr	r0, [r4, #0]
 800d6a2:	f000 fa93 	bl	800dbcc <memmove>
 800d6a6:	68a3      	ldr	r3, [r4, #8]
 800d6a8:	1b9b      	subs	r3, r3, r6
 800d6aa:	60a3      	str	r3, [r4, #8]
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	441e      	add	r6, r3
 800d6b0:	6026      	str	r6, [r4, #0]
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e7dc      	b.n	800d670 <__ssputs_r+0x58>
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	f000 faa1 	bl	800dbfe <_realloc_r>
 800d6bc:	4606      	mov	r6, r0
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d1e2      	bne.n	800d688 <__ssputs_r+0x70>
 800d6c2:	6921      	ldr	r1, [r4, #16]
 800d6c4:	4650      	mov	r0, sl
 800d6c6:	f7ff fecd 	bl	800d464 <_free_r>
 800d6ca:	e7c8      	b.n	800d65e <__ssputs_r+0x46>

0800d6cc <_svfiprintf_r>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	461d      	mov	r5, r3
 800d6d2:	898b      	ldrh	r3, [r1, #12]
 800d6d4:	061f      	lsls	r7, r3, #24
 800d6d6:	b09d      	sub	sp, #116	; 0x74
 800d6d8:	4680      	mov	r8, r0
 800d6da:	460c      	mov	r4, r1
 800d6dc:	4616      	mov	r6, r2
 800d6de:	d50f      	bpl.n	800d700 <_svfiprintf_r+0x34>
 800d6e0:	690b      	ldr	r3, [r1, #16]
 800d6e2:	b96b      	cbnz	r3, 800d700 <_svfiprintf_r+0x34>
 800d6e4:	2140      	movs	r1, #64	; 0x40
 800d6e6:	f7ff ff0b 	bl	800d500 <_malloc_r>
 800d6ea:	6020      	str	r0, [r4, #0]
 800d6ec:	6120      	str	r0, [r4, #16]
 800d6ee:	b928      	cbnz	r0, 800d6fc <_svfiprintf_r+0x30>
 800d6f0:	230c      	movs	r3, #12
 800d6f2:	f8c8 3000 	str.w	r3, [r8]
 800d6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fa:	e0c8      	b.n	800d88e <_svfiprintf_r+0x1c2>
 800d6fc:	2340      	movs	r3, #64	; 0x40
 800d6fe:	6163      	str	r3, [r4, #20]
 800d700:	2300      	movs	r3, #0
 800d702:	9309      	str	r3, [sp, #36]	; 0x24
 800d704:	2320      	movs	r3, #32
 800d706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d70a:	2330      	movs	r3, #48	; 0x30
 800d70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d710:	9503      	str	r5, [sp, #12]
 800d712:	f04f 0b01 	mov.w	fp, #1
 800d716:	4637      	mov	r7, r6
 800d718:	463d      	mov	r5, r7
 800d71a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d71e:	b10b      	cbz	r3, 800d724 <_svfiprintf_r+0x58>
 800d720:	2b25      	cmp	r3, #37	; 0x25
 800d722:	d13e      	bne.n	800d7a2 <_svfiprintf_r+0xd6>
 800d724:	ebb7 0a06 	subs.w	sl, r7, r6
 800d728:	d00b      	beq.n	800d742 <_svfiprintf_r+0x76>
 800d72a:	4653      	mov	r3, sl
 800d72c:	4632      	mov	r2, r6
 800d72e:	4621      	mov	r1, r4
 800d730:	4640      	mov	r0, r8
 800d732:	f7ff ff71 	bl	800d618 <__ssputs_r>
 800d736:	3001      	adds	r0, #1
 800d738:	f000 80a4 	beq.w	800d884 <_svfiprintf_r+0x1b8>
 800d73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d73e:	4453      	add	r3, sl
 800d740:	9309      	str	r3, [sp, #36]	; 0x24
 800d742:	783b      	ldrb	r3, [r7, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 809d 	beq.w	800d884 <_svfiprintf_r+0x1b8>
 800d74a:	2300      	movs	r3, #0
 800d74c:	f04f 32ff 	mov.w	r2, #4294967295
 800d750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	9307      	str	r3, [sp, #28]
 800d758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d75c:	931a      	str	r3, [sp, #104]	; 0x68
 800d75e:	462f      	mov	r7, r5
 800d760:	2205      	movs	r2, #5
 800d762:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d766:	4850      	ldr	r0, [pc, #320]	; (800d8a8 <_svfiprintf_r+0x1dc>)
 800d768:	f7f2 fd3a 	bl	80001e0 <memchr>
 800d76c:	9b04      	ldr	r3, [sp, #16]
 800d76e:	b9d0      	cbnz	r0, 800d7a6 <_svfiprintf_r+0xda>
 800d770:	06d9      	lsls	r1, r3, #27
 800d772:	bf44      	itt	mi
 800d774:	2220      	movmi	r2, #32
 800d776:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d77a:	071a      	lsls	r2, r3, #28
 800d77c:	bf44      	itt	mi
 800d77e:	222b      	movmi	r2, #43	; 0x2b
 800d780:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d784:	782a      	ldrb	r2, [r5, #0]
 800d786:	2a2a      	cmp	r2, #42	; 0x2a
 800d788:	d015      	beq.n	800d7b6 <_svfiprintf_r+0xea>
 800d78a:	9a07      	ldr	r2, [sp, #28]
 800d78c:	462f      	mov	r7, r5
 800d78e:	2000      	movs	r0, #0
 800d790:	250a      	movs	r5, #10
 800d792:	4639      	mov	r1, r7
 800d794:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d798:	3b30      	subs	r3, #48	; 0x30
 800d79a:	2b09      	cmp	r3, #9
 800d79c:	d94d      	bls.n	800d83a <_svfiprintf_r+0x16e>
 800d79e:	b1b8      	cbz	r0, 800d7d0 <_svfiprintf_r+0x104>
 800d7a0:	e00f      	b.n	800d7c2 <_svfiprintf_r+0xf6>
 800d7a2:	462f      	mov	r7, r5
 800d7a4:	e7b8      	b.n	800d718 <_svfiprintf_r+0x4c>
 800d7a6:	4a40      	ldr	r2, [pc, #256]	; (800d8a8 <_svfiprintf_r+0x1dc>)
 800d7a8:	1a80      	subs	r0, r0, r2
 800d7aa:	fa0b f000 	lsl.w	r0, fp, r0
 800d7ae:	4318      	orrs	r0, r3
 800d7b0:	9004      	str	r0, [sp, #16]
 800d7b2:	463d      	mov	r5, r7
 800d7b4:	e7d3      	b.n	800d75e <_svfiprintf_r+0x92>
 800d7b6:	9a03      	ldr	r2, [sp, #12]
 800d7b8:	1d11      	adds	r1, r2, #4
 800d7ba:	6812      	ldr	r2, [r2, #0]
 800d7bc:	9103      	str	r1, [sp, #12]
 800d7be:	2a00      	cmp	r2, #0
 800d7c0:	db01      	blt.n	800d7c6 <_svfiprintf_r+0xfa>
 800d7c2:	9207      	str	r2, [sp, #28]
 800d7c4:	e004      	b.n	800d7d0 <_svfiprintf_r+0x104>
 800d7c6:	4252      	negs	r2, r2
 800d7c8:	f043 0302 	orr.w	r3, r3, #2
 800d7cc:	9207      	str	r2, [sp, #28]
 800d7ce:	9304      	str	r3, [sp, #16]
 800d7d0:	783b      	ldrb	r3, [r7, #0]
 800d7d2:	2b2e      	cmp	r3, #46	; 0x2e
 800d7d4:	d10c      	bne.n	800d7f0 <_svfiprintf_r+0x124>
 800d7d6:	787b      	ldrb	r3, [r7, #1]
 800d7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d7da:	d133      	bne.n	800d844 <_svfiprintf_r+0x178>
 800d7dc:	9b03      	ldr	r3, [sp, #12]
 800d7de:	1d1a      	adds	r2, r3, #4
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	9203      	str	r2, [sp, #12]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	bfb8      	it	lt
 800d7e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7ec:	3702      	adds	r7, #2
 800d7ee:	9305      	str	r3, [sp, #20]
 800d7f0:	4d2e      	ldr	r5, [pc, #184]	; (800d8ac <_svfiprintf_r+0x1e0>)
 800d7f2:	7839      	ldrb	r1, [r7, #0]
 800d7f4:	2203      	movs	r2, #3
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f7f2 fcf2 	bl	80001e0 <memchr>
 800d7fc:	b138      	cbz	r0, 800d80e <_svfiprintf_r+0x142>
 800d7fe:	2340      	movs	r3, #64	; 0x40
 800d800:	1b40      	subs	r0, r0, r5
 800d802:	fa03 f000 	lsl.w	r0, r3, r0
 800d806:	9b04      	ldr	r3, [sp, #16]
 800d808:	4303      	orrs	r3, r0
 800d80a:	3701      	adds	r7, #1
 800d80c:	9304      	str	r3, [sp, #16]
 800d80e:	7839      	ldrb	r1, [r7, #0]
 800d810:	4827      	ldr	r0, [pc, #156]	; (800d8b0 <_svfiprintf_r+0x1e4>)
 800d812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d816:	2206      	movs	r2, #6
 800d818:	1c7e      	adds	r6, r7, #1
 800d81a:	f7f2 fce1 	bl	80001e0 <memchr>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d038      	beq.n	800d894 <_svfiprintf_r+0x1c8>
 800d822:	4b24      	ldr	r3, [pc, #144]	; (800d8b4 <_svfiprintf_r+0x1e8>)
 800d824:	bb13      	cbnz	r3, 800d86c <_svfiprintf_r+0x1a0>
 800d826:	9b03      	ldr	r3, [sp, #12]
 800d828:	3307      	adds	r3, #7
 800d82a:	f023 0307 	bic.w	r3, r3, #7
 800d82e:	3308      	adds	r3, #8
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d834:	444b      	add	r3, r9
 800d836:	9309      	str	r3, [sp, #36]	; 0x24
 800d838:	e76d      	b.n	800d716 <_svfiprintf_r+0x4a>
 800d83a:	fb05 3202 	mla	r2, r5, r2, r3
 800d83e:	2001      	movs	r0, #1
 800d840:	460f      	mov	r7, r1
 800d842:	e7a6      	b.n	800d792 <_svfiprintf_r+0xc6>
 800d844:	2300      	movs	r3, #0
 800d846:	3701      	adds	r7, #1
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	4619      	mov	r1, r3
 800d84c:	250a      	movs	r5, #10
 800d84e:	4638      	mov	r0, r7
 800d850:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d854:	3a30      	subs	r2, #48	; 0x30
 800d856:	2a09      	cmp	r2, #9
 800d858:	d903      	bls.n	800d862 <_svfiprintf_r+0x196>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d0c8      	beq.n	800d7f0 <_svfiprintf_r+0x124>
 800d85e:	9105      	str	r1, [sp, #20]
 800d860:	e7c6      	b.n	800d7f0 <_svfiprintf_r+0x124>
 800d862:	fb05 2101 	mla	r1, r5, r1, r2
 800d866:	2301      	movs	r3, #1
 800d868:	4607      	mov	r7, r0
 800d86a:	e7f0      	b.n	800d84e <_svfiprintf_r+0x182>
 800d86c:	ab03      	add	r3, sp, #12
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	4622      	mov	r2, r4
 800d872:	4b11      	ldr	r3, [pc, #68]	; (800d8b8 <_svfiprintf_r+0x1ec>)
 800d874:	a904      	add	r1, sp, #16
 800d876:	4640      	mov	r0, r8
 800d878:	f3af 8000 	nop.w
 800d87c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d880:	4681      	mov	r9, r0
 800d882:	d1d6      	bne.n	800d832 <_svfiprintf_r+0x166>
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	065b      	lsls	r3, r3, #25
 800d888:	f53f af35 	bmi.w	800d6f6 <_svfiprintf_r+0x2a>
 800d88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d88e:	b01d      	add	sp, #116	; 0x74
 800d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d894:	ab03      	add	r3, sp, #12
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	4622      	mov	r2, r4
 800d89a:	4b07      	ldr	r3, [pc, #28]	; (800d8b8 <_svfiprintf_r+0x1ec>)
 800d89c:	a904      	add	r1, sp, #16
 800d89e:	4640      	mov	r0, r8
 800d8a0:	f000 f882 	bl	800d9a8 <_printf_i>
 800d8a4:	e7ea      	b.n	800d87c <_svfiprintf_r+0x1b0>
 800d8a6:	bf00      	nop
 800d8a8:	0800ddd0 	.word	0x0800ddd0
 800d8ac:	0800ddd6 	.word	0x0800ddd6
 800d8b0:	0800ddda 	.word	0x0800ddda
 800d8b4:	00000000 	.word	0x00000000
 800d8b8:	0800d619 	.word	0x0800d619

0800d8bc <_printf_common>:
 800d8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c0:	4691      	mov	r9, r2
 800d8c2:	461f      	mov	r7, r3
 800d8c4:	688a      	ldr	r2, [r1, #8]
 800d8c6:	690b      	ldr	r3, [r1, #16]
 800d8c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	bfb8      	it	lt
 800d8d0:	4613      	movlt	r3, r2
 800d8d2:	f8c9 3000 	str.w	r3, [r9]
 800d8d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8da:	4606      	mov	r6, r0
 800d8dc:	460c      	mov	r4, r1
 800d8de:	b112      	cbz	r2, 800d8e6 <_printf_common+0x2a>
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	f8c9 3000 	str.w	r3, [r9]
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	0699      	lsls	r1, r3, #26
 800d8ea:	bf42      	ittt	mi
 800d8ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d8f0:	3302      	addmi	r3, #2
 800d8f2:	f8c9 3000 	strmi.w	r3, [r9]
 800d8f6:	6825      	ldr	r5, [r4, #0]
 800d8f8:	f015 0506 	ands.w	r5, r5, #6
 800d8fc:	d107      	bne.n	800d90e <_printf_common+0x52>
 800d8fe:	f104 0a19 	add.w	sl, r4, #25
 800d902:	68e3      	ldr	r3, [r4, #12]
 800d904:	f8d9 2000 	ldr.w	r2, [r9]
 800d908:	1a9b      	subs	r3, r3, r2
 800d90a:	42ab      	cmp	r3, r5
 800d90c:	dc28      	bgt.n	800d960 <_printf_common+0xa4>
 800d90e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d912:	6822      	ldr	r2, [r4, #0]
 800d914:	3300      	adds	r3, #0
 800d916:	bf18      	it	ne
 800d918:	2301      	movne	r3, #1
 800d91a:	0692      	lsls	r2, r2, #26
 800d91c:	d42d      	bmi.n	800d97a <_printf_common+0xbe>
 800d91e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d922:	4639      	mov	r1, r7
 800d924:	4630      	mov	r0, r6
 800d926:	47c0      	blx	r8
 800d928:	3001      	adds	r0, #1
 800d92a:	d020      	beq.n	800d96e <_printf_common+0xb2>
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	68e5      	ldr	r5, [r4, #12]
 800d930:	f8d9 2000 	ldr.w	r2, [r9]
 800d934:	f003 0306 	and.w	r3, r3, #6
 800d938:	2b04      	cmp	r3, #4
 800d93a:	bf08      	it	eq
 800d93c:	1aad      	subeq	r5, r5, r2
 800d93e:	68a3      	ldr	r3, [r4, #8]
 800d940:	6922      	ldr	r2, [r4, #16]
 800d942:	bf0c      	ite	eq
 800d944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d948:	2500      	movne	r5, #0
 800d94a:	4293      	cmp	r3, r2
 800d94c:	bfc4      	itt	gt
 800d94e:	1a9b      	subgt	r3, r3, r2
 800d950:	18ed      	addgt	r5, r5, r3
 800d952:	f04f 0900 	mov.w	r9, #0
 800d956:	341a      	adds	r4, #26
 800d958:	454d      	cmp	r5, r9
 800d95a:	d11a      	bne.n	800d992 <_printf_common+0xd6>
 800d95c:	2000      	movs	r0, #0
 800d95e:	e008      	b.n	800d972 <_printf_common+0xb6>
 800d960:	2301      	movs	r3, #1
 800d962:	4652      	mov	r2, sl
 800d964:	4639      	mov	r1, r7
 800d966:	4630      	mov	r0, r6
 800d968:	47c0      	blx	r8
 800d96a:	3001      	adds	r0, #1
 800d96c:	d103      	bne.n	800d976 <_printf_common+0xba>
 800d96e:	f04f 30ff 	mov.w	r0, #4294967295
 800d972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d976:	3501      	adds	r5, #1
 800d978:	e7c3      	b.n	800d902 <_printf_common+0x46>
 800d97a:	18e1      	adds	r1, r4, r3
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	2030      	movs	r0, #48	; 0x30
 800d980:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d984:	4422      	add	r2, r4
 800d986:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d98a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d98e:	3302      	adds	r3, #2
 800d990:	e7c5      	b.n	800d91e <_printf_common+0x62>
 800d992:	2301      	movs	r3, #1
 800d994:	4622      	mov	r2, r4
 800d996:	4639      	mov	r1, r7
 800d998:	4630      	mov	r0, r6
 800d99a:	47c0      	blx	r8
 800d99c:	3001      	adds	r0, #1
 800d99e:	d0e6      	beq.n	800d96e <_printf_common+0xb2>
 800d9a0:	f109 0901 	add.w	r9, r9, #1
 800d9a4:	e7d8      	b.n	800d958 <_printf_common+0x9c>
	...

0800d9a8 <_printf_i>:
 800d9a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	7e09      	ldrb	r1, [r1, #24]
 800d9b4:	b085      	sub	sp, #20
 800d9b6:	296e      	cmp	r1, #110	; 0x6e
 800d9b8:	4617      	mov	r7, r2
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	4698      	mov	r8, r3
 800d9be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9c0:	f000 80b3 	beq.w	800db2a <_printf_i+0x182>
 800d9c4:	d822      	bhi.n	800da0c <_printf_i+0x64>
 800d9c6:	2963      	cmp	r1, #99	; 0x63
 800d9c8:	d036      	beq.n	800da38 <_printf_i+0x90>
 800d9ca:	d80a      	bhi.n	800d9e2 <_printf_i+0x3a>
 800d9cc:	2900      	cmp	r1, #0
 800d9ce:	f000 80b9 	beq.w	800db44 <_printf_i+0x19c>
 800d9d2:	2958      	cmp	r1, #88	; 0x58
 800d9d4:	f000 8083 	beq.w	800dade <_printf_i+0x136>
 800d9d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d9e0:	e032      	b.n	800da48 <_printf_i+0xa0>
 800d9e2:	2964      	cmp	r1, #100	; 0x64
 800d9e4:	d001      	beq.n	800d9ea <_printf_i+0x42>
 800d9e6:	2969      	cmp	r1, #105	; 0x69
 800d9e8:	d1f6      	bne.n	800d9d8 <_printf_i+0x30>
 800d9ea:	6820      	ldr	r0, [r4, #0]
 800d9ec:	6813      	ldr	r3, [r2, #0]
 800d9ee:	0605      	lsls	r5, r0, #24
 800d9f0:	f103 0104 	add.w	r1, r3, #4
 800d9f4:	d52a      	bpl.n	800da4c <_printf_i+0xa4>
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6011      	str	r1, [r2, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	da03      	bge.n	800da06 <_printf_i+0x5e>
 800d9fe:	222d      	movs	r2, #45	; 0x2d
 800da00:	425b      	negs	r3, r3
 800da02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800da06:	486f      	ldr	r0, [pc, #444]	; (800dbc4 <_printf_i+0x21c>)
 800da08:	220a      	movs	r2, #10
 800da0a:	e039      	b.n	800da80 <_printf_i+0xd8>
 800da0c:	2973      	cmp	r1, #115	; 0x73
 800da0e:	f000 809d 	beq.w	800db4c <_printf_i+0x1a4>
 800da12:	d808      	bhi.n	800da26 <_printf_i+0x7e>
 800da14:	296f      	cmp	r1, #111	; 0x6f
 800da16:	d020      	beq.n	800da5a <_printf_i+0xb2>
 800da18:	2970      	cmp	r1, #112	; 0x70
 800da1a:	d1dd      	bne.n	800d9d8 <_printf_i+0x30>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	f043 0320 	orr.w	r3, r3, #32
 800da22:	6023      	str	r3, [r4, #0]
 800da24:	e003      	b.n	800da2e <_printf_i+0x86>
 800da26:	2975      	cmp	r1, #117	; 0x75
 800da28:	d017      	beq.n	800da5a <_printf_i+0xb2>
 800da2a:	2978      	cmp	r1, #120	; 0x78
 800da2c:	d1d4      	bne.n	800d9d8 <_printf_i+0x30>
 800da2e:	2378      	movs	r3, #120	; 0x78
 800da30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da34:	4864      	ldr	r0, [pc, #400]	; (800dbc8 <_printf_i+0x220>)
 800da36:	e055      	b.n	800dae4 <_printf_i+0x13c>
 800da38:	6813      	ldr	r3, [r2, #0]
 800da3a:	1d19      	adds	r1, r3, #4
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	6011      	str	r1, [r2, #0]
 800da40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da48:	2301      	movs	r3, #1
 800da4a:	e08c      	b.n	800db66 <_printf_i+0x1be>
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6011      	str	r1, [r2, #0]
 800da50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da54:	bf18      	it	ne
 800da56:	b21b      	sxthne	r3, r3
 800da58:	e7cf      	b.n	800d9fa <_printf_i+0x52>
 800da5a:	6813      	ldr	r3, [r2, #0]
 800da5c:	6825      	ldr	r5, [r4, #0]
 800da5e:	1d18      	adds	r0, r3, #4
 800da60:	6010      	str	r0, [r2, #0]
 800da62:	0628      	lsls	r0, r5, #24
 800da64:	d501      	bpl.n	800da6a <_printf_i+0xc2>
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	e002      	b.n	800da70 <_printf_i+0xc8>
 800da6a:	0668      	lsls	r0, r5, #25
 800da6c:	d5fb      	bpl.n	800da66 <_printf_i+0xbe>
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	4854      	ldr	r0, [pc, #336]	; (800dbc4 <_printf_i+0x21c>)
 800da72:	296f      	cmp	r1, #111	; 0x6f
 800da74:	bf14      	ite	ne
 800da76:	220a      	movne	r2, #10
 800da78:	2208      	moveq	r2, #8
 800da7a:	2100      	movs	r1, #0
 800da7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da80:	6865      	ldr	r5, [r4, #4]
 800da82:	60a5      	str	r5, [r4, #8]
 800da84:	2d00      	cmp	r5, #0
 800da86:	f2c0 8095 	blt.w	800dbb4 <_printf_i+0x20c>
 800da8a:	6821      	ldr	r1, [r4, #0]
 800da8c:	f021 0104 	bic.w	r1, r1, #4
 800da90:	6021      	str	r1, [r4, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d13d      	bne.n	800db12 <_printf_i+0x16a>
 800da96:	2d00      	cmp	r5, #0
 800da98:	f040 808e 	bne.w	800dbb8 <_printf_i+0x210>
 800da9c:	4665      	mov	r5, ip
 800da9e:	2a08      	cmp	r2, #8
 800daa0:	d10b      	bne.n	800daba <_printf_i+0x112>
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	07db      	lsls	r3, r3, #31
 800daa6:	d508      	bpl.n	800daba <_printf_i+0x112>
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	6862      	ldr	r2, [r4, #4]
 800daac:	429a      	cmp	r2, r3
 800daae:	bfde      	ittt	le
 800dab0:	2330      	movle	r3, #48	; 0x30
 800dab2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dab6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800daba:	ebac 0305 	sub.w	r3, ip, r5
 800dabe:	6123      	str	r3, [r4, #16]
 800dac0:	f8cd 8000 	str.w	r8, [sp]
 800dac4:	463b      	mov	r3, r7
 800dac6:	aa03      	add	r2, sp, #12
 800dac8:	4621      	mov	r1, r4
 800daca:	4630      	mov	r0, r6
 800dacc:	f7ff fef6 	bl	800d8bc <_printf_common>
 800dad0:	3001      	adds	r0, #1
 800dad2:	d14d      	bne.n	800db70 <_printf_i+0x1c8>
 800dad4:	f04f 30ff 	mov.w	r0, #4294967295
 800dad8:	b005      	add	sp, #20
 800dada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dade:	4839      	ldr	r0, [pc, #228]	; (800dbc4 <_printf_i+0x21c>)
 800dae0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dae4:	6813      	ldr	r3, [r2, #0]
 800dae6:	6821      	ldr	r1, [r4, #0]
 800dae8:	1d1d      	adds	r5, r3, #4
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6015      	str	r5, [r2, #0]
 800daee:	060a      	lsls	r2, r1, #24
 800daf0:	d50b      	bpl.n	800db0a <_printf_i+0x162>
 800daf2:	07ca      	lsls	r2, r1, #31
 800daf4:	bf44      	itt	mi
 800daf6:	f041 0120 	orrmi.w	r1, r1, #32
 800dafa:	6021      	strmi	r1, [r4, #0]
 800dafc:	b91b      	cbnz	r3, 800db06 <_printf_i+0x15e>
 800dafe:	6822      	ldr	r2, [r4, #0]
 800db00:	f022 0220 	bic.w	r2, r2, #32
 800db04:	6022      	str	r2, [r4, #0]
 800db06:	2210      	movs	r2, #16
 800db08:	e7b7      	b.n	800da7a <_printf_i+0xd2>
 800db0a:	064d      	lsls	r5, r1, #25
 800db0c:	bf48      	it	mi
 800db0e:	b29b      	uxthmi	r3, r3
 800db10:	e7ef      	b.n	800daf2 <_printf_i+0x14a>
 800db12:	4665      	mov	r5, ip
 800db14:	fbb3 f1f2 	udiv	r1, r3, r2
 800db18:	fb02 3311 	mls	r3, r2, r1, r3
 800db1c:	5cc3      	ldrb	r3, [r0, r3]
 800db1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800db22:	460b      	mov	r3, r1
 800db24:	2900      	cmp	r1, #0
 800db26:	d1f5      	bne.n	800db14 <_printf_i+0x16c>
 800db28:	e7b9      	b.n	800da9e <_printf_i+0xf6>
 800db2a:	6813      	ldr	r3, [r2, #0]
 800db2c:	6825      	ldr	r5, [r4, #0]
 800db2e:	6961      	ldr	r1, [r4, #20]
 800db30:	1d18      	adds	r0, r3, #4
 800db32:	6010      	str	r0, [r2, #0]
 800db34:	0628      	lsls	r0, r5, #24
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	d501      	bpl.n	800db3e <_printf_i+0x196>
 800db3a:	6019      	str	r1, [r3, #0]
 800db3c:	e002      	b.n	800db44 <_printf_i+0x19c>
 800db3e:	066a      	lsls	r2, r5, #25
 800db40:	d5fb      	bpl.n	800db3a <_printf_i+0x192>
 800db42:	8019      	strh	r1, [r3, #0]
 800db44:	2300      	movs	r3, #0
 800db46:	6123      	str	r3, [r4, #16]
 800db48:	4665      	mov	r5, ip
 800db4a:	e7b9      	b.n	800dac0 <_printf_i+0x118>
 800db4c:	6813      	ldr	r3, [r2, #0]
 800db4e:	1d19      	adds	r1, r3, #4
 800db50:	6011      	str	r1, [r2, #0]
 800db52:	681d      	ldr	r5, [r3, #0]
 800db54:	6862      	ldr	r2, [r4, #4]
 800db56:	2100      	movs	r1, #0
 800db58:	4628      	mov	r0, r5
 800db5a:	f7f2 fb41 	bl	80001e0 <memchr>
 800db5e:	b108      	cbz	r0, 800db64 <_printf_i+0x1bc>
 800db60:	1b40      	subs	r0, r0, r5
 800db62:	6060      	str	r0, [r4, #4]
 800db64:	6863      	ldr	r3, [r4, #4]
 800db66:	6123      	str	r3, [r4, #16]
 800db68:	2300      	movs	r3, #0
 800db6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db6e:	e7a7      	b.n	800dac0 <_printf_i+0x118>
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	462a      	mov	r2, r5
 800db74:	4639      	mov	r1, r7
 800db76:	4630      	mov	r0, r6
 800db78:	47c0      	blx	r8
 800db7a:	3001      	adds	r0, #1
 800db7c:	d0aa      	beq.n	800dad4 <_printf_i+0x12c>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	079b      	lsls	r3, r3, #30
 800db82:	d413      	bmi.n	800dbac <_printf_i+0x204>
 800db84:	68e0      	ldr	r0, [r4, #12]
 800db86:	9b03      	ldr	r3, [sp, #12]
 800db88:	4298      	cmp	r0, r3
 800db8a:	bfb8      	it	lt
 800db8c:	4618      	movlt	r0, r3
 800db8e:	e7a3      	b.n	800dad8 <_printf_i+0x130>
 800db90:	2301      	movs	r3, #1
 800db92:	464a      	mov	r2, r9
 800db94:	4639      	mov	r1, r7
 800db96:	4630      	mov	r0, r6
 800db98:	47c0      	blx	r8
 800db9a:	3001      	adds	r0, #1
 800db9c:	d09a      	beq.n	800dad4 <_printf_i+0x12c>
 800db9e:	3501      	adds	r5, #1
 800dba0:	68e3      	ldr	r3, [r4, #12]
 800dba2:	9a03      	ldr	r2, [sp, #12]
 800dba4:	1a9b      	subs	r3, r3, r2
 800dba6:	42ab      	cmp	r3, r5
 800dba8:	dcf2      	bgt.n	800db90 <_printf_i+0x1e8>
 800dbaa:	e7eb      	b.n	800db84 <_printf_i+0x1dc>
 800dbac:	2500      	movs	r5, #0
 800dbae:	f104 0919 	add.w	r9, r4, #25
 800dbb2:	e7f5      	b.n	800dba0 <_printf_i+0x1f8>
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1ac      	bne.n	800db12 <_printf_i+0x16a>
 800dbb8:	7803      	ldrb	r3, [r0, #0]
 800dbba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbc2:	e76c      	b.n	800da9e <_printf_i+0xf6>
 800dbc4:	0800dde1 	.word	0x0800dde1
 800dbc8:	0800ddf2 	.word	0x0800ddf2

0800dbcc <memmove>:
 800dbcc:	4288      	cmp	r0, r1
 800dbce:	b510      	push	{r4, lr}
 800dbd0:	eb01 0302 	add.w	r3, r1, r2
 800dbd4:	d807      	bhi.n	800dbe6 <memmove+0x1a>
 800dbd6:	1e42      	subs	r2, r0, #1
 800dbd8:	4299      	cmp	r1, r3
 800dbda:	d00a      	beq.n	800dbf2 <memmove+0x26>
 800dbdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbe0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dbe4:	e7f8      	b.n	800dbd8 <memmove+0xc>
 800dbe6:	4283      	cmp	r3, r0
 800dbe8:	d9f5      	bls.n	800dbd6 <memmove+0xa>
 800dbea:	1881      	adds	r1, r0, r2
 800dbec:	1ad2      	subs	r2, r2, r3
 800dbee:	42d3      	cmn	r3, r2
 800dbf0:	d100      	bne.n	800dbf4 <memmove+0x28>
 800dbf2:	bd10      	pop	{r4, pc}
 800dbf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dbfc:	e7f7      	b.n	800dbee <memmove+0x22>

0800dbfe <_realloc_r>:
 800dbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc00:	4607      	mov	r7, r0
 800dc02:	4614      	mov	r4, r2
 800dc04:	460e      	mov	r6, r1
 800dc06:	b921      	cbnz	r1, 800dc12 <_realloc_r+0x14>
 800dc08:	4611      	mov	r1, r2
 800dc0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc0e:	f7ff bc77 	b.w	800d500 <_malloc_r>
 800dc12:	b922      	cbnz	r2, 800dc1e <_realloc_r+0x20>
 800dc14:	f7ff fc26 	bl	800d464 <_free_r>
 800dc18:	4625      	mov	r5, r4
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc1e:	f000 f814 	bl	800dc4a <_malloc_usable_size_r>
 800dc22:	42a0      	cmp	r0, r4
 800dc24:	d20f      	bcs.n	800dc46 <_realloc_r+0x48>
 800dc26:	4621      	mov	r1, r4
 800dc28:	4638      	mov	r0, r7
 800dc2a:	f7ff fc69 	bl	800d500 <_malloc_r>
 800dc2e:	4605      	mov	r5, r0
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d0f2      	beq.n	800dc1a <_realloc_r+0x1c>
 800dc34:	4631      	mov	r1, r6
 800dc36:	4622      	mov	r2, r4
 800dc38:	f7ff fc00 	bl	800d43c <memcpy>
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	4638      	mov	r0, r7
 800dc40:	f7ff fc10 	bl	800d464 <_free_r>
 800dc44:	e7e9      	b.n	800dc1a <_realloc_r+0x1c>
 800dc46:	4635      	mov	r5, r6
 800dc48:	e7e7      	b.n	800dc1a <_realloc_r+0x1c>

0800dc4a <_malloc_usable_size_r>:
 800dc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc4e:	1f18      	subs	r0, r3, #4
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	bfbc      	itt	lt
 800dc54:	580b      	ldrlt	r3, [r1, r0]
 800dc56:	18c0      	addlt	r0, r0, r3
 800dc58:	4770      	bx	lr
	...

0800dc5c <_init>:
 800dc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5e:	bf00      	nop
 800dc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc62:	bc08      	pop	{r3}
 800dc64:	469e      	mov	lr, r3
 800dc66:	4770      	bx	lr

0800dc68 <_fini>:
 800dc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6a:	bf00      	nop
 800dc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc6e:	bc08      	pop	{r3}
 800dc70:	469e      	mov	lr, r3
 800dc72:	4770      	bx	lr
